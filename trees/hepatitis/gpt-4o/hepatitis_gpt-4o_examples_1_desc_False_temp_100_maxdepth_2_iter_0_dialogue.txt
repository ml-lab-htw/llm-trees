


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node 0: Check if BILIRUBIN <= 3.0
    nodes[0] = X["BILIRUBIN"] <= 3.0
    
    if nodes[0]:
        # Node 1: Check if PROTIME <= 14.0
        nodes[1] = X["PROTIME"] <= 14.0
        
        if nodes[1]:
            prediction = 1  # survives
        else:
            prediction = 0  # dies
    else:
        # Node 1: Check if AGE <= 50
        nodes[1] = X["AGE"] <= 50
        
        if nodes[1]:
            prediction = 1  # survives
        else:
            prediction = 0  # dies

    return prediction, nodes
```

### Explanation:
- **nodes[0]** checks whether the patient's **BILIRUBIN** level is less than or equal to 3.0.
- If **nodes[0]** is `True`, we proceed to check **PROTIME** (prothrombin time). If it's less than or equal to 14.0 (`nodes[1]`), the patient is predicted to **survive** (`prediction = 1`), otherwise, they are predicted to **die** (`prediction = 0`).
- If **nodes[0]** is `False`, we check **AGE**. If the patient's age is less than or equal to 50, they are predicted to **survive** (`prediction = 1`), otherwise, they are predicted to **die** (`prediction = 0`).

This function follows the decision tree structure with depth 2 and returns both the prediction (0 for **dies**, 1 for **survives**) and the list of truth values (`nodes`) representing the decisions at each split.