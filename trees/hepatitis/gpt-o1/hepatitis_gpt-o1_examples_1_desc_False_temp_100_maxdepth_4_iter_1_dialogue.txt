


```python
def predict(X):
    nodes = [None] * 4  # Initialize the list for inner node truth values

    # Node 0: PROTIME <= 40
    nodes[0] = int(X['PROTIME'] <= 40)

    # Node 1: BILIRUBIN <= 2.0
    nodes[1] = int(X['BILIRUBIN'] <= 2.0)

    # Node 2: ALBUMIN > 3.0
    nodes[2] = int(X['ALBUMIN'] > 3.0)

    # Node 3: VARICES == 0 (0 = no, 1 = yes)
    nodes[3] = int(X['VARICES'] == 0)

    # Decision tree logic
    if nodes[0]:  # PROTIME <= 40
        if nodes[1]:  # BILIRUBIN <= 2.0
            if nodes[2]:  # ALBUMIN > 3.0
                prediction = 1  # Survived
            else:
                prediction = 0  # Died
        else:
            if nodes[3]:  # VARICES == 0 (no)
                prediction = 1  # Survived
            else:
                prediction = 0  # Died
    else:
        prediction = 0  # Died

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - `'PROTIME'`: Prothrombin time in seconds.
  - `'BILIRUBIN'`: Bilirubin level in mg/dL.
  - `'ALBUMIN'`: Albumin level in g/dL.
  - `'VARICES'`: Presence of varices (0 = no, 1 = yes).

- **Nodes List:**
  - The `nodes` list contains the truth values of the inner nodes in the decision tree.
  - Each entry is `1` if the condition is satisfied, `0` otherwise.

- **Decision Tree Logic:**
  - **Node 0:** Checks if `PROTIME` is less than or equal to 40 seconds.
    - If **Yes** (`nodes[0] = 1`):
      - **Node 1:** Checks if `BILIRUBIN` is less than or equal to 2.0 mg/dL.
        - If **Yes** (`nodes[1] = 1`):
          - **Node 2:** Checks if `ALBUMIN` is greater than 3.0 g/dL.
            - If **Yes** (`nodes[2] = 1`): Predict **Survived** (`prediction = 1`).
            - If **No** (`nodes[2] = 0`): Predict **Died** (`prediction = 0`).
        - If **No** (`nodes[1] = 0`):
          - **Node 3:** Checks if `VARICES` is equal to 0 (No varices).
            - If **Yes** (`nodes[3] = 1`): Predict **Survived** (`prediction = 1`).
            - If **No** (`nodes[3] = 0`): Predict **Died** (`prediction = 0`).
    - If **No** (`nodes[0] = 0`): Predict **Died** (`prediction = 0`).

- **Usage:**

  To use this function, create a dictionary `X` with the exact feature keys and their corresponding values. Here's an example:

  ```python
  X = {
      'AGE': 50,
      'SEX': 2,
      'STEROID': 1,
      'ANTIVIRALS': 0,
      'FATIGUE': 1,
      'MALAISE': 0,
      'ANOREXIA': 0,
      'LIVER BIG': 1,
      'LIVER FIRM': 1,
      'SPLEEN PALPABLE': 0,
      'SPIDERS': 0,
      'ASCITES': 0,
      'VARICES': 1,          # 0 = no, 1 = yes
      'BILIRUBIN': 1.8,      # mg/dL
      'ALK PHOSPHATE': 85,
      'SGOT': 28,
      'ALBUMIN': 3.5,        # g/dL
      'PROTIME': 35,         # seconds
      'HISTOLOGY': 1
  }

  prediction, nodes = predict(X)
  print("Prediction:", "Survived" if prediction == 1 else "Died")
  print("Inner Nodes Truth Values:", nodes)
  ```

- **Note:**
  - Make sure to use the exact feature keys as provided.
  - The function will return:
    - `prediction`: `1` for survived, `0` for died.
    - `nodes`: A list containing `1`s and `0`s representing the truth values of the conditions in the decision tree.