


Here's the decision tree formatted as a Python function:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # Node 0: Wage increase in the first year >= 5.0%
    nodes[0] = X["wage increase first year"] >= 5.0
    if nodes[0]:
        # Node 1: Employer's contribution to health plan is 'full'
        nodes[1] = X["contribution to health plan"] == "full"
        if nodes[1]:
            prediction = 1  # Outcome: Good
        else:
            # Node 2: Number of paid vacation days is 'gnr' (generous)
            nodes[2] = X["vacation"] == "gnr"
            if nodes[2]:
                prediction = 1  # Outcome: Good
            else:
                prediction = 0  # Outcome: Bad
    else:
        # Node 3: Cost of living adjustment is not 'none'
        nodes[3] = X["cost of living adjustment"] != 0
        if nodes[3]:
            # Node 4: Employer contributions to pension plan is not 'none'
            nodes[4] = X["pension"] != 0
            if nodes[4]:
                prediction = 1  # Outcome: Good
            else:
                prediction = 0  # Outcome: Bad
        else:
            prediction = 0  # Outcome: Bad

    # Convert boolean nodes to integers (1 for True, 0 for False)
    nodes = [int(node) if node is not None else None for node in nodes]
    return prediction, nodes
```

**Explanation of the Function:**

- **Inputs:**
  - `X`: A dictionary containing the feature values with the exact keys provided.
  
- **Nodes List:**
  - `nodes[0]`: Checks if the wage increase in the first year is **greater than or equal to 5%**.
  - `nodes[1]`: If `nodes[0]` is **True**, checks if the employer's contribution to the health plan is **'full'**.
  - `nodes[2]`: If `nodes[1]` is **False**, checks if the number of paid vacation days is **'gnr'** (generous).
  - `nodes[3]`: If `nodes[0]` is **False**, checks if the cost of living adjustment is **not 'none'**.
  - `nodes[4]`: If `nodes[3]` is **True**, checks if the employer contributions to the pension plan is **not 'none'**.

- **Outputs:**
  - `prediction`: The final classification (**0** for bad outcome, **1** for good outcome).
  - `nodes`: A list of integers representing the truth values of the nodes (1 if the condition is satisfied, 0 otherwise).

**Note on Feature Encodings:**

- **vacation**:
  - 'ba' for below average
  - 'avg' for average
  - 'gnr' for generous

- **cost of living adjustment**:
  - 'none'
  - 'tcf'
  - 'tc'

- **pension**:
  - 'none'
  - 'ret_allw'
  - 'empl_contr'

- **contribution to health plan**:
  - 'none'
  - 'half'
  - 'full'

**Usage Example:**

```python
# Example input
X_example = {
    "wage increase first year": 5.5,
    "contribution to health plan": "full",
    "vacation": "gnr",
    "cost of living adjustment": "tcf",
    "pension": "empl_contr"
}

# Get prediction and nodes
prediction, nodes = predict(X_example)

print(f"Prediction: {'Good' if prediction == 1 else 'Bad'}")
print(f"Nodes: {nodes}")
```

This function will help you classify the outcome of labor negotiations based on the most significant features, following the decision tree with a maximum depth of 5.
