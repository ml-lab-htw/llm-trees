


Certainly! Based on your instructions and the decision tree provided, here's the Python function formatted as per your requirements:

```python
def predict(X: dict):
    nodes = [None] * 3  # Initialize a list to store truth values of inner nodes
    
    # Node 0: Wage increase in the first year <= 4%
    nodes[0] = int(X['wage increase first year'] <= 4.0)
    
    if nodes[0]:
        # If wage increase in the first year is 4% or less
        prediction = 0  # Bad outcome
    else:
        # Wage increase in the first year is greater than 4%
        # Node 1: Employer's contribution towards health plan is 'full'
        nodes[1] = int(X['contribution to health plan'] == 'full')
        
        if nodes[1]:
            # Employer fully contributes to the health plan
            prediction = 1  # Good outcome
        else:
            # Employer does not fully contribute to the health plan
            # Node 2: Wage increase in the second year <= 4%
            nodes[2] = int(X['wage increase second year'] <= 4.0)
            
            if nodes[2]:
                # Wage increase in the second year is 4% or less
                prediction = 0  # Bad outcome
            else:
                # Wage increase in the second year is greater than 4%
                prediction = 1  # Good outcome
                
    return prediction, nodes
```

**Explanation:**

- **Nodes List:**
  - `nodes[0]` corresponds to the condition `wage increase first year <= 4.0`.
  - `nodes[1]` corresponds to the condition `contribution to health plan == 'full'`.
  - `nodes[2]` corresponds to the condition `wage increase second year <= 4.0`.
  - Each entry is `1` if the condition is satisfied (`True`), `0` otherwise (`False`).

- **Prediction:**
  - `0` indicates a **Bad** outcome in labor negotiations.
  - `1` indicates a **Good** outcome.

**Assumptions:**

- The input dictionary `X` must use the exact feature keys provided.
- The values for `'wage increase first year'` and `'wage increase second year'` are numeric percentages (e.g., `4.0` represents 4%).
- The value for `'contribution to health plan'` is one of the following strings: `'none'`, `'half'`, or `'full'`.

**Feature Keys:**

```python
[
    'duration', 'wage increase first year', 'wage increase second year',
    'wage increase third year', 'cost of living adjustment', 'working hours',
    'pension', 'standby pay', 'shift differential', 'education allowance',
    'statutory holidays', 'vacation', 'longterm disability assistance',
    'contribution to dental plan', 'bereavement assistance',
    'contribution to health plan'
]
```

**Target Variable:**

- **`target`**: Final settlements in labor negotiations in Canadian industry
  - `0`: Bad outcome
  - `1`: Good outcome

**Usage Example:**

```python
# Example input data
X_example = {
    'duration': 3,
    'wage increase first year': 5.0,
    'wage increase second year': 4.5,
    'wage increase third year': 5.0,
    'cost of living adjustment': 'none',
    'working hours': 37.5,
    'pension': 'empl_contr',
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': 'true',
    'statutory holidays': 12,
    'vacation': 'avg',
    'longterm disability assistance': 'true',
    'contribution to dental plan': 'half',
    'bereavement assistance': 'true',
    'contribution to health plan': 'full'
}

# Get prediction and nodes
prediction, nodes = predict(X_example)

print("Prediction:", "Good" if prediction == 1 else "Bad")
print("Nodes truth values:", nodes)
```

**Output:**

```
Prediction: Good
Nodes truth values: [0, 1, None]
```

In this example:

1. **Node 0 (`nodes[0]`)**:
   - Condition: `'wage increase first year' <= 4.0`
   - Value: `5.0 <= 4.0` → `False` → `0`
2. **Node 1 (`nodes[1]`)**:
   - Condition: `'contribution to health plan' == 'full'`
   - Value: `'full' == 'full'` → `True` → `1`
3. **Node 2 (`nodes[2]`)**:
   - Not evaluated because Node 1 condition is satisfied.

**Explanation:**

- Since the wage increase in the first year is more than 4% (`nodes[0] = 0`), we check the next condition.
- The employer fully contributes to the health plan (`nodes[1] = 1`), so the negotiation outcome is predicted as **Good**.

**Detailed Breakdown:**

1. **First Condition (`nodes[0]`):**

   ```python
   nodes[0] = int(X['wage increase first year'] <= 4.0)
   # For X_example:
   # nodes[0] = int(5.0 <= 4.0) → int(False) → 0
   ```

2. **Second Condition (`nodes[1]`):**

   ```python
   nodes[1] = int(X['contribution to health plan'] == 'full')
   # For X_example:
   # nodes[1] = int('full' == 'full') → int(True) → 1
   ```

3. **Third Condition (`nodes[2]`):**

   - Not evaluated in this case because the second condition is satisfied.

**Additional Notes:**

- If the employer did not fully contribute to the health plan, the function would evaluate the third condition (`nodes[2]`).
- The function ensures that the **maximum depth is 4**, as per your requirement (3 decision nodes and 1 leaf node).

**Testing the Function with Different Inputs:**

- **Scenario 1:**

  ```python
  X_test = {
      'wage increase first year': 3.5,  # <= 4.0
      'wage increase second year': 5.0, 
      'contribution to health plan': 'half'
  }
  prediction, nodes = predict(X_test)
  # prediction should be 0 (Bad)
  # nodes = [1, None, None]
  ```

- **Scenario 2:**

  ```python
  X_test = {
      'wage increase first year': 5.0,  # > 4.0
      'wage increase second year': 3.0,  # <= 4.0
      'contribution to health plan': 'none'  # Not 'full'
  }
  prediction, nodes = predict(X_test)
  # prediction should be 0 (Bad)
  # nodes = [0, 0, 1]
  ```

- **Scenario 3:**

  ```python
  X_test = {
      'wage increase first year': 5.0,  # > 4.0
      'wage increase second year': 5.0,  # > 4.0
      'contribution to health plan': 'half'  # Not 'full'
  }
  prediction, nodes = predict(X_test)
  # prediction should be 1 (Good)
  # nodes = [0, 0, 0]
  ```

**Final Remarks:**

- The function strictly adheres to the given feature keys and conditions.
- All thresholds are filled with meaningful values based on the ranges provided.
- The function is designed to be easily testable and interpretable.

Let me know if you need any further assistance or modifications!