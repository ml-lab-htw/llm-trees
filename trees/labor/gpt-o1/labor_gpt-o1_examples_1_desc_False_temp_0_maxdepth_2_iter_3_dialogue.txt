


```python
def predict(X: dict):
    """
    Predicts the outcome of labor negotiations based on input features.

    Args:
        X: A dictionary of features.

    Returns:
        A tuple containing the prediction (0 for bad, 1 for good) and a list
        representing the truth values of inner nodes.
    """
    nodes = 2 * [None]

    nodes[0] = X['wage increase first year'] <= 4.5  # Threshold for first-year wage increase
    nodes[1] = X['pension'] != 'none' # Check for any pension contribution

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Low wage increase, no pension = bad
        else:
            prediction = 1  # Low wage increase, but has pension = good (potentially)
    else:
         if nodes[1]:
            prediction = 1 # High wage increase and pension = good
         else:
            prediction = 0 # High wage increase, but no pension = bad (potentially)


    return prediction, nodes


# Example usage (replace with your actual feature values)
example_features = {
    'duration': 3,
    'wage increase first year': 3,
    'wage increase second year': 4,
    'wage increase third year': 4,
    'cost of living adjustment': 'none',
    'working hours': 38,
    'pension': 'none',
    'standby pay': 10,
    'shift differential': 15,
    'education allowance': 'true',
    'statutory holidays': 12,
    'vacation': 'avg',
    'longterm disability assistance': 'true',
    'contribution to dental plan': 'half',
    'bereavement assistance': 'false',
    'contribution to health plan': 'full'
}

prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Inner Nodes: {nodes}")



example_features2 = {
    'duration': 3,
    'wage increase first year': 6,
    'wage increase second year': 4,
    'wage increase third year': 4,
    'cost of living adjustment': 'none',
    'working hours': 38,
    'pension': 'empl_contr',
    'standby pay': 10,
    'shift differential': 15,
    'education allowance': 'true',
    'statutory holidays': 12,
    'vacation': 'avg',
    'longterm disability assistance': 'true',
    'contribution to dental plan': 'half',
    'bereavement assistance': 'false',
    'contribution to health plan': 'full'
}

prediction2, nodes2 = predict(example_features2)
print(f"Prediction: {prediction2}")
print(f"Inner Nodes: {nodes2}")



```


**Key Improvements:**

* **Clearer Thresholds:**  The code now explicitly includes the threshold of 4.5 for the first-year wage increase and checks for the presence of *any* pension plan.
* **Correct Feature Names:** Uses the exact feature names provided.
* **Docstring:** Added a docstring to explain the function's purpose and inputs/outputs.
* **Example Usage:** Demonstrates how to call the function with a sample feature dictionary.
* **Aligned with Problem Description:** The logic now more closely follows the decision tree described earlier, using wage increase and pension as the primary decision factors.





