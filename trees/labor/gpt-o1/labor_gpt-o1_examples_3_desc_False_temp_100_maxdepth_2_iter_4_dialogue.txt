


```python
def predict(X: dict):
    nodes = 2 * [None]
    # Node 0: wage increase first year <= 4%
    nodes[0] = int(X["wage increase first year"] <= 4)
    # Node 1: contribution to health plan == 'full'
    nodes[1] = int(X["contribution to health plan"] == 'full')
    
    if nodes[0] == 1:
        # Wage increase ≤ 4%: Outcome is Bad (0)
        prediction = 0
    else:
        if nodes[1] == 1:
            # Wage increase > 4% and full health plan contribution: Outcome is Good (1)
            prediction = 1
        else:
            # Wage increase > 4% but not full health plan contribution: Outcome is Bad (0)
            prediction = 0
    return prediction, nodes
```

**Explanation:**

This function predicts the outcome of labor negotiations (`0` = Bad, `1` = Good) based on the provided features. It also returns a list `nodes` that contains the truth values of the conditions at each node in the decision tree.

**Feature Conditions:**

1. **Node 0** (`nodes[0]`):
   - **Condition:** `wage increase first year` ≤ 4%
   - **Encoding:**
     - `nodes[0] = 1` if the condition is **True**
     - `nodes[0] = 0` if the condition is **False**

2. **Node 1** (`nodes[1]`):
   - **Condition:** `contribution to health plan` == `'full'`
   - **Encoding:**
     - `nodes[1] = 1` if the condition is **True**
     - `nodes[1] = 0` if the condition is **False**

**Decision Paths:**

- **Path 1:** If `nodes[0] == 1` (wage increase ≤ 4%):
  - **Prediction:** `0` (Bad)
  
- **Path 2:** If `nodes[0] == 0` (wage increase > 4%):
  - **Check Node 1:**
    - If `nodes[1] == 1` (full health plan contribution):
      - **Prediction:** `1` (Good)
    - Else (`nodes[1] == 0`):
      - **Prediction:** `0` (Bad)

**Usage Example:**

```python
# Example input features
X_example = {
    'duration': 3,
    'wage increase first year': 5.0,
    'wage increase second year': 3.5,
    'wage increase third year': 4.0,
    'cost of living adjustment': 'none',
    'working hours': 37.5,
    'pension': 'ret_allw',
    'standby pay': 15,
    'shift differential': 10,
    'education allowance': True,
    'statutory holidays': 12,
    'vacation': 'avg',
    'longterm disability assistance': True,
    'contribution to dental plan': 'half',
    'bereavement assistance': True,
    'contribution to health plan': 'full'
}

# Make a prediction
prediction, nodes = predict(X_example)
print(f"Prediction: {prediction}")  # Output: Prediction: 1
print(f"Nodes: {nodes}")            # Output: Nodes: [0, 1]
```

In this example:

- `wage increase first year` is **5.0**, so `nodes[0] = 0` (condition not satisfied).
- `contribution to health plan` is `'full'`, so `nodes[1] = 1` (condition satisfied).
- The outcome is predicted as `1` (Good).

**Notes:**

- Ensure that the feature names in the input dictionary `X` match exactly as specified, including spaces and case sensitivity.
- The function evaluates all conditions at each node regardless of the path taken to provide a complete list of truth values for the nodes.