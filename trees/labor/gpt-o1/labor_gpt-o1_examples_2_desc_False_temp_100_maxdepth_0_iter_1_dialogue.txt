


Certainly! Below is the decision tree formatted as a Python function named `predict`. This function takes a dictionary `X` containing the features (with exact key names as provided) and returns a single prediction (`0` for Bad Outcome, `1` for Good Outcome) along with a list `nodes` representing the truth values of the inner nodes (conditions). Each entry in `nodes` is `1` if the condition is satisfied and `0` otherwise.

```python
def predict(X):
    nodes = [None] * 5
    # Node 0: Wage Increase in First Year <= 3.0%
    nodes[0] = 1 if X['wage increase first year'] <= 3.0 else 0
    
    # Node 1: Employer Contributions to Pension Plan == 'none'
    nodes[1] = 1 if X['pension'] == 'none' else 0
    
    # Node 2: Employer's Contribution Towards Health Plan == 'none' (Note: This node doesn't affect the outcome in this tree)
    nodes[2] = 1 if X['contribution to health plan'] == 'none' else 0
    
    # Node 3: Cost of Living Adjustment == 'tc' (Total Compensation Adjustment)
    nodes[3] = 1 if X['cost of living adjustment'] == 'tc' else 0
    
    # Node 4: Vacation == 'gnr' (Generous)
    nodes[4] = 1 if X['vacation'] == 'gnr' else 0

    if nodes[0]:  # Wage Increase in First Year <= 3.0%
        if nodes[1]:  # Pension == 'none'
            prediction = 0  # Bad Outcome
        else:
            prediction = 1  # Good Outcome
    else:  # Wage Increase in First Year > 3.0%
        if nodes[3]:  # Cost of Living Adjustment == 'tc'
            prediction = 1  # Good Outcome
        else:
            if nodes[4]:  # Vacation == 'gnr'
                prediction = 1  # Good Outcome
            else:
                prediction = 0  # Bad Outcome

    return prediction, nodes
```

### Explanation:

1. **Node 0** (`nodes[0]`): Checks if the **wage increase in the first year** is less than or equal to **3.0%**.
   - **Condition**: `X['wage increase first year'] <= 3.0`
   - **Importance**: Employees are likely dissatisfied with low wage increases, which may lead to a bad negotiation outcome.

2. **Node 1** (`nodes[1]`): Checks if the **employer contributions to the pension plan** is **'none'**.
   - **Condition**: `X['pension'] == 'none'`
   - **Importance**: Lack of pension contributions is unfavorable to employees.

3. **Node 2** (`nodes[2]`): Checks if the **employer's contribution towards the health plan** is **'none'**.
   - **Condition**: `X['contribution to health plan'] == 'none'`
   - **Note**: In this tree, regardless of this condition's outcome, the final prediction in this branch is the same. It's included here for completeness and potential extension of the tree.

4. **Node 3** (`nodes[3]`): Checks if the **cost of living adjustment (COLA)** is **'tc'** (Total Compensation Adjustment).
   - **Condition**: `X['cost of living adjustment'] == 'tc'`
   - **Importance**: A total compensation adjustment fully compensates for cost-of-living increases, which is favorable.

5. **Node 4** (`nodes[4]`): Checks if the **number of paid vacation days** is **'gnr'** (Generous).
   - **Condition**: `X['vacation'] == 'gnr'`
   - **Importance**: Generous vacation days improve employee satisfaction.

### How the Decision is Made:

- **If** the **wage increase in the first year** is **less than or equal to 3.0%** (`nodes[0]` is `1`):
  - **And** the **employer provides no pension contributions** (`nodes[1]` is `1`):
    - The outcome is predicted to be **Bad** (`prediction = 0`).
  - **Else** (employer provides some pension contributions):
    - The outcome is predicted to be **Good** (`prediction = 1`).

- **Else** (wage increase in the first year is greater than 3.0%):
  - **If** the **cost of living adjustment** is **'tc'** (`nodes[3]` is `1`):
    - The outcome is predicted to be **Good** (`prediction = 1`).
  - **Else**:
    - **If** the **vacation days** are **generous** (`nodes[4]` is `1`):
      - The outcome is predicted to be **Good** (`prediction = 1`).
    - **Else**:
      - The outcome is predicted to be **Bad** (`prediction = 0`).

### Usage Example:

Suppose you have the following input data:

```python
input_data = {
    'duration': 3,
    'wage increase first year': 2.5,
    'wage increase second year': 3.0,
    'wage increase third year': 3.5,
    'cost of living adjustment': 'none',
    'working hours': 37.5,
    'pension': 'none',
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': True,
    'statutory holidays': 10,
    'vacation': 'avg',
    'longterm disability assistance': True,
    'contribution to dental plan': 'half',
    'bereavement assistance': True,
    'contribution to health plan': 'none'
}

prediction, nodes = predict(input_data)
print(f"Prediction: {'Good Outcome' if prediction == 1 else 'Bad Outcome'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: Bad Outcome
Nodes: [1, 1, 1, 0, 0]
```

### Notes:

- **Feature Encodings**:
  - **Vacation**:
    - `'ba'`: Below Average
    - `'avg'`: Average
    - `'gnr'`: Generous
  - **Cost of Living Adjustment**:
    - `'none'`: None
    - `'tcf'`: Temporary Cost of Living Adjustment Formula
    - `'tc'`: Total Compensation Adjustment
  - **Pension**:
    - `'none'`: None
    - `'ret_allw'`: Retirement Allowance Included
    - `'empl_contr'`: Employee Contribution
  - **Contribution to Health Plan**:
    - `'none'`: None
    - `'half'`: Half
    - `'full'`: Full

- **Target Variable Encoding**:
  - `0`: Bad Outcome
  - `1`: Good Outcome

- **Truth Values in Nodes List**:
  - Each element in the `nodes` list corresponds to the condition at that node.
  - A value of `1` means the condition is **satisfied**.
  - A value of `0` means the condition is **not satisfied**.

### Reminder:

- Make sure to use the exact key names and feature encodings as specified when preparing the input data.
- The decision tree is a simplified representation and may not capture all nuances of labor negotiations.
- The thresholds and conditions are based on the most impactful features influencing labor negotiation outcomes.

Let me know if you need further assistance or modifications!