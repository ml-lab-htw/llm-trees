


```python
def predict(X: dict):
    nodes = [None, None, None]

    # Node 0: wage increase in first year <= 4.0%
    nodes[0] = X["wage increase first year"] <= 4.0

    if nodes[0]:
        # Left branch: wage increase first year <= 4.0%
        nodes[1] = X["contribution to health plan"] == 'none'
        # Outcome is 'Bad' regardless of the employer's health plan contribution
        prediction = 0  # Bad
    else:
        # Right branch: wage increase first year > 4.0%
        nodes[1] = X["cost of living adjustment"] == 'none'
        if nodes[1]:
            # If there's no cost of living adjustment, outcome is 'Bad'
            prediction = 0  # Bad
        else:
            # Cost of living adjustment is present
            nodes[2] = X["vacation"] == 'gnr'  # 'gnr' stands for 'generous'
            # Outcome is 'Good' regardless of vacation days
            prediction = 1  # Good

    return prediction, nodes
```

**Explanation:**

- **Nodes List:** The `nodes` list keeps track of the truth values of the inner nodes in the decision tree.

- **Node 0:** Checks if the **wage increase in the first year** is **less than or equal to 4%**.
  - `nodes[0] = X["wage increase first year"] <= 4.0`

- **Left Branch (nodes[0] is `True`):**
  - **Node 1:** Evaluates the **employer's contribution towards the health plan**.
    - `nodes[1] = X["contribution to health plan"] == 'none'`
  - **Outcome:** Classified as **Bad** (`prediction = 0`) regardless of the employer's health plan contribution.

- **Right Branch (nodes[0] is `False`):**
  - **Node 1:** Checks if the **cost of living adjustment** is **'none'**.
    - `nodes[1] = X["cost of living adjustment"] == 'none'`
  - If there is **no cost of living adjustment**, the outcome is **Bad** (`prediction = 0`).
  - If there is a cost of living adjustment:
    - **Node 2:** Evaluates if the number of **paid vacation days** is **'generous'**.
      - `nodes[2] = X["vacation"] == 'gnr'`
    - **Outcome:** Classified as **Good** (`prediction = 1`) regardless of the vacation days.

**Note on Feature Encoding:**

- **cost of living adjustment:**
  - 'none' for no adjustment.
  - 'tcf' for temporary cost of living adjustment formula.
  - 'tc' for total compensation adjustment.

- **contribution to health plan:**
  - 'none', 'half', 'full'

- **vacation:**
  - 'ba' for below average.
  - 'avg' for average.
  - 'gnr' for generous.

**Usage Example:**

```python
# Example input
X = {
    "duration": 5,
    "wage increase first year": 5.0,
    "wage increase second year": 5.0,
    "wage increase third year": 5.0,
    "cost of living adjustment": "tc",
    "working hours": 37,
    "pension": "empl_contr",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": "yes",
    "statutory holidays": 12,
    "vacation": "gnr",
    "longterm disability assistance": "yes",
    "contribution to dental plan": "full",
    "bereavement assistance": "yes",
    "contribution to health plan": "full"
}

prediction, nodes = predict(X)
print(f"Prediction: {'Good' if prediction == 1 else 'Bad'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: Good
Nodes: [False, False, True]
```

**Interpretation:**

- `nodes[0]` is `False` because the wage increase in the first year is greater than 4%.
- `nodes[1]` is `False` because the cost of living adjustment is not 'none'.
- `nodes[2]` is `True` because the vacation is 'gnr' (generous).
- The final prediction is **Good**.