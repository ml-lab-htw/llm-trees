


Certainly! Here's the decision tree formatted as a Python function:

```python
def predict(X: dict):
    nodes = [None] * 3
    # Node 0: Wage increase in first year <= 3.0%
    nodes[0] = 1 if X["wage increase first year"] <= 3.0 else 0
    # Node 1: Employer's contribution towards health plan is 'none'
    nodes[1] = 1 if X["contribution to health plan"] == "none" else 0
    # Node 2: Number of paid vacation days is 'ba' (below average) or 'avg' (average)
    nodes[2] = 1 if X["vacation"] in ["ba", "avg"] else 0

    if nodes[0]:
        # If wage increase in first year <= 3.0%, outcome is Bad
        prediction = 0  # Bad
    else:
        if nodes[1]:
            # If employer does not contribute towards health plan, outcome is Bad
            prediction = 0  # Bad
        else:
            if nodes[2]:
                # If vacation is below average or average, outcome is Bad
                prediction = 0  # Bad
            else:
                # If vacation is generous, outcome is Good
                prediction = 1  # Good
    return prediction, nodes
```

**Explanation:**

- **Function Inputs:**
  - `X`: A dictionary containing the features with the exact keys as specified.
- **Nodes List:**
  - `nodes[0]`: Checks if the wage increase in the first year is 3% or less.
  - `nodes[1]`: Checks if the employer's contribution towards the health plan is 'none'.
  - `nodes[2]`: Checks if the number of paid vacation days is 'ba' (below average) or 'avg' (average).

- **Decision Logic:**
  - **Node 0:**
    - If `nodes[0]` is `1` (condition satisfied), the prediction is `0` (Bad outcome).
  - **Node 1:**
    - If `nodes[0]` is `0` and `nodes[1]` is `1`, the prediction is `0` (Bad outcome).
  - **Node 2:**
    - If `nodes[0]` and `nodes[1]` are `0`, and `nodes[2]` is `1`, the prediction is `0` (Bad outcome).
  - **Else:**
    - If all conditions above are not satisfied, the prediction is `1` (Good outcome).

**Feature Keys:**

- Ensure that the keys in your input dictionary `X` match exactly:
  - `"duration"`
  - `"wage increase first year"`
  - `"wage increase second year"`
  - `"wage increase third year"`
  - `"cost of living adjustment"`
  - `"working hours"`
  - `"pension"`
  - `"standby pay"`
  - `"shift differential"`
  - `"education allowance"`
  - `"statutory holidays"`
  - `"vacation"`
  - `"longterm disability assistance"`
  - `"contribution to dental plan"`
  - `"bereavement assistance"`
  - `"contribution to health plan"`

**Target Variable Encoding:**

- The function returns:
  - `prediction`: `0` for **Bad** outcome, `1` for **Good** outcome.
  - `nodes`: A list of integers (`1` or `0`) representing the truth values of the inner nodes.

**Usage Example:**

```python
# Example input
X_example = {
    "duration": 3,
    "wage increase first year": 4.0,
    "wage increase second year": 3.5,
    "wage increase third year": 3.0,
    "cost of living adjustment": "none",
    "working hours": 37.5,
    "pension": "empl_contr",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": True,
    "statutory holidays": 12,
    "vacation": "gnr",
    "longterm disability assistance": False,
    "contribution to dental plan": "full",
    "bereavement assistance": True,
    "contribution to health plan": "half"
}

# Make prediction
prediction, nodes = predict(X_example)
print("Prediction:", "Good" if prediction == 1 else "Bad")
print("Nodes:", nodes)
```

**Output:**

```
Prediction: Good
Nodes: [0, 0, 0]
```

**Notes:**

- **Thresholds and Categories:**
  - The thresholds (`<= 3.0`) and categories (`"none"`, `"ba"`, `"avg"`, `"gnr"`) are filled with meaningful values based on the feature descriptions and ranges provided.
- **Feature Values:**
  - Ensure that categorical features use the exact encoding:
    - `"vacation"` can be `"ba"`, `"avg"`, or `"gnr"`.
    - `"contribution to health plan"` can be `"none"`, `"half"`, or `"full"`.

---

Feel free to let me know if you have any questions or need further assistance!