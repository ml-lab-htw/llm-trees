


Certainly! Below is the decision tree formatted as a Python function named `predict`. This function uses the exact feature keys provided and returns a single prediction along with a list representing the truth values of the inner nodes. The entries in the list are `1` if the condition of the corresponding inner node is satisfied, and `0` otherwise.

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = 1 if X['contribution to health plan'] == 'full' else 0
    nodes[1] = 1 if X['wage increase first year'] <= 4.0 else 0
    nodes[2] = 1 if X['vacation'] == 'gnr' else 0

    if nodes[0]:
        prediction = 1  # Good outcome
    else:
        if nodes[1]:
            prediction = 0  # Bad outcome
        else:
            if nodes[2]:
                prediction = 1  # Good outcome
            else:
                prediction = 0  # Bad outcome
    return prediction, nodes
```

### Explanation:

**Feature Keys (Exact Spelling and Casing):**

- **'contribution to health plan'**: Employer's contribution towards the health plan (`'none'`, `'half'`, `'full'`).
- **'wage increase first year'**: Wage increase in the first year of the contract (`2.0` to `7.0`, percentage).
- **'vacation'**: Number of paid vacation days (`'ba'` for below average, `'avg'` for average, `'gnr'` for generous).

**Decision Logic:**

1. **Node 0**:
   - **Condition**: `X['contribution to health plan'] == 'full'`
   - **Explanation**: If the employer fully contributes to the health plan (`nodes[0] == 1`), the outcome is **good**.
2. **Node 1**:
   - **Condition**: `X['wage increase first year'] <= 4.0`
   - **Explanation**: If the employer does not fully contribute to the health plan (`nodes[0] == 0`), we check if the wage increase in the first year is less than or equal to 4%. If so (`nodes[1] == 1`), the outcome is **bad**.
3. **Node 2**:
   - **Condition**: `X['vacation'] == 'gnr'`
   - **Explanation**: If the wage increase is greater than 4% (`nodes[1] == 0`), we check if the number of paid vacation days is generous. If so (`nodes[2] == 1`), the outcome is **good**. Otherwise, it's **bad**.

### Usage Example:

```python
# Example input data
X = {
    'duration': 3,
    'wage increase first year': 5.0,
    'wage increase second year': 3.5,
    'wage increase third year': 4.0,
    'cost of living adjustment': 'none',
    'working hours': 37,
    'pension': 'empl_contr',
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': True,
    'statutory holidays': 12,
    'vacation': 'gnr',
    'longterm disability assistance': True,
    'contribution to dental plan': 'half',
    'bereavement assistance': True,
    'contribution to health plan': 'half'
}

prediction, nodes = predict(X)
print(f"Prediction: {'Good' if prediction == 1 else 'Bad'}")
print(f"Nodes: {nodes}")
```

**Sample Output:**

```
Prediction: Good
Nodes: [0, 0, 1]
```

### Notes:

- **Thresholds and Values**:
  - **'wage increase first year' <= 4.0**: The threshold of `4.0%` is chosen as a meaningful value to distinguish between low and high wage increases.
  - **'vacation' == 'gnr'**: Assumes `'gnr'` represents generous vacation days, which positively affect the outcome.

- **Inner Nodes List**:
  - The `nodes` list contains the truth values (`1` or `0`) corresponding to each inner node in the decision tree.
  - This allows for tracing the decision path that led to the prediction.

### Function Breakdown:

- **Input**: A dictionary `X` with keys exactly matching the provided feature names.
- **Process**:
  - Evaluates conditions based on the decision tree and populates the `nodes` list.
  - Uses nested `if` statements to traverse the tree and arrive at a prediction.
- **Output**:
  - `prediction`: An integer (`0` for **bad**, `1` for **good**).
  - `nodes`: A list of integers representing the truth values of the inner nodes.

### Conclusion:

This function implements the decision tree classifier based on the most significant features influencing the outcome of labor negotiations. By returning both the prediction and the inner node truth values, it allows for transparency in how the decision was made.

**Remember**: Ensure that when using this function, the input dictionary `X` must have the exact keys as specified, and the values should conform to the expected data types and encodings.

---

**Feature List (For Reference):**

- `'duration'`: Duration of agreement (`1` to `7` years).
- `'wage increase first year'`: Wage increase in the first year (`2.0%` to `7.0%`).
- `'wage increase second year'`: Wage increase in the second year (`2.0%` to `7.0%`).
- `'wage increase third year'`: Wage increase in the third year (`2.0%` to `7.0%`).
- `'cost of living adjustment'`: Cost of living allowance (`'none'`, `'tcf'`, `'tc'`).
- `'working hours'`: Number of working hours per week (`35` to `40` hours).
- `'pension'`: Employer contributions to pension plan (`'none'`, `'ret_allw'`, `'empl_contr'`).
- `'standby pay'`: Standby pay (`2` to `25`).
- `'shift differential'`: Supplement for work on second and third shift (`1` to `25`).
- `'education allowance'`: Education allowance (`True`, `False`).
- `'statutory holidays'`: Number of statutory holidays (`9` to `15`).
- `'vacation'`: Number of paid vacation days (`'ba'`, `'avg'`, `'gnr'`).
- `'longterm disability assistance'`: Employer's help during employee long-term disability (`True`, `False`).
- `'contribution to dental plan'`: Employer's contribution towards the dental plan (`'none'`, `'half'`, `'full'`).
- `'bereavement assistance'`: Employer's financial contribution towards bereavement costs (`True`, `False`).
- `'contribution to health plan'`: Employer's contribution towards the health plan (`'none'`, `'half'`, `'full'`).

**Target Variable:**

- `'target'`: Final settlements in labor negotiations (`0` = **bad**, `1` = **good**).