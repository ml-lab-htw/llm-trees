


Sure! Below is the decision tree formatted as a Python function that returns a single prediction (`0` for **Bad**, `1` for **Good**) and a list representing the truth values of the inner nodes. The entries of this list are `1` if the condition of the corresponding inner node is satisfied, and `0` otherwise.

```python
def predict(X: dict):
    nodes = [None] * 5
    nodes[0] = int(X["wage increase first year"] <= 3.5)
    nodes[1] = int(X["pension"] == 0)
    nodes[2] = int(X["duration"] <= 3)
    nodes[3] = int(X["vacation"] == "gnr")
    nodes[4] = int(X["contribution to health plan"] == "full")

    if nodes[0]:
        # Node 1: wage increase first year <= 3.5
        if nodes[1]:
            # Node 2: pension == 0
            prediction = 0  # Bad
        else:
            prediction = 0  # Bad
    else:
        # wage increase first year > 3.5
        if nodes[2]:
            # Node 3: duration <= 3
            prediction = 1  # Good
        else:
            # duration > 3
            if nodes[3]:
                # Node 4: vacation == "gnr"
                prediction = 1  # Good
            else:
                if nodes[4]:
                    # Node 5: contribution to health plan == "full"
                    prediction = 1  # Good
                else:
                    prediction = 0  # Bad

    return prediction, nodes
```

**Explanation:**

- **Node 0:** Checks if the **wage increase first year** is less than or equal to **3.5%**.
- **Node 1:** Checks if the **pension** is **"none"**.
- **Node 2:** Checks if the **duration** is less than or equal to **3 years**.
- **Node 3:** Checks if the **vacation** is **"gnr"** (generous).
- **Node 4:** Checks if the **contribution to health plan** is **"full"**.

**Usage Example:**

```python
# Sample input data
X_sample = {
    "duration": 4,
    "wage increase first year": 4.0,
    "wage increase second year": 3.5,
    "wage increase third year": 3.0,
    "cost of living adjustment": "none",
    "working hours": 37.5,
    "pension": "ret_allw",
    "standby pay": 10,
    "shift differential": 15,
    "education allowance": "true",
    "statutory holidays": 12,
    "vacation": "avg",
    "longterm disability assistance": "true",
    "contribution to dental plan": "half",
    "bereavement assistance": "true",
    "contribution to health plan": "full"
}

# Get prediction and node values
prediction, nodes = predict(X_sample)

print("Prediction:", "Good" if prediction == 1 else "Bad")
print("Nodes:", nodes)
```

**Output:**

```
Prediction: Good
Nodes: [0, 0, 0, 0, 1]
```

**Note on Feature Keys and Values:**

- The feature keys used in the function match exactly as provided.
- Categorical features like `"pension"`, `"vacation"`, and `"contribution to health plan"` expect specific string values as per the provided encoding.
  - For `"pension"`, possible values are: `"none"`, `"ret_allw"`, `"empl_contr"`.
  - For `"vacation"`, possible values are: `"ba"` (below average), `"avg"` (average), `"gnr"` (generous).
  - For `"contribution to health plan"`, possible values are: `"none"`, `"half"`, `"full"`.
  - Boolean features like `"education allowance"` and `"longterm disability assistance"` take `"true"` or `"false"`.

**Thresholds and Conditions:**

- **Threshold for wage increase first year:** `3.5%`.
- **Threshold for duration:** `3 years`.

**Interpretation of Nodes List:**

- Each position in the `nodes` list corresponds to a specific condition:
  - `nodes[0]`: `1` if wage increase first year ≤ 3.5%, else `0`.
  - `nodes[1]`: `1` if pension is `"none"`, else `0`.
  - `nodes[2]`: `1` if duration ≤ 3 years, else `0`.
  - `nodes[3]`: `1` if vacation is `"gnr"`, else `0`.
  - `nodes[4]`: `1` if contribution to health plan is `"full"`, else `0`.

**Example Interpretation:**

- For the provided sample input:
  - `nodes[0]`: `0` (wage increase first year is 4.0% > 3.5%)
  - `nodes[1]`: `0` (pension is `"ret_allw"` ≠ `"none"`)
  - `nodes[2]`: `0` (duration is 4 > 3)
  - `nodes[3]`: `0` (vacation is `"avg"` ≠ `"gnr"`)
  - `nodes[4]`: `1` (contribution to health plan is `"full"`)

- Based on the nodes and conditions, the prediction is **Good** (`1`).

---

**Ensure Input Data is Correctly Formatted:**

When using the `predict` function, make sure the input dictionary `X`:

- Contains all the required keys with exact spelling.
- Numerical features are provided as numbers (e.g., `float` or `int`).
- Categorical features are provided as strings matching the expected values.

**Example of Input Dictionary Format:**

```python
X = {
    "duration": 5,
    "wage increase first year": 2.5,
    "wage increase second year": 2.5,
    "wage increase third year": 2.5,
    "cost of living adjustment": "none",
    "working hours": 40,
    "pension": "none",
    "standby pay": 15,
    "shift differential": 10,
    "education allowance": "false",
    "statutory holidays": 10,
    "vacation": "ba",
    "longterm disability assistance": "false",
    "contribution to dental plan": "none",
    "bereavement assistance": "false",
    "contribution to health plan": "none"
}
```

**Final Notes:**

- This function replicates the decision tree logic using the most important features.
- It helps classify whether the outcome of the labor negotiations is **Good** (`1`) or **Bad** (`0`).
- The function can be integrated into a larger application or used for testing individual cases.
