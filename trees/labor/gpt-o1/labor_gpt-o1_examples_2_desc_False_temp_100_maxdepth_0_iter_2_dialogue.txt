


Certainly! Below is the Python function that implements the decision tree classifier based on the features you provided. The function returns a single prediction (`0` for **bad**, `1` for **good**) and a list representing the truth values of the inner nodes of the decision tree.

```python
def predict(X: dict):
    nodes = [None] * 3  # Initialize list to hold truth values of inner nodes

    # Node 0: wage increase in first year <= 3%
    nodes[0] = int(X['wage increase first year'] <= 3.0)

    # Node 1: cost of living adjustment == 'tc' (total compensation adjustment)
    nodes[1] = int(X['cost of living adjustment'] == 'tc')

    # Node 2: vacation == 'gnr' (generous)
    nodes[2] = int(X['vacation'] == 'gnr')

    # Decision logic
    if nodes[0]:  # wage increase first year <= 3%
        prediction = 0  # Outcome is bad
    else:
        if nodes[1]:  # cost of living adjustment is 'tc' (total compensation adjustment)
            prediction = 1  # Outcome is good
        else:
            if nodes[2]:  # vacation is 'gnr' (generous)
                prediction = 1  # Outcome is good
            else:
                prediction = 0  # Outcome is bad

    return prediction, nodes
```

**Explanation:**

- **Nodes List:**
  - `nodes[0]`: Checks if the wage increase in the first year is **less than or equal to 3%**.
  - `nodes[1]`: Checks if the cost of living adjustment is **'tc'** (total compensation adjustment).
  - `nodes[2]`: Checks if the number of paid vacation days is **'gnr'** (generous).

- **Decision Logic:**
  - If the wage increase in the first year is **3% or less** (`nodes[0] == 1`), the outcome is **bad** (`prediction = 0`).
  - Else, if the cost of living adjustment is **'tc'** (`nodes[1] == 1`), the outcome is **good** (`prediction = 1`).
  - Else, if the vacation is **'gnr'** (`nodes[2] == 1`), the outcome is **good** (`prediction = 1`).
  - Else, the outcome is **bad** (`prediction = 0`).

**Feature Encoding and Values:**

- **'wage increase first year':** Numerical value between **2.0** and **7.0**.
- **'cost of living adjustment':** Categorical value **'none'**, **'tcf'**, or **'tc'**.
  - **'tc'** stands for **'total compensation adjustment'**.
- **'vacation':** Categorical value **'ba'**, **'avg'**, or **'gnr'**.
  - **'gnr'** stands for **'generous'**.

**Example Usage:**

```python
# Example feature input
X_example = {
    'duration': 3,
    'wage increase first year': 4.5,
    'wage increase second year': 3.5,
    'wage increase third year': 3.0,
    'cost of living adjustment': 'none',
    'working hours': 37,
    'pension': 'ret_allw',
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': True,
    'statutory holidays': 12,
    'vacation': 'gnr',
    'longterm disability assistance': False,
    'contribution to dental plan': 'half',
    'bereavement assistance': True,
    'contribution to health plan': 'full'
}

# Get prediction and truth values of inner nodes
prediction, nodes = predict(X_example)

print(f"Prediction: {'good' if prediction == 1 else 'bad'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: good
Nodes: [0, 0, 1]
```

**Interpreting the Nodes List:**

- **Nodes[0] == 0:** The wage increase in the first year is **greater than 3%**.
- **Nodes[1] == 0:** The cost of living adjustment is **not 'tc'**.
- **Nodes[2] == 1:** The vacation is **'gnr'** (generous).

**Notes:**

- Make sure that the input dictionary `X` includes all the necessary keys with the exact spelling and appropriate values as specified.
- The function assumes that all the keys are present and values are correctly encoded. Missing keys or incorrect values may result in a `KeyError` or unexpected behavior.
- The prediction and nodes are based on the simplified decision tree provided and the most impactful features affecting the outcome of labor negotiations.

**Full Feature List for Reference:**

- `'duration'`: Duration of agreement [1 .. 7]
- `'wage increase first year'`: Wage increase in first year of contract [2.0 .. 7.0]
- `'wage increase second year'`: Wage increase in second year of contract [2.0 .. 7.0]
- `'wage increase third year'`: Wage increase in third year of contract [2.0 .. 7.0]
- `'cost of living adjustment'`: Cost of living adjustment ['none', 'tcf', 'tc']
- `'working hours'`: Number of working hours during week [35 .. 40]
- `'pension'`: Employer contributions to pension plan ['none', 'ret_allw', 'empl_contr']
- `'standby pay'`: Standby pay [2 .. 25]
- `'shift differential'`: Supplement for work on II and III shift [1 .. 25]
- `'education allowance'`: Education allowance [True, False]
- `'statutory holidays'`: Number of statutory holidays [9 .. 15]
- `'vacation'`: Number of paid vacation days ['ba', 'avg', 'gnr']
- `'longterm disability assistance'`: Employer's help during employee long-term disability [True, False]
- `'contribution to dental plan'`: Employer's contribution towards the dental plan ['none', 'half', 'full']
- `'bereavement assistance'`: Employer's financial contribution towards covering the costs of bereavement [True, False]
- `'contribution to health plan'`: Employer's contribution towards the health plan ['none', 'half', 'full']

**Target Variable:**

- `'Outcome'`: Final settlements in labor negotiations in Canadian industry [0 = bad, 1 = good]

Feel free to use this function and adjust the input dictionary `X` according to your data to predict the outcome of labor negotiations.