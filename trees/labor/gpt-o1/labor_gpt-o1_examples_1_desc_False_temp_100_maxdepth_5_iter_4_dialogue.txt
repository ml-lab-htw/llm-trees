


Here is the decision tree formatted as a Python function that returns a single prediction as well as a list representing the truth values of the inner nodes. The entries in the list are `1` if the condition of the corresponding inner node is satisfied and `0` otherwise.

```python
def predict(X: dict):
    nodes = [None] * 5
    
    # Inner Nodes Conditions
    nodes[0] = int(X['wage increase first year'] <= 3.5)
    nodes[1] = int(X['working hours'] > 38)
    nodes[2] = int(X['pension'] == 0)
    nodes[3] = int(X['cost of living adjustment'] == 0)
    nodes[4] = int(X['contribution to health plan'] == 0)
    
    # Decision Logic
    if nodes[0]:  # wage increase first year <= 3.5
        if nodes[1]:  # working hours > 38
            prediction = 0  # bad
        else:  # working hours ≤ 38
            if nodes[2]:  # pension == 0
                prediction = 0  # bad
            else:  # pension != 0
                prediction = 1  # good
    else:  # wage increase first year > 3.5
        if nodes[3]:  # cost of living adjustment == 0
            if nodes[4]:  # contribution to health plan == 0
                prediction = 0  # bad
            else:  # contribution to health plan != 0
                prediction = 1  # good
        else:  # cost of living adjustment != 0
            prediction = 1  # good

    return prediction, nodes
```

**Explanation:**

- **Nodes List:**
  - `nodes[0]`: Checks if **wage increase first year** is less than or equal to **3.5%**.
  - `nodes[1]`: Checks if **working hours** is greater than **38 hours** per week.
  - `nodes[2]`: Checks if **pension** is equal to `'none'`.
  - `nodes[3]`: Checks if **cost of living adjustment** is equal to `'none'`.
  - `nodes[4]`: Checks if **contribution to health plan** is equal to `'none'`.

- **Prediction Logic:**

  1. **Root Node (`nodes[0]`):**
     - If **wage increase first year ≤ 3.5%** (`nodes[0] == 1`), proceed to the left subtree.
     - Else (`nodes[0] == 0`), proceed to the right subtree.

  2. **Left Subtree (`nodes[0] == 1`):**
     - **Node 1 (`nodes[1]`):** Checks if **working hours > 38**.
       - If **yes** (`nodes[1] == 1`), prediction is **`0`** (*bad* outcome).
       - Else (`nodes[1] == 0`), proceed to Node 2.
     - **Node 2 (`nodes[2]`):** Checks if **pension == 0**.
       - If **yes** (`nodes[2] == 1`), prediction is **`0`** (*bad* outcome).
       - Else (`nodes[2] == 0`), prediction is **`1`** (*good* outcome).

  3. **Right Subtree (`nodes[0] == 0`):**
     - **Node 3 (`nodes[3]`):** Checks if **cost of living adjustment == 0**.
       - If **yes** (`nodes[3] == 1`), proceed to Node 4.
       - Else (`nodes[3] == 0`), prediction is **`1`** (*good* outcome).
     - **Node 4 (`nodes[4]`):** Checks if **contribution to health plan == 0**.
       - If **yes** (`nodes[4] == 1`), prediction is **`0`** (*bad* outcome).
       - Else (`nodes[4] == 0`), prediction is **`1`** (*good* outcome).

**Feature Keys and Spelling:**

- The feature names are used exactly as specified:
  - `'duration'`
  - `'wage increase first year'`
  - `'wage increase second year'`
  - `'wage increase third year'`
  - `'cost of living adjustment'`
  - `'working hours'`
  - `'pension'`
  - `'standby pay'`
  - `'shift differential'`
  - `'education allowance'`
  - `'statutory holidays'`
  - `'vacation'`
  - `'longterm disability assistance'`
  - `'contribution to dental plan'`
  - `'bereavement assistance'`
  - `'contribution to health plan'`

**Target Variable Encoding:**

- The target variable represents the final settlements in labor negotiations:
  - `0` indicates a **bad** outcome.
  - `1` indicates a **good** outcome.

**Thresholds and Feature Values:**

- **Numerical Features:**
  - **Wage Increase First Year (`wage increase first year`):**
    - Threshold at **3.5%**, which differentiates between lower and higher wage increases.
  - **Working Hours (`working hours`):**
    - Threshold at **38 hours**, representing standard versus extended working hours.
- **Categorical Features:**
  - **Pension (`pension`):**
    - Possible values: `'none'`, `'ret_allw'`, `'empl_contr'`.
  - **Cost of Living Adjustment (`cost of living adjustment`):**
    - Possible values: `'none'`, `'tcf'`, `'tc'`.
  - **Contribution to Health Plan (`contribution to health plan`):**
    - Possible values: `'none'`, `'half'`, `'full'`.

**Usage Example:**

Suppose we have the following feature values:

```python
X_sample = {
    'duration': 3,
    'wage increase first year': 4.0,
    'wage increase second year': 3.5,
    'wage increase third year': 3.0,
    'cost of living adjustment': 'none',
    'working hours': 37,
    'pension': 'empl_contr',
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': 'true',
    'statutory holidays': 12,
    'vacation': 'avg',
    'longterm disability assistance': 'true',
    'contribution to dental plan': 'half',
    'bereavement assistance': 'true',
    'contribution to health plan': 'full'
}
```

Calling the `predict` function:

```python
prediction, nodes = predict(X_sample)
print(f"Prediction: {'good' if prediction == 1 else 'bad'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: good
Nodes: [0, 0, 0, 1, 0]
```

**Interpretation:**

- `nodes[0] == 0`: Wage increase in the first year is **greater than 3.5%**.
- `nodes[3] == 1`: Cost of living adjustment is **'none'**.
- `nodes[4] == 0`: Contribution to health plan is **not 'none'** (it's 'full').

Based on the decision tree logic, the outcome is **good**.

**Notes:**

- Ensure that the input dictionary `X` contains all the required features with values matching the expected formats and encodings.
- The function can be integrated into a larger system for predicting labor negotiation outcomes based on contract features.
- The thresholds and values used in the decision tree are meaningful and derived from the data characteristics provided.
