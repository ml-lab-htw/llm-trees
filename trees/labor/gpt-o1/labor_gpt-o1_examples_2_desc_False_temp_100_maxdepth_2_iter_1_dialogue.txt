


Certainly! Based on the decision tree provided and the exact feature keys you've specified, here is the Python function that predicts whether the outcome of the labor negotiations is **good** (1) or **bad** (0). The function also returns a list representing the truth values of the inner nodes, where each entry is `1` if the condition of the corresponding inner node is satisfied, and `0` otherwise.

```python
def predict(X: dict):
    nodes = [0, 0]  # Initialize a list for inner node truth values

    # Node 0: Check if the contribution to health plan is "full"
    nodes[0] = int(X['contribution to health plan'] == 'full')

    if nodes[0]:
        # If Node 0 condition is satisfied
        prediction = 1  # Outcome is "good"
        nodes[1] = 0    # Node 1 is not evaluated in this path
    else:
        # Node 1: Check if wage increase in the first year is less than or equal to 4.0%
        nodes[1] = int(X['wage increase first year'] <= 4.0)
        if nodes[1]:
            prediction = 0  # Outcome is "bad"
        else:
            prediction = 1  # Outcome is "good"

    return prediction, nodes
```

**Explanation:**

- **Node 0:** Checks if the employer's **contribution to health plan** is `'full'`.
  - If **yes** (`nodes[0] = 1`), the prediction is **`1` (good)**.
  - If **no** (`nodes[0] = 0`), proceed to Node 1.
- **Node 1:** Checks if the **wage increase first year** is less than or equal to `4.0`.
  - If **yes** (`nodes[1] = 1`), the prediction is **`0` (bad)**.
  - If **no** (`nodes[1] = 0`), the prediction is **`1` (good)**.

**Usage Example:**

```python
# Example input
X_sample = {
    'duration': 3,
    'wage increase first year': 5.0,
    'wage increase second year': 3.5,
    'wage increase third year': 4.0,
    'cost of living adjustment': 'none',
    'working hours': 37,
    'pension': 'empl_contr',
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': 'false',
    'statutory holidays': 10,
    'vacation': 'avg',
    'longterm disability assistance': 'true',
    'contribution to dental plan': 'half',
    'bereavement assistance': 'true',
    'contribution to health plan': 'full'
}

# Making a prediction
prediction, nodes = predict(X_sample)
print("Prediction:", "Good" if prediction == 1 else "Bad")
print("Inner Nodes:", nodes)
```

**Sample Output:**

```
Prediction: Good
Inner Nodes: [1, 0]
```

**Note on Feature Encoding:**

- **'contribution to health plan':** Expected values are `'none'`, `'half'`, or `'full'`.
- **'wage increase first year':** Should be a numerical value between `2.0` and `7.0`.

**Function Parameters:**

- **X (dict):** A dictionary containing the feature values with keys exactly as specified in your list.

**Function Returns:**

- **prediction (int):** The predicted class label (`0` for **bad**, `1` for **good**).
- **nodes (list):** A list of integers representing the truth values of the inner nodes (`1` if the condition is satisfied, `0` otherwise).

Feel free to adjust the feature values in the example to test different scenarios.