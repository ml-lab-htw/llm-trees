


Certainly! Below is the Python function that represents the decision tree. This function takes a dictionary `X` containing the feature values with the exact keys as provided. It returns a prediction (`0` for "bad" and `1` for "good") and a list `nodes` representing the truth values of the inner nodes (1 if the condition is satisfied, 0 otherwise).

```python
def predict(X: dict):
    nodes = [None] * 4  # Initialize a list to hold truth values of inner nodes

    # Node 0
    nodes[0] = int(X['wage increase first year'] <= 4)

    if nodes[0]:
        # Node 1
        nodes[1] = int(X['cost of living adjustment'] == 'none')

        if nodes[1]:
            # Node 2
            nodes[2] = int(X['pension'] in ['none', 'empl_contr'])

            if nodes[2]:
                prediction = 0  # bad
            else:
                prediction = 1  # good
        else:
            # Cost of living adjustment is not 'none' (i.e., 'tcf' or 'tc')
            prediction = 1  # good
    else:
        # Node 3
        nodes[3] = int(X['contribution to health plan'] == 'full')

        if nodes[3]:
            prediction = 1  # good
        else:
            prediction = 0  # bad

    return prediction, nodes
```

**Explanation of the Function:**

- **Nodes List:**
  - `nodes[0]`: Checks if the wage increase in the first year is less than or equal to 4%.
  - `nodes[1]`: Checks if the cost of living adjustment is `'none'`.
  - `nodes[2]`: Checks if the pension plan is either `'none'` or `'empl_contr'` (employee contribution).
  - `nodes[3]`: Checks if the contribution to health plan is `'full'`.

- **Decision Logic:**
  - If the **wage increase in the first year** is less than or equal to 4% (`nodes[0]` is `1`):
    - If the **cost of living adjustment** is `'none'` (`nodes[1]` is `1`):
      - If the **pension** is `'none'` or `'empl_contr'` (`nodes[2]` is `1`):
        - **Prediction**: `0` (bad outcome)
      - Else:
        - **Prediction**: `1` (good outcome)
    - Else:
      - **Prediction**: `1` (good outcome)
  - Else:
    - If the **contribution to health plan** is `'full'` (`nodes[3]` is `1`):
      - **Prediction**: `1` (good outcome)
    - Else:
      - **Prediction**: `0` (bad outcome)

**Notes on Feature Values:**

- **Feature Keys and Expected Values:**

  | Feature Key                    | Expected Values                                                                                   |
  |-------------------------------|---------------------------------------------------------------------------------------------------|
  | `'wage increase first year'`   | Numerical value between `2.0` and `7.0` (representing percentage increase)                        |
  | `'cost of living adjustment'`  | `'none'`, `'tcf'`, `'tc'`                                                                         |
  | `'pension'`                    | `'none'`, `'ret_allw'`, `'empl_contr'`                                                            |
  | `'contribution to health plan'`| `'none'`, `'half'`, `'full'`                                                                      |

- **Value Mappings:**

  - **Cost of Living Adjustment:**
    - `'none'`: No cost of living adjustment.
    - `'tcf'`: Temporary cost of living adjustment formula.
    - `'tc'`: Total compensation adjustment.

  - **Pension:**
    - `'none'`: No employer contribution to pension plan.
    - `'ret_allw'`: Retirement allowance included.
    - `'empl_contr'`: Employee contribution.

  - **Contribution to Health Plan:**
    - `'none'`: No employer contribution.
    - `'half'`: Employer contributes half.
    - `'full'`: Employer contributes fully.

**Example Usage:**

```python
# Example input dictionary
X = {
    'duration': 3,
    'wage increase first year': 3.5,
    'wage increase second year': 3.0,
    'wage increase third year': 2.5,
    'cost of living adjustment': 'none',
    'working hours': 37.5,
    'pension': 'empl_contr',
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': True,
    'statutory holidays': 12,
    'vacation': 'avg',
    'longterm disability assistance': False,
    'contribution to dental plan': 'half',
    'bereavement assistance': True,
    'contribution to health plan': 'half'
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction} ({'good' if prediction == 1 else 'bad'})")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: 0 (bad)
Nodes: [1, 1, 1, None]
```

- **Interpretation:** The prediction is `0`, which means a "bad" outcome for the labor negotiation. The `nodes` list indicates which conditions were met:
  - `nodes[0] = 1`: Wage increase first year â‰¤ 4.
  - `nodes[1] = 1`: Cost of living adjustment is `'none'`.
  - `nodes[2] = 1`: Pension is `'none'` or `'empl_contr'`.
  - `nodes[3] = None`: Not evaluated because the previous condition directed the flow elsewhere.

**Important Note:**

- Ensure that all feature values provided to the `predict` function match the expected data types and categorical values.
- If a feature key is missing or a value does not match the expected format, the function may throw an error or produce incorrect results.

**Function Recap:**

- **Input:** Dictionary `X` containing feature values.
- **Output:** Tuple `(prediction, nodes)` where:
  - `prediction` is `0` (bad) or `1` (good).
  - `nodes` is a list of integers (`1` or `0`) representing the truth values of the inner nodes.

---

Feel free to use this function in your application. If you have any questions or need further clarification on how the decision tree works, please let me know!