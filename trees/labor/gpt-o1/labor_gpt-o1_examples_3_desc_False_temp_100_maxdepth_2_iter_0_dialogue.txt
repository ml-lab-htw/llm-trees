


Sure, here is the Python function formatted as per your specifications:

```python
def predict(X: dict):
    nodes = [None] * 2
    nodes[0] = X["wage increase first year"] <= 5.0
    if nodes[0]:
        nodes[1] = X["contribution to health plan"] == "full"
        if nodes[1]:
            prediction = 1  # Good
        else:
            prediction = 0  # Bad
    else:
        prediction = 1  # Good
    return prediction, nodes
```

**Explanation:**

- **Nodes List:** The `nodes` list contains the truth values of the inner nodes:
  - `nodes[0]`: Evaluates whether the "wage increase first year" is less than or equal to 5.0%.
  - `nodes[1]`: Evaluates whether the "contribution to health plan" is "full".

- **Feature Keys and Encodings:**
  - `"wage increase first year"`: Represents the wage increase in the first year of the contract, ranging from 2.0% to 7.0%.
  - `"contribution to health plan"`: Represents the employer's contribution towards the health plan, with possible values `"none"`, `"half"`, or `"full"`.

- **Predictions:**
  - If the wage increase in the first year is **less than or equal to 5.0%**:
    - If the employer's contribution to the health plan is **"full"**, the outcome is **Good** (1).
    - If not (i.e., contribution is `"none"` or `"half"`), the outcome is **Bad** (0).
  - If the wage increase in the first year is **greater than 5.0%**, the outcome is **Good** (1).

- **Target Variable Encoding:**
  - **0**: Bad outcome.
  - **1**: Good outcome.

**Example Usage:**

```python
# Example input data
X_example = {
    "duration": 3,
    "wage increase first year": 4.5,
    "wage increase second year": 3.0,
    "wage increase third year": 3.5,
    "cost of living adjustment": "none",
    "working hours": 37.5,
    "pension": "empl_contr",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": True,
    "statutory holidays": 11,
    "vacation": "avg",
    "longterm disability assistance": False,
    "contribution to dental plan": "half",
    "bereavement assistance": True,
    "contribution to health plan": "full"
}

# Make a prediction
prediction, nodes = predict(X_example)

print("Prediction:", "Good" if prediction == 1 else "Bad")
print("Nodes:", nodes)
```

**Output:**

```
Prediction: Good
Nodes: [True, True]
```

This function follows your instructions closely, using the exact feature keys and accounting for the specified encodings and ranges.