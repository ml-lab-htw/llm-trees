


Based on the provided feature specifications and target encoding, I'll create a decision function for the labor negotiations decision tree:

```python
def predict(X: dict):
    nodes = 6 * [None]
    
    # Core decision nodes with realistic thresholds
    nodes[0] = X["wage increase first year"] <= 4.0
    nodes[1] = X["duration"] <= 2.0
    nodes[2] = X["contribution to health plan"] == 0
    nodes[3] = X["pension"] == 0
    nodes[4] = X["working hours"] <= 37.5
    nodes[5] = X["vacation"] == 1  # ba = below average
    
    # Decision logic
    if nodes[0]:  # wage increase <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            if nodes[2]:  # health plan = none
                prediction = 0  # bad
            else:  # health plan = half or full
                prediction = 1  # good
    else:  # wage increase > 4.0
        if nodes[3]:  # pension = none
            prediction = 0  # bad
        else:  # pension included
            if nodes[4]:  # working hours <= 37.5
                prediction = 1  # good
            else:  # working hours > 37.5
                if nodes[5]:  # vacation = below average
                    prediction = 0  # bad
                else:  # vacation = average or generous
                    prediction = 1  # good
    
    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list of 6 boolean values representing the decisions at each node
3. Uses realistic thresholds based on the provided feature ranges
4. Returns both the final prediction (0 for bad, 1 for good) and the list of node decisions
5. Uses the exact feature names as provided
6. Considers the proper encoding of categorical variables

The thresholds and conditions are set to meaningful values within the specified ranges and categories for
