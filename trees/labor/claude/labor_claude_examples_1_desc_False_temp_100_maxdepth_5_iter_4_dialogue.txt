


I'll create a decision tree function based on the labor negotiations features, following the structure I provided earlier and using the exact feature keys and encodings you specified:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # Node conditions
    nodes[0] = X["wage increase first year"] <= 4.0
    nodes[1] = X["duration"] <= 2.0
    nodes[2] = X["pension"] == 0
    nodes[3] = X["contribution to health plan"] == 0
    nodes[4] = X["working hours"] > 37.5

    # Tree logic
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            if nodes[2]:  # pension == none
                prediction = 0  # bad
            else:  # pension == ret_allw or empl_contr
                prediction = 1  # good
    else:  # wage increase first year > 4.0
        if nodes[3]:  # health plan == none
            prediction = 0  # bad
        else:  # health plan == half or full
            if nodes[4]:  # working hours > 37.5
                if X["vacation"] == 1:  # below average vacation
                    prediction = 0  # bad
                else:  # average or generous vacation
                    prediction = 1  # good
            else:  # working hours <= 37.5
                prediction = 1  # good

    return prediction, nodes
```

This decision tree:
1. First checks if the first-year wage increase is <= 4.0%
2. Then considers the duration of the agreement (â‰¤ 2 years)
3. Evaluates pension plan provisions
4. Looks at health plan contributions
5. Considers working hours and vacation benefits

The function returns:
- A prediction (0 for bad outcome, 1 for good outcome)
- A list of boolean values representing the evaluation of each condition in the tree

The thresholds and conditions are
