


Based on your provided features and target encoding, I'll create a prediction function for the labor negotiations decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First node: wage increase first year <= 4.0
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second node depends on the first condition
    if nodes[0]:
        # If wage increase is low, check duration
        nodes[1] = X["duration"] <= 2.5
    else:
        # If wage increase is high, check health plan
        nodes[1] = X["contribution to health plan"] == 0
    
    # Make prediction based on the conditions
    if nodes[0]:  # wage increase <= 4.0
        if nodes[1]:  # duration <= 2.5
            prediction = 0  # bad
        else:  # duration > 2.5
            prediction = 1  # good
    else:  # wage increase > 4.0
        if nodes[1]:  # health plan = none
            prediction = 0  # bad
        else:  # health plan = half/full
            prediction = 1  # good
    
    return prediction, nodes
```

This decision tree function:
1. Takes a dictionary of features as input
2. Creates a list to store the boolean values of the two decision nodes
3. First checks if the wage increase in the first year is <= 4.0
4. Based on that result, either:
   - Checks if the duration is <= 2.5 years (if wage increase is low)
   - Checks if there's no health plan contribution (if wage increase is high)
5. Returns both the final prediction (0 for bad, 1 for good) and the list of node conditions

The thresholds (4.0 for wage increase and 2.5 for duration) are chosen based on reasonable values within the given ranges and typical labor negotiation patterns.
