


Based on the provided feature names, encoding, and ranges, I'll create a decision tree function that makes realistic predictions about labor negotiations and tracks the path through the tree:

```python
def predict(X: dict):
    nodes = 4 * [None]  # Initialize list to store node decisions
    
    # Decision nodes with realistic thresholds
    nodes[0] = X["wage increase first year"] <= 4.5  # First major split on wage increase
    nodes[1] = X["duration"] <= 2  # Short vs longer contracts
    nodes[2] = X["contribution to health plan"] == 0  # Health plan contribution
    nodes[3] = X["working hours"] >= 38  # Working hours threshold
    
    # Tree traversal logic
    if nodes[0]:  # Low wage increase
        if nodes[1]:  # Short duration
            prediction = 0  # Bad outcome
        else:  # Longer duration
            if nodes[2]:  # No health plan
                prediction = 0  # Bad outcome
            else:  # Has health plan
                prediction = 1  # Good outcome
    else:  # Higher wage increase
        if nodes[3]:  # Long working hours
            prediction = 0  # Bad outcome
        else:  # Reasonable working hours
            prediction = 1  # Good outcome
            
    return prediction, nodes
```

This decision tree focuses on key aspects of labor negotiations:
1. First-year wage increase (primary split at 4.5%)
2. Contract duration (threshold at 2 years)
3. Health plan contributions
4. Working hours (threshold at 38 hours)

The thresholds are chosen based on typical values in labor negotiations, and the logic follows common patterns where combinations of good wages, reasonable working hours, and good benefits lead to positive outcomes. The function returns both the prediction (0 for bad, 1 for good) and the list of boolean values representing the decisions at each node.
