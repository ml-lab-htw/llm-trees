


Based on the decision tree I created earlier and the provided feature specifications, here's the Python function that implements the decision tree classifier for labor negotiations:

```python
def predict(X: dict):
    nodes = 6 * [None]
    
    # Decision nodes
    nodes[0] = X["wage increase first year"] <= 4.0
    nodes[1] = X["pension"] == 0
    nodes[2] = X["contribution to health plan"] == 0
    nodes[3] = X["duration"] <= 2.0
    nodes[4] = X["working hours"] <= 37.5
    nodes[5] = X["vacation"] == 1
    
    # Tree traversal
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # pension = none
            prediction = 0  # bad
        else:  # pension = ret_allw or empl_contr
            if nodes[2]:  # health plan = none
                prediction = 0  # bad
            else:  # health plan = half or full
                prediction = 1  # good
    else:  # wage increase first year > 4.0
        if nodes[3]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            if nodes[4]:  # working hours <= 37.5
                prediction = 1  # good
            else:  # working hours > 37.5
                if nodes[5]:  # vacation = below average
                    prediction = 0  # bad
                else:  # vacation = average or generous
                    prediction = 1  # good
    
    return prediction, nodes
```

This implementation:
- Takes a dictionary of features as input
- Creates a list of 6 boolean values representing the conditions at each decision node
- Returns both the prediction (0 for bad outcome, 1 for good outcome) and the list of node conditions
- Uses the exact feature names as provided
- Uses the specified encodings for categorical variables
- Uses reasonable threshold values based on the provided feature ranges

The decision nodes test:
1.
