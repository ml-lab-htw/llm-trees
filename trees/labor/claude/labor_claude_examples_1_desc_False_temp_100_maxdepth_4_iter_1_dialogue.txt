


I'll create a Python function for the labor negotiations decision tree that follows the same structure. I'll use meaningful thresholds based on the provided feature ranges:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # First level: wage increase first year
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second level: duration
    nodes[1] = X["duration"] <= 2.0
    
    # Third level: contribution to health plan
    nodes[2] = X["contribution to health plan"] == 0
    
    # Fourth level: pension
    nodes[3] = X["pension"] == 0
    
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            if nodes[2]:  # health plan == none
                prediction = 0  # bad
            else:  # health plan != none
                prediction = 1  # good
    else:  # wage increase first year > 4.0
        if nodes[3]:  # pension == none
            prediction = 0  # bad
        else:  # pension != none
            if X["vacation"] == "gnr":  # generous vacation
                prediction = 1  # good
            else:  # not generous vacation
                prediction = 0  # bad
    
    return prediction, nodes
```

This decision tree function:
1. Takes a dictionary of features as input
2. Creates a list to store the boolean values of each node condition
3. Evaluates four key conditions:
   - Whether the first-year wage increase is <= 4.0%
   - Whether the agreement duration is <= 2 years
   - Whether there is no health plan contribution
   - Whether there is no pension plan
4. Returns both the prediction (0 for bad outcome, 1 for good outcome) and the list of node conditions

The thresholds and conditions are chosen based on the provided feature ranges and typical labor negotiation considerations:
- 4.0% for wage increase (middle of the
