


I'll create a Python function based on the decision tree I provided earlier, using the exact feature names and encodings you specified:

```python
def predict(X: dict):
    nodes = 6 * [None]
    
    # Decision nodes
    nodes[0] = X["wage increase first year"] <= 4.0
    nodes[1] = X["duration"] <= 2.0
    nodes[2] = X["contribution to health plan"] == 0
    nodes[3] = X["pension"] == 0
    nodes[4] = X["working hours"] <= 37.5
    nodes[5] = X["wage increase second year"] <= 3.0

    # Tree logic
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            if nodes[2]:  # health plan = none
                prediction = 0  # bad
            else:  # health plan = half/full
                prediction = 1  # good
    else:  # wage increase first year > 4.0
        if nodes[3]:  # pension = none
            prediction = 0  # bad
        else:  # pension included
            if nodes[4]:  # working hours <= 37.5
                prediction = 1  # good
            else:  # working hours > 37.5
                if nodes[5]:  # wage increase second year <= 3.0
                    prediction = 0  # bad
                else:  # wage increase second year > 3.0
                    prediction = 1  # good

    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list of 6 boolean values representing the conditions at each decision node
3. Uses the decision tree structure to make a prediction (0 = bad, 1 = good)
4. Returns both the prediction and the list of node conditions

The thresholds and conditions used are:
- First-year wage increase: 4.0%
- Agreement duration: 2 years
- Health plan contribution:
