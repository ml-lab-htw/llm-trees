


I'll create a Python function based on the decision tree I provided earlier, using the exact feature names and encodings you specified:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # First level: wage increase first year <= 4.0
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second level: duration <= 2.0
    nodes[1] = X["duration"] <= 2.0
    
    # Third level: pension status
    nodes[2] = X["pension"] == 0
    
    # Fourth level: combination of health plan and working hours
    nodes[3] = (X["contribution to health plan"] == 0 or
                (X["contribution to health plan"] != 0 and X["working hours"] > 37.5))

    # Decision logic
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad outcome
        else:  # duration > 2.0
            if nodes[2]:  # pension == none
                prediction = 0  # bad outcome
            else:  # pension includes contribution or allowance
                prediction = 1  # good outcome
    else:  # wage increase first year > 4.0
        if nodes[3]:  # health plan none or high working hours
            prediction = 0  # bad outcome
        else:  # good health plan and reasonable hours
            prediction = 1  # good outcome

    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list of 4 nodes to store the boolean conditions
3. Evaluates each condition and stores the result in the nodes list
4. Uses these conditions to determine the final prediction (0 for bad outcome, 1 for good outcome)
5. Returns both the prediction and the list of node conditions

The thresholds and conditions are set based on reasonable values for labor negotiations:
- First-year wage increase threshold of 4.0% (middle of the 2.0-7.0 range)
- Agreement duration threshold of
