


Based on the provided features and target variable, I'll create a prediction function for the labor negotiations decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First decision node: wage increase first year <= 4.0
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second decision node: contribution to health plan <= 'half'
    nodes[1] = X["contribution to health plan"] <= 1
    
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # contribution to health plan <= half
            prediction = 0  # bad
        else:  # contribution to health plan > half
            prediction = 1  # good
    else:  # wage increase first year > 4.0
        prediction = 1  # good
    
    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the feature values
2. Creates a list 'nodes' to store the boolean results of the decision nodes
3. Evaluates two conditions:
   - First node: whether the wage increase in first year is <= 4.0
   - Second node: whether the health plan contribution is <= 'half'
4. Returns both the final prediction (0 for bad, 1 for good) and the list of node results

The threshold of 4.0 for wage increase was chosen as it's approximately in the middle of the possible range (2.0 to 7.0), and the health plan contribution uses the natural ordering of none < half < full.
