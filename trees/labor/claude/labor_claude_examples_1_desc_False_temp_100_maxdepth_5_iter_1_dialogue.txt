


I'll create a decision tree function based on the labor negotiations features, following your format:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # Key decision nodes with meaningful thresholds
    nodes[0] = X["wage increase first year"] <= 4.0
    nodes[1] = X["duration"] <= 2.0
    nodes[2] = X["pension"] == 0
    nodes[3] = X["contribution to health plan"] == 0
    nodes[4] = X["working hours"] <= 37.5

    # Decision tree logic
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            if nodes[2]:  # pension == none
                prediction = 0  # bad
            else:  # pension has some contribution
                prediction = 1  # good
    else:  # wage increase first year > 4.0
        if nodes[3]:  # health plan == none
            prediction = 0  # bad
        else:  # health plan has contribution
            if nodes[4]:  # working hours <= 37.5
                prediction = 1  # good
            else:  # working hours > 37.5
                if X["wage increase second year"] <= 3.0:
                    prediction = 0  # bad
                else:
                    prediction = 1  # good

    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list of 5 nodes to track decision paths
3. Evaluates key conditions based on the most important features
4. Returns both the prediction (0 for bad outcome, 1 for good outcome) and the list of node conditions

The thresholds and conditions are set based on reasonable values within the given ranges:
- First-year wage increase threshold at 4.0 (middle of 2.0-7.0 range)
- Duration threshold at 2 years (short-term contracts)
- Working hours threshold at 37.5
