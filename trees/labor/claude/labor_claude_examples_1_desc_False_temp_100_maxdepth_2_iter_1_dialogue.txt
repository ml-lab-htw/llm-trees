


Based on the provided features and their descriptions, I'll create a decision function for the labor negotiations decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First node checks wage increase in first year (reasonable threshold at 4.0%)
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second node checks working hours if wages are low, or pension if wages are high
    if nodes[0]:
        nodes[1] = X["working hours"] <= 37.5
    else:
        nodes[1] = X["pension"] == 0
    
    # Make prediction based on the path
    if nodes[0]:  # wage increase <= 4.0
        if nodes[1]:  # working hours <= 37.5
            prediction = 0  # bad
        else:  # working hours > 37.5
            prediction = 1  # good
    else:  # wage increase > 4.0
        if nodes[1]:  # pension == none
            prediction = 0  # bad
        else:  # pension != none
            prediction = 1  # good
    
    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list to store the boolean values of the node conditions
3. Evaluates the conditions using realistic thresholds based on the feature descriptions
4. Returns both the prediction (0 for bad, 1 for good) and the list of node conditions
5. Uses the exact feature names as provided
6. Implements the same tree structure as previously described, with meaningful thresholds

The thresholds were chosen based on the provided ranges:
- 4.0% for wage increase (from possible range 2.0-7.0)
- 37.5 hours for working hours (from possible range 35-40)
- Pension check for "none" vs other options (from possible values: none, ret_allw, empl_contr)
