


Based on the features and their specifications, I'll create a decision tree function that follows your format and uses realistic thresholds:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # Key decision nodes with realistic thresholds
    nodes[0] = X["wage increase first year"] <= 4.0
    nodes[1] = X["duration"] <= 2.0
    nodes[2] = X["contribution to health plan"] == 0
    nodes[3] = X["pension"] == 0
    nodes[4] = X["working hours"] <= 37.5
    
    # Tree logic
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            if nodes[2]:  # health plan contribution is none
                prediction = 0  # bad
            else:
                prediction = 1  # good
    else:  # wage increase first year > 4.0
        if nodes[3]:  # pension is none
            prediction = 0  # bad
        else:
            if nodes[4]:  # working hours <= 37.5
                prediction = 1  # good
            else:
                if X["vacation"] == "gnr":
                    prediction = 1  # good
                else:
                    prediction = 0  # bad
    
    return prediction, nodes
```

This decision tree:
1. Uses the exact feature names provided
2. Follows the correct target encoding (0 = bad, 1 = good)
3. Uses realistic thresholds for numerical values
4. Correctly handles categorical variables using their specified encodings
5. Returns both the prediction (0 or 1) and the list of boolean values for each decision node
6. Maintains the same structure as the previously described tree but now formatted as a Python function

The thresholds and conditions are chosen based on reasonable values within the specified ranges and common industry standards for labor negotiations.
