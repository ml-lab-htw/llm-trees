


Based on the provided features and target variable, I'll create a prediction function for the labor negotiations decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First node: wage increase first year <= 4.0
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second node: contribution to health plan <= 1 
    # (encoding 'none'=0, 'half'=1, 'full'=2)
    nodes[1] = X["contribution to health plan"] <= 1
    
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # health plan contribution <= half
            prediction = 0  # bad
        else:  # health plan contribution > half (full)
            prediction = 1  # good
    else:  # wage increase first year > 4.0
        prediction = 1  # good
    
    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list to store the truth values of the two decision nodes
3. Evaluates whether the first-year wage increase is <= 4.0
4. For cases where the wage increase is <= 4.0, evaluates the health plan contribution
5. Returns both the final prediction (0 for bad, 1 for good) and the list of node truth values

The thresholds and logic are based on:
- A wage increase of 4.0% as a reasonable threshold for satisfaction
- The importance of health plan contributions, with full coverage being a positive factor
- The encoding of health plan contributions as an ordinal variable (none < half < full)
