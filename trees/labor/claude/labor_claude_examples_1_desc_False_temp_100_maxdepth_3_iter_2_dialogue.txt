


I'll create a decision tree function based on the labor negotiations features, following your format and using the exact feature names and encodings provided. Here's the implementation:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # First node: checking wage increase in first year
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second node: checking duration
    nodes[1] = X["duration"] <= 2.0
    
    # Third node: checking pension
    nodes[2] = X["pension"] == 0
    
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            prediction = 1  # good
    else:  # wage increase first year > 4.0
        if nodes[2]:  # pension == 0
            prediction = 0  # bad
        else:  # pension == "ret_allw" or "empl_contr"
            prediction = 1  # good
            
    return prediction, nodes
```

This implementation:
1. Takes a dictionary of features as input
2. Creates a list of 3 nodes to store the boolean conditions
3. Evaluates three key conditions:
   - Whether the first-year wage increase is ≤ 4.0
   - Whether the contract duration is ≤ 2.0 years
   - Whether there is no pension plan
4. Returns:
   - A prediction (0 for bad outcome, 1 for good outcome)
   - The list of boolean values for each node condition

The thresholds and conditions were chosen based on typical labor negotiation standards:
- 4.0% as a wage increase threshold represents a moderate increase
- 2-year duration as a threshold distinguishes short-term from longer-term agreements
- Pension benefits being a critical factor for good outcomes
