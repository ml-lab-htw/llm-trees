


Based on the provided feature names, their descriptions, and value ranges, I'll create a decision tree function that makes meaningful predictions about labor negotiation outcomes:

```python
def predict(X: dict):
    nodes = 6 * [None]
    
    # Primary split on first-year wage increase
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Left branch conditions
    nodes[1] = X["duration"] <= 2.0
    nodes[2] = X["contribution to health plan"] == 0
    nodes[3] = X["working hours"] <= 37.5
    
    # Right branch conditions
    nodes[4] = X["pension"] == 0
    nodes[5] = X["statutory holidays"] <= 11

    if nodes[0]:  # wage increase <= 4.0
        if nodes[1]:  # short duration
            prediction = 0  # bad
        else:  # longer duration
            if nodes[2]:  # no health plan
                prediction = 0  # bad
            else:  # has health plan
                if nodes[3]:  # reasonable hours
                    prediction = 1  # good
                else:  # long hours
                    prediction = 0  # bad
    else:  # wage increase > 4.0
        if nodes[4]:  # no pension
            prediction = 0  # bad
        else:  # has pension
            if nodes[5]:  # few holidays
                prediction = 0  # bad
            else:  # more holidays
                prediction = 1  # good

    return prediction, nodes
```

This decision tree:
1. First checks if the wage increase is sufficient (>4%)
2. Considers the duration of the agreement
3. Evaluates health plan contributions
4. Takes into account working hours
5. Checks pension benefits
6. Considers statutory holidays

The thresholds are set to reasonable values based on the provided ranges and typical labor negotiation standards. The function returns both the prediction (0 for bad, 1 for good) and a list of boolean values representing the decisions at each node.
