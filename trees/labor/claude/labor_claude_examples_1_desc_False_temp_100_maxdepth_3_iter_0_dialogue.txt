


I'll create a decision tree function based on the labor negotiations features, following your format and using the exact feature names provided:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # First decision node: wage increase first year <= 4.0
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second decision node: duration <= 2.0
    nodes[1] = X["duration"] <= 2.0
    
    # Third decision node: contribution to health plan
    nodes[2] = X["contribution to health plan"] == 0
    
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            prediction = 1  # good
    else:  # wage increase first year > 4.0
        if nodes[2]:  # health plan = none
            prediction = 0  # bad
        else:  # health plan = half or full
            prediction = 1  # good
            
    return prediction, nodes
```

This implementation:
1. Takes a dictionary of features as input
2. Creates a list of 3 nodes to store the boolean results of each condition
3. Evaluates three key conditions:
   - Whether the first-year wage increase is <= 4.0
   - Whether the contract duration is <= 2.0
   - Whether there is no health plan contribution
4. Returns both the prediction (0 for bad, 1 for good) and the list of node conditions

The thresholds and conditions are chosen based on typical labor negotiation benchmarks:
- 4.0% as a watershed for wage increases (considering inflation and typical wage growth)
- 2 years as a minimum desirable contract duration
- Health plan contribution as a critical benefit
