


Based on the provided features and target variable, I'll create a prediction function for the labor negotiations decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First decision node: wage increase in first year
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second decision node: contribution to health plan
    nodes[1] = X["contribution to health plan"] in [0, 1]
    
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # health plan contribution is none or half
            prediction = 0  # bad outcome
        else:  # health plan contribution is full
            prediction = 1  # good outcome
    else:  # wage increase first year > 4.0
        prediction = 1  # good outcome

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the feature values
2. Creates a list 'nodes' to store the boolean results of the decision nodes
3. Evaluates two conditions:
   - Whether the first-year wage increase is <= 4.0
   - Whether the health plan contribution is 'none' or 'half'
4. Returns:
   - A prediction (0 for bad outcome, 1 for good outcome)
   - The list of boolean values for each decision node

The thresholds and conditions are chosen based on reasonable values for labor negotiations:
- 4.0% as a threshold for first-year wage increase (middle of the 2.0-7.0 range)
- Health plan contributions categorized as insufficient (none/half) vs. sufficient (full)
