


Based on the provided features and target variable, I'll create a decision tree prediction function that classifies labor negotiations outcomes and returns both the prediction and the node conditions.

```python
def predict(X: dict):
    # Initialize nodes list
    nodes = 5 * [None]
    
    # Define decision nodes
    nodes[0] = X["wage increase first year"] <= 4.5
    nodes[1] = X["duration"] <= 2.5
    nodes[2] = X["pension"] == 0
    nodes[3] = X["contribution to health plan"] == 0
    nodes[4] = X["vacation"] == 1  # ba = below average

    # Decision tree logic
    if nodes[0]:  # wage increase first year <= 4.5
        if nodes[1]:  # duration <= 2.5
            prediction = 0  # bad
        else:  # duration > 2.5
            if nodes[2]:  # pension = none
                prediction = 0  # bad
            else:  # pension = ret_allw or empl_contr
                prediction = 1  # good
    else:  # wage increase first year > 4.5
        if nodes[3]:  # health plan = none
            prediction = 0  # bad
        else:  # health plan = half or full
            if nodes[4]:  # vacation = below average
                prediction = 0  # bad
            else:  # vacation = average or generous
                prediction = 1  # good

    return prediction, nodes
```

This decision tree function:
1. Takes a dictionary of features as input
2. Creates a list to store the boolean values of each decision node
3. Evaluates five key conditions:
   - First-year wage increase threshold of 4.5%
   - Agreement duration threshold of 2.5 years
   - Pension plan existence
   - Health plan contribution
   - Vacation days level
4. Returns both the prediction (0 for bad outcome, 1 for good outcome) and the list of node conditions

The thresholds and conditions are chosen based on typical labor negotiation standards and reasonable splitting points in the given ranges. The tree prioritizes monetary benefits
