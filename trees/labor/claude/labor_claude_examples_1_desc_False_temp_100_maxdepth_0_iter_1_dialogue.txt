


Based on the provided feature names, encodings, and value ranges, I'll create a decision tree prediction function that makes practical sense for labor negotiations:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Key decision points with realistic thresholds
    nodes[0] = X["wage increase first year"] <= 4.0
    nodes[1] = X["duration"] <= 2.0
    nodes[2] = X["contribution to health plan"] == 0
    nodes[3] = X["vacation"] == 1  # below average
    
    if nodes[0]:  # wage increase first year <= 4.0
        if nodes[1]:  # duration <= 2.0
            prediction = 0  # bad
        else:  # duration > 2.0
            if nodes[2]:  # health plan contribution is none
                prediction = 0  # bad
            else:  # health plan contribution is half or full
                prediction = 1  # good
    else:  # wage increase first year > 4.0
        if X["pension"] == 0:
            prediction = 0  # bad
        else:  # pension has some contribution
            if nodes[3]:  # vacation is below average
                prediction = 0  # bad
            else:  # vacation is average or generous
                prediction = 1  # good
    
    return prediction, nodes
```

This decision tree considers:
1. First-year wage increase (threshold at 4.0%)
2. Duration of agreement (threshold at 2 years)
3. Health plan contribution (none vs. some contribution)
4. Pension plan (none vs. some contribution)
5. Vacation benefits (below average vs. better)

The thresholds and conditions are set to realistic values based on the provided ranges and typical labor negotiation standards.
