


```python
def predict(X: dict):
  """
  Predicts the outcome of labor negotiations based on input features.

  This decision tree is limited to a maximum depth of 2 and uses placeholder 
  thresholds. 

  Args:
    X: A dictionary containing the input features. Keys should match the
       exact feature names provided in the prompt.

  Returns:
    A tuple containing:
      - prediction: The predicted outcome (0 = bad, 1 = good).
      - nodes: A list representing the truth values of inner nodes.
  """

  nodes = 3 * [None]
  nodes[0] = X['wage increase first year'] <= 4.5  # Placeholder threshold
  nodes[1] = X['cost of living adjustment'] == 'tc' # Placeholder rule
  nodes[2] = X['contribution to health plan'] == 'full' # Placeholder rule

  if nodes[0]:
    if nodes[1]:
      prediction = 1 
    else:
      prediction = 0
  else:
    if nodes[2]:
        prediction = 1
    else:
        prediction = 0

  return prediction, nodes

```

**Explanation:**

1. **Function Definition:**
   - `predict(X: dict)`: Defines a function named `predict` that takes a dictionary `X` as input, representing the feature values.

2. **Node Initialization:**
   - `nodes = 3 * [None]`:  Creates a list called `nodes` with a size of 3, initialized with `None`. This list will store the truth values (True/False) of the conditions at each inner node of the decision tree. Since we have a maximum depth of 2, there will be a maximum of 3 nodes (1 root + 2 children). 

3. **Decision Tree Logic:**
   - The `if` and `else` statements implement the decision tree logic:
     - `nodes[0] = X['wage increase first year'] <= 4.5`:  This is the condition checked at the root node. I've used a placeholder threshold of 4.5 for the 'wage increase first year'. You should replace this with a value based on your domain knowledge or after analyzing the data.
     - `nodes[1] = X['cost of living adjustment'] == 'tc'`: This condition checks if the 'cost of living adjustment' is 'tc'.
     - `nodes[2] = X['contribution to health plan'] == 'full'`: This condition checks if the 'contribution to health plan' is 'full'. 
     - The `prediction` is set to 0 or 1 based on the path taken through the tree.

4. **Return Values:**
   - `return prediction, nodes`: The function returns both the `prediction` (0 or 1) and the `nodes` list.

**Important Notes:**

* **Placeholders:**  The thresholds and rules used in this function are placeholders. You **must** replace them with meaningful values based on your data analysis or domain expertise to create an effective decision tree.
* **Feature Importance:** The choice of features and their order in the decision tree will significantly impact its performance.  You'll need to determine the most important features based on your data.
* **Data Preprocessing:**  Make sure your input data (`X`) is preprocessed appropriately. For example, categorical features like 'cost of living adjustment' and 'contribution to health plan' may need to be encoded numerically (e.g., using one-hot encoding) before being used with this function. 
