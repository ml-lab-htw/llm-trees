


```python
def predict(X: dict):
    """
    Predicts the outcome of labor negotiations based on input features.

    Args:
        X (dict): A dictionary of input features.

    Returns:
        tuple: A tuple containing the prediction (0 for bad, 1 for good) and a list of 
               truth values for the inner nodes.
    """
    nodes = 2 * [None]

    avg_wage_increase = (X['wage increase first year'] + X['wage increase second year'] + X['wage increase third year']) / 3
    nodes[0] = avg_wage_increase <= 4.5  # Threshold for average wage increase

    if nodes[0]:
        prediction = 0  # Bad outcome if average wage increase is low
    else:
        nodes[1] = X['contribution to health plan'] == 0  # Check health plan contribution
        if nodes[1]:
            prediction = 0  # Bad outcome if no health plan contribution despite decent wages
        else:
            prediction = 1  # Good outcome if decent wages and health plan contribution

    return prediction, nodes


# Example usage:
example_features = {
    'duration': 3,
    'wage increase first year': 3.0,
    'wage increase second year': 4.0,
    'wage increase third year': 3.5,
    'cost of living adjustment': 'none',
    'working hours': 38,
    'pension': 'none',
    'standby pay': 5,
    'shift differential': 10,
    'education allowance': False,
    'statutory holidays': 10,
    'vacation': 'avg',
    'longterm disability assistance': True,
    'contribution to dental plan': 'none',
    'bereavement assistance': False,
    'contribution to health plan': 'half'
}


prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")


example_features2 = {
    'duration': 3,
    'wage increase first year': 5.0,
    'wage increase second year': 6.0,
    'wage increase third year': 5.5,
    'cost of living adjustment': 'none',
    'working hours': 38,
    'pension': 'none',
    'standby pay': 5,
    'shift differential': 10,
    'education allowance': False,
    'statutory holidays': 10,
    'vacation': 'avg',
    'longterm disability assistance': True,
    'contribution to dental plan': 'none',
    'bereavement assistance': False,
    'contribution to health plan': 'none'
}


prediction, nodes = predict(example_features2)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")


```


Key improvements:

* **Clearer Thresholds:** I've added a reasonable threshold (4.5) for the average wage increase.
* **Correct Feature Names:** The code now uses the exact feature names you provided.
* **Pythonic Style:**  The code follows standard Python conventions.
* **Example Usage:** The included examples demonstrate how to use the function.
* **Docstring:** Added a docstring to explain the function's purpose and arguments.
* **Return Value:** Returns both the prediction and the list of node truth values as a tuple.



This improved version is ready to be integrated into a larger system and tested with real data. Remember that the chosen thresholds and features are just examples.  With real data, you would use a machine learning algorithm to determine the optimal tree structure.
