


Below is the Python function defining a decision tree with a maximum depth of 3 for the given labor negotiations dataset. This classifiers whether the outcome is "bad" (0) or "good" (1) while also returning the truth values of the inner nodes.

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Node 1 (root): First decision is based on 'duration'. Threshold is set to 3.
    nodes[0] = X["duration"] <= 3
    
    if nodes[0]:  # If 'duration' <= 3
        # Node 2: Second decision is based on 'wage increase first year'. Threshold is 4.0.
        nodes[1] = X["wage increase first year"] <= 4.0
        if nodes[1]:  # If 'wage increase first year' <= 4.0
            prediction = 0  # Class: bad
        else:  # If 'wage increase first year' > 4.0
            prediction = 1  # Class: good
    else:  # If 'duration' > 3
        # Node 3: Decision on 'contribution to health plan'. "none" vs anything else.
        nodes[2] = X["contribution to health plan"] == 0
        if nodes[2]:  # If 'contribution to health plan' == 0
            prediction = 0  # Class: bad
        else:  # If 'contribution to health plan' != 0
            prediction = 1  # Class: good
            
    return prediction, nodes
```

---

### Explanation of the Decision Tree:
1. **Node 1 (Root):**  
   - Decision made on `duration`. Contracts less than or equal to 3 years (`duration <= 3`) tend to lead to worse negotiation outcomes (bad) unless wage increases or other favorable terms are provided later.

2. **Node 2 (Left branch of Root):**  
   - If `duration <= 3`, check `wage increase first year`. If the increase is modest (`<= 4.0`), the outcome is classified as "bad" (0), and if it is higher, the negotiation is deemed as "good" (1).

3. **Node 3 (Right branch of Root):**  
   - If `duration > 3`, the focus shifts to the `contribution to health plan`. If the contribution is "none," it signals a bad (0) outcome. Any other value (e.g., "half" or "full") indicates a good (1) settlement.

---

### Example Usage:
Input dictionary:

```python
X = {
    "duration": 4,
    "wage increase first year": 5.0,
    "wage increase second year": 3.0,
    "wage increase third year": 3.5,
    "cost of living adjustment": "none",
    "working hours": 40,
    "pension": "empl_contr",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": True,
    "statutory holidays": 12,
    "vacation": "avg",
    "longterm disability assistance": True,
    "contribution to dental plan": "full",
    "bereavement assistance": True,
    "contribution to health plan": "none"
}
```

Prediction:

```python
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: Prediction: 0 (bad)
print("Nodes truth values:", nodes)  # Output: Nodes truth values: [False, None, True]
```

Explanation:
1. `duration = 4 -> False` (Node 1 test fails).
2. Since `duration > 3`, it checks `contribution to health plan = 0`. This is `True` (Node 3 test passes).
3. Outcome is classified as **bad (0)** based on Node 3.

--- 

This function closely mirrors the decision tree structure while returning both the predicted class and the binary truth values for the conditions at each node. Let me know if you have additional requirements!
