


Here is the Python function implementing a decision tree with a maximum depth of 1 based on the provided features. The function predicts whether the outcome of labor negotiations is **good (`1`)** or **bad (`0`)** based on the feature **`contribution to health plan`**.

```python
def predict(X: dict):
    """
    Predict whether the outcome of labor negotiations is 'good' or 'bad' 
    based on the contribution to the health plan.

    Args:
        X (dict): A dictionary of feature values. Example:
            {
                'duration': 3,
                'wage increase first year': 4.5,
                'wage increase second year': 4.8,
                'wage increase third year': 5.0,
                'cost of living adjustment': 'tc',
                'working hours': 37,
                'pension': 'ret_allw',
                'standby pay': 10,
                'shift differential': 5,
                'education allowance': True,
                'statutory holidays': 12,
                'vacation': 'avg',
                'longterm disability assistance': False,
                'contribution to dental plan': 'half',
                'bereavement assistance': True,
                'contribution to health plan': 'none'
            }

    Returns:
        tuple: A tuple containing:
            - prediction (int): 1 if 'good', 0 if 'bad'.
            - nodes (list): A list of truth values for the decision tree nodes.

    """
    
    # Initialize list for truth values of inner nodes
    nodes = 1 * [None]
    
    # Decision at node 0: contribution to health plan
    nodes[0] = X["contribution to health plan"] == 0
    
    # Root decision
    if nodes[0]:  # Employer's contribution to health plan is 'none'
        prediction = 0  # bad
    else:  # Employer's contribution to health plan is 'half' or 'full'
        prediction = 1  # good
    
    # Return the prediction and the truth values of the nodes
    return prediction, nodes
```

---

### Example Usage:

```python
# Example input 1 (bad negotiation outcome)
features_1 = {
    'duration': 3,
    'wage increase first year': 4.5,
    'wage increase second year': 4.8,
    'wage increase third year': 5.0,
    'cost of living adjustment': 'tc',
    'working hours': 37,
    'pension': 'ret_allw',
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': True,
    'statutory holidays': 12,
    'vacation': 'avg',
    'longterm disability assistance': False,
    'contribution to dental plan': 'half',
    'bereavement assistance': True,
    'contribution to health plan': 'none'
}

# Example input 2 (good negotiation outcome)
features_2 = {
    'duration': 5,
    'wage increase first year': 6.2,
    'wage increase second year': 5.8,
    'wage increase third year': 6.0,
    'cost of living adjustment': 'tcf',
    'working hours': 38,
    'pension': 'empl_contr',
    'standby pay': 15,
    'shift differential': 8,
    'education allowance': False,
    'statutory holidays': 14,
    'vacation': 'gnr',
    'longterm disability assistance': True,
    'contribution to dental plan': 'full',
    'bereavement assistance': False,
    'contribution to health plan': 'full'
}

# Make predictions
prediction_1, nodes_1 = predict(features_1)
prediction_2, nodes_2 = predict(features_2)

print("Prediction 1 (bad negotiation outcome):", prediction_1, ", Nodes:", nodes_1)
print("Prediction 2 (good negotiation outcome):", prediction_2, ", Nodes:", nodes_2)
```

---

### Explanation:

1. **Decision rule (depth 1):**
   - The decision depends on the feature "contribution to health plan."
   - If `"contribution to health plan" == 0`, the outcome of the labor negotiation is predicted to be `bad (0)`.
   - Otherwise (i.e., if `"contribution to health plan" == "half"` or `"full"`), the outcome is predicted to be `good (1)`.

2. **`nodes` list:** The `nodes` list contains the truth value of the inner node conditions in the decision tree. For this tree:
   - `nodes[0]` corresponds to the condition: `X["contribution to health plan"] == 0`.

3. **Output:** The function returns:
   - `prediction`: The predicted class (`0` = bad, `1` = good).
   - `nodes`: A list of truth values for the conditions in the decision tree.

---

### Example Outputs:
For `features_1`, the employer's contribution to health plan is `"none"`, so the prediction is:

```
Prediction 1 (bad negotiation outcome): 0 , Nodes: [True]
```

For `features_2`, the employer's contribution to health plan is `"full"`, so the prediction is:

```
Prediction 2 (good negotiation outcome): 1 , Nodes: [False]
```
