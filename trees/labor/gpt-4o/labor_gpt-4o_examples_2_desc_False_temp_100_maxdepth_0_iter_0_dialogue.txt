


Given the provided features, explanation, and structure of the decision tree, the following is a Python function that implements the decision tree for the labor negotiations problem. This function will return a single prediction (either 0 for "bad" or 1 for "good") and a list representing the truth values of the inner nodes.

Here's the implementation:

```python
def predict(X: dict):
    nodes = 5 * [None]
    # Inner nodes conditions
    nodes[0] = X["duration"] <= 4
    nodes[1] = X["pension"] == 'none' if nodes[0] else None
    nodes[2] = X["wage increase first year"] <= 3 if nodes[0] and not nodes[1] else None
    nodes[3] = X["cost of living adjustment"] == 'none' if not nodes[0] else None
    nodes[4] = X["vacation"] == 'ba' if not nodes[0] and not nodes[3] else None

    if nodes[0]:  # duration <= 4
        if nodes[1]:  # pension == 'none'
            prediction = 0
        else:  # pension != 'none'
            if nodes[2]:  # wage increase first year <= 3
                prediction = 0
            else:  # wage increase first year > 3
                prediction = 1
    else:  # duration > 4
        if nodes[3]:  # cost of living adjustment == 'none'
            prediction = 0
        else:  # cost of living adjustment != 'none'
            if nodes[4]:  # vacation == 'ba'
                prediction = 0
            else:  # vacation != 'ba'
                prediction = 1

    return prediction, nodes

# Example usage:
example_input = {
    'duration': 5,
    'wage increase first year': 3.5,
    'wage increase second year': 4.0,
    'wage increase third year': 4.5,
    'cost of living adjustment': 'tc',
    'working hours': 38,
    'pension': 'empl_contr',
    'standby pay': 10,
    'shift differential': 15,
    'education allowance': True,
    'statutory holidays': 12,
    'vacation': 'gnr',
    'longterm disability assistance': True,
    'contribution to dental plan': 'full',
    'bereavement assistance': True,
    'contribution to health plan': 'full'
}

prediction, nodes = predict(example_input)
print(f"Prediction: {'good' if prediction == 1 else 'bad'}")
print(f"Nodes: {nodes}")
```

In this example, the function `predict` will classify the outcome of the labor negotiations based on the input features. The `nodes` list captures the truth values at each decision point in the tree, indicating which conditions were satisfied during the classification process.

The function will return:
- The prediction (`0` for bad, `1` for good)
- The truth values for the inner nodes in the decision tree

The example usage demonstrates how to call the function with a sample input dictionary and print the prediction as well as the inner node values. Adjust the feature values in the `example_input` dictionary to test different scenarios.