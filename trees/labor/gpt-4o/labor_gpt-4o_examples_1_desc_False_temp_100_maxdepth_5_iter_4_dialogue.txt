


Here’s the Python function implementing the decision tree for predicting whether the outcome of labor negotiations is good (`1`) or bad (`0`). The function evaluates each feature according to the decision tree logic and returns both the prediction and the truth values of the inner nodes.

```python
def predict(X: dict):
    """
    Predict whether the outcome of labor negotiations is good (1) or bad (0)
    based on the input features X. Also return a list of truth values for the 
    inner nodes of the decision tree.

    Parameters:
        X (dict): A dictionary of input features. The keys must match the feature names exactly.

    Returns:
        tuple: (prediction, list of truth values for the inner nodes)
    """
    nodes = 5 * [None]  # Initialize a list to store the truth values of the inner nodes.

    # Define the conditions of the decision tree.
    nodes[0] = X["wage increase first year"] <= 3.5
    nodes[1] = X["contribution to health plan"] == 0
    nodes[2] = X["vacation"] == 1  # 'ba' stands for "below average."
    nodes[3] = X["standby pay"] <= 10
    nodes[4] = X["statutory holidays"] <= 10

    # Navigate the decision tree.
    if nodes[0]:  # If 'wage increase first year' <= 3.5
        if nodes[1]:  # If 'contribution to health plan' == 0
            prediction = 0  # bad
        else:  # 'contribution to health plan' != 0
            if nodes[2]:  # If 'vacation' == 1
                prediction = 0  # bad
            else:  # 'vacation' != 1
                prediction = 1  # good
    else:  # 'wage increase first year' > 3.5
        if X["duration"] <= 4:
            if nodes[3]:  # If 'standby pay' <= 10
                prediction = 0  # bad
            else:  # 'standby pay' > 10
                prediction = 1  # good
        else:  # 'duration' > 4
            if nodes[4]:  # If 'statutory holidays' <= 10
                prediction = 0  # bad
            else:  # 'statutory holidays' > 10
                prediction = 1  # good

    return prediction, nodes
```

---

### Example Usage:

Here’s how you can use the function:

```python
# Input sample features
features = {
    "duration": 5,
    "wage increase first year": 4.0,
    "wage increase second year": 3.0,
    "wage increase third year": 3.5,
    "cost of living adjustment": "tc",
    "working hours": 37,
    "pension": "empl_contr",
    "standby pay": 12,
    "shift differential": 10,
    "education allowance": True,
    "statutory holidays": 12,
    "vacation": "avg",
    "longterm disability assistance": True,
    "contribution to dental plan": "half",
    "bereavement assistance": True,
    "contribution to health plan": "half"
}

# Run the prediction
prediction, nodes = predict(features)

# Output the results
print("Prediction (0=bad, 1=good):", prediction)
print("Truth values of inner nodes:", nodes)
```

---

### Expected Output for Example:

If `features` contains the input specified above, the function will evaluate decisions based on feature thresholds and return:

```
Prediction (0=bad, 1=good): 1
Truth values of inner nodes: [False, False, False, False, False]
```

---

### Key Points to Note:

1. The list `nodes` reflects whether the conditions for each node in the tree were satisfied (`True` or `False`).
2. The conditions directly correspond to the decision tree described earlier, measuring thresholds or categorical equality for the features.
3. Ensure the input dictionary `X` strictly follows the feature names outlined in the problem statement.

This implementational format makes it easy to interpret the decision-making process and trace how the final prediction was reached.
