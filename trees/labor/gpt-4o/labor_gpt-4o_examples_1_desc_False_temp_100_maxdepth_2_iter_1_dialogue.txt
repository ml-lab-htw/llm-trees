


Here is the Python function implementing the decision tree based on the provided feature names and domain knowledge about labor negotiations:

```python
def predict(X: dict):
    # Initialize a list to store the truth values of inner nodes
    nodes = 2 * [None]
    
    # Node 0: Wage increase in the first year of contract
    nodes[0] = X["wage increase first year"] > 4.0
    
    # Node 1: Number of paid vacation days (if wage increase in first year > 4.0)
    if nodes[0]:
        nodes[1] = X["vacation"] != 1  # ba = below average
        
        # Final prediction based on vacation days
        if nodes[1]:
            prediction = 1  # good outcome
        else:
            prediction = 0  # bad outcome
            
    # Node 1: Employer's contribution to health plan (if wage increase in first year <= 4.0)
    else:
        nodes[1] = X["contribution to health plan"] != 0
        
        # Final prediction based on health plan contribution
        if nodes[1]:
            prediction = 0  # bad outcome
        else:
            prediction = 0  # bad outcome
    
    return prediction, nodes
```

### Explanation of Nodes:
1. **Node 0**: The first split checks whether the wage increase in the first year of the contract is greater than 4.0%. This threshold was chosen because a wage increase greater than 4.0% is likely to be considered favorable by employees.
   
2. **Node 1** (if wage increase is greater than 4.0%): If the wage increase is greater than 4.0%, the decision depends on the number of paid vacation days. If vacation days are not below average (`"ba"`), the outcome is classified as good (`1`). Otherwise, the outcome is bad (`0`).

3. **Node 1** (if wage increase is less than or equal to 4.0%): If the wage increase is less than or equal to 4.0%, the decision depends on whether the employer contributes to the health plan. If there is no contribution to the health plan (`"none"`), the outcome is bad (`0`). If there is some contribution (`"half"` or `"full"`), the outcome is still bad (`0`), as wage increases are not sufficient to compensate.

### Example Usage:
```python
X = {
    "wage increase first year": 5.0,
    "vacation": "avg",
    "contribution to health plan": "full"
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

In this example, the prediction would be `1` (good outcome), and the nodes would be `[True, True]`, indicating that both conditions (wage increase > 4.0% and vacation not below average) were satisfied.
