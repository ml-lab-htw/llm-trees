


```python
def predict(X: dict):
    nodes = 2 * [None]

    # First split on 'wage increase first year'
    nodes[0] = X['wage increase first year'] <= 4.5

    # Second split on 'contribution to health plan' if the first condition is True
    if nodes[0]:
        nodes[1] = X['contribution to health plan'] == 0
        if nodes[1]:
            prediction = 0  # 'bad'
        else:
            prediction = 1  # 'good'
    else:
        # If the first condition is False, directly predict 'good'
        prediction = 1  # 'good'

    return prediction, nodes
```

### Explanation:
- This function takes a dictionary `X` where each key corresponds to a feature, and the values represent the specific values for those features.
- The first condition checks whether the **'wage increase first year'** is less than or equal to 4.5. If it is, the tree moves to the second condition.
- The second condition checks whether the **'contribution to health plan'** is 'none'. If it is, the contract is classified as **'bad'** (0). Otherwise, if the employer contributes to the health plan (either 'half' or 'full'), the contract is classified as **'good'** (1).
- If the wage increase in the first year is greater than 4.5, the tree directly classifies the outcome as **'good'** (1).

The function returns two things:
1. The **prediction** (either 0 for 'bad' or 1 for 'good').
2. A **list of boolean values (`nodes`)** representing whether the conditions of the decision nodes were met (1 for True, 0 for False).
