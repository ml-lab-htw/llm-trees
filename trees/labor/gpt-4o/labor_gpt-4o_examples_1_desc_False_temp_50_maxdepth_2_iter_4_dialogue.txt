


Here is the Python function for the decision tree classifier based on the provided features and requirements:

```python
def predict(X: dict):
    """
    Predict the outcome of labor negotiations (good or bad) based on the provided features.

    Parameters:
    X (dict): A dictionary containing the input features. Keys must match the exact feature names.

    Returns:
    tuple: A tuple containing:
        - prediction (int): 0 for bad, 1 for good.
        - nodes (list): A list of truth values (1 for True, 0 for False) for the inner nodes.
    """
    nodes = 2 * [None]
    
    # Node 0: Wage increase in the first year of contract
    nodes[0] = X["wage increase first year"] <= 4.5
    
    # Node 1: Employer's contribution towards the health plan
    if nodes[0]:  # Wage increase first year <= 4.5
        nodes[1] = X["contribution to health plan"] == 0
        if nodes[1]:  # Health plan contribution is none
            prediction = 0  # Bad outcome
        else:  # Health plan contribution is not none
            prediction = 1  # Good outcome
    else:  # Wage increase first year > 4.5
        nodes[1] = X["duration"] <= 4
        if nodes[1]:  # Duration <= 4
            prediction = 0  # Bad outcome
        else:  # Duration > 4
            prediction = 1  # Good outcome

    # Convert truth values to integers (1 for True, 0 for False)
    nodes = [int(node) for node in nodes]
    
    return prediction, nodes
```

### Explanation of the Function:
1. **Inputs**:
   - `X`: A dictionary where the keys are the feature names (as provided in the prompt) and the values are the feature values for a single instance.

2. **Nodes**:
   - `nodes[0]`: Checks if the "wage increase first year" is less than or equal to 4.5.
   - `nodes[1]`: Depending on the value of `nodes[0]`, checks either:
     - If "contribution to health plan" is "none" (when `nodes[0]` is True).
     - If "duration" is less than or equal to 4 (when `nodes[0]` is False).

3. **Prediction**:
   - If both conditions in the left subtree are satisfied (`wage increase first year <= 4.5` and `contribution to health plan == none`), the prediction is `0` (bad).
   - If the first condition is satisfied but the second is not, the prediction is `1` (good).
   - If the first condition is not satisfied, the prediction depends on the "duration" feature.

4. **Output**:
   - The function returns a tuple:
     - `prediction`: The predicted class (0 for bad, 1 for good).
     - `nodes`: A list of truth values (1 for True, 0 for False) for the inner nodes.

### Example Usage:
```python
# Example feature dictionary
X = {
    "duration": 5,
    "wage increase first year": 4.0,
    "wage increase second year": 3.0,
    "wage increase third year": 3.5,
    "cost of living adjustment": "none",
    "working hours": 37,
    "pension": "ret_allw",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": True,
    "statutory holidays": 12,
    "vacation": "avg",
    "longterm disability assistance": True,
    "contribution to dental plan": "half",
    "bereavement assistance": True,
    "contribution to health plan": "none"
}

# Make a prediction
prediction, nodes = predict(X)
print("Prediction:", "Good" if prediction == 1 else "Bad")
print("Node Truth Values:", nodes)
```

### Example Output:
For the above input:
```
Prediction: Bad
Node Truth Values: [1, 1]
```

This output indicates that both conditions in the left subtree were satisfied, leading to a "Bad" prediction.
