


Here is the Python function implementation for the depth-3 decision tree that predicts whether the outcome of labor negotiations is "good (1)" or "bad (0)." It also provides a list of boolean truth values representing the satisfaction of the inner node conditions:

```python
def predict(X: dict):
    """
    Predict the outcome of labor negotiations (good or bad) based on given features.
    
    Args:
        X (dict): A dictionary where keys are feature names and values are their corresponding values.
                  Expected keys: ['duration', 'wage increase first year', 'wage increase second year',
                                  'wage increase third year', 'cost of living adjustment',
                                  'working hours', 'pension', 'standby pay', 'shift differential',
                                  'education allowance', 'statutory holidays', 'vacation',
                                  'longterm disability assistance', 'contribution to dental plan',
                                  'bereavement assistance', 'contribution to health plan']
    Returns:
        prediction (int): 1 for good outcome, 0 for bad outcome.
        nodes (list): List of truth values (1 or 0) representing whether each condition was satisfied.
    """
    # Initialize list to store conditions
    nodes = 3 * [None]
    
    # Inner node conditions
    nodes[0] = X["duration"] <= 3  # First condition, root node
    nodes[1] = X["wage increase first year"] <= 4  # Second condition
    nodes[2] = X["contribution to health plan"] == 0  # Third condition
    
    # Decision tree logic
    if nodes[0]:  # If duration <= 3
        if nodes[1]:  # If wage increase in first year <= 4
            prediction = 0  # Bad outcome
        else:  # Wage increase in first year > 4
            prediction = 1  # Good outcome
    else:  # Duration > 3
        if nodes[2]:  # If contribution to health plan is 'none'
            prediction = 0  # Bad outcome
        else:  # Contribution to health plan is not 'none' (either 'half' or 'full')
            prediction = 1  # Good outcome
    
    return prediction, nodes
```

---

**Explanation of the function:**

- The function takes a dictionary `X` as input, where the keys are feature names (e.g., `'duration'`, `'wage increase first year'`) and their corresponding values represent feature values for that instance.

- The `nodes` list keeps track of whether the inner node conditions in the decision tree are satisfied (1 if true, 0 otherwise).

- **Root node (nodes[0]):** Checks if the `duration` of the agreement is ≤ 3 years (short-term agreements often signal unfavorable terms).

- **Second node (nodes[1], left subtree):** For short agreements (`duration <= 3`), checks if the `wage increase first year` is ≤ 4 (higher wage increases indicate a better outcome).

- **Third node (nodes[2], right subtree of root):** For longer agreements (`duration > 3`), checks if the `contribution to health plan` is `'none'` (lack of health plan contributions signals a bad outcome).

---

**Example Usage:**

```python
# Example 1
features = {
    "duration": 2,
    "wage increase first year": 3.5,
    "wage increase second year": 4.0,
    "wage increase third year": 5.0,
    "cost of living adjustment": "none",
    "working hours": 38,
    "pension": "none",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": False,
    "statutory holidays": 10,
    "vacation": "avg",
    "longterm disability assistance": False,
    "contribution to dental plan": "none",
    "bereavement assistance": False,
    "contribution to health plan": "none"
}

prediction, nodes = predict(features)
print(f"Prediction: {prediction} (1 = good, 0 = bad)")
print(f"Inner nodes: {nodes}")
```

**Output:**
```
Prediction: 0 (1 = good, 0 = bad)
Inner nodes: [1, 1, None]
```

---

**Example Walkthrough:**

1. `nodes[0] = (duration <= 3)` ⇒ `True` (1), because "duration" is 2.
2. `nodes[1] = (wage increase first year <= 4)` ⇒ `True` (1), because "wage increase first year" is 3.5.
3. Since `nodes[0]` is `True` and `nodes[1]` is `True`, the prediction is `0` (bad outcome).

---

Let me know if you have further modifications or questions!
