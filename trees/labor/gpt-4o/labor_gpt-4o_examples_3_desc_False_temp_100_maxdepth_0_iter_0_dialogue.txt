


Given the detailed feature descriptions and the target variable information, I'll create a Python function to classify the outcome of labor negotiations as either "good" (1) or "bad" (0) using a decision tree model. The function will follow the decision tree structure developed earlier:

```python
def predict(X: dict):
    nodes = [None] * 6
    nodes[0] = X["duration"] <= 3
    nodes[1] = X["wage increase first year"] <= 3.0
    nodes[2] = X["cost of living adjustment"] == "none"
    nodes[3] = X["pension"] == "none"
    nodes[4] = X["vacation"] == "ba"
    nodes[5] = X["contribution to dental plan"] == "none"

    if nodes[0]:
        # duration <= 3 years
        if nodes[1]:
            # wage increase first year <= 3.0
            prediction = 0
        else:
            # wage increase first year > 3.0
            prediction = 1
    else:
        # duration > 3 years
        if nodes[2]:
            # cost of living adjustment == "none"
            prediction = 0
        else:
            # cost of living adjustment != "none"
            if nodes[3]:
                # pension == "none"
                if nodes[4]:
                    # vacation == "ba"
                    prediction = 0
                else:
                    # vacation != "ba"
                    prediction = 1
            else:
                # pension != "none"
                if nodes[5]:
                    # contribution to dental plan == "none"
                    prediction = 0
                else:
                    # contribution to dental plan != "none"
                    prediction = 1
    return prediction, nodes

# Example usage with feature values
example_features = {
    'duration': 4,
    'wage increase first year': 3.5,
    'wage increase second year': 3.0,
    'wage increase third year': 3.0,
    'cost of living adjustment': "tcf",
    'working hours': 37,
    'pension': "empl_contr",
    'standby pay': 10,
    'shift differential': 5,
    'education allowance': False,
    'statutory holidays': 10,
    'vacation': "avg",
    'longterm disability assistance': True,
    'contribution to dental plan': "full",
    'bereavement assistance': True,
    'contribution to health plan': "full"
}

prediction, nodes = predict(example_features)
print(f"Prediction: {'good' if prediction == 1 else 'bad'}")
print(f"Nodes: {nodes}")
```

In this function:

- `nodes` list stores the truth values of the inner nodes as requested.
- Each node corresponds to a decision in the decision tree structure.
- The `predict` function returns the final prediction along with the truth values of the nodes.

You can use the function with a dictionary of feature values to get a prediction and see how each decision node was evaluated. This example shows how to use the function and interpret the output.