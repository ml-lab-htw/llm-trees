


Sure, let's build a function in Python that returns a single prediction and a list representing the truth values of the inner nodes based on the decision tree for labor negotiation outcomes.

Hereâ€™s the function based on the decision tree we constructed earlier:

```python
def predict(X: dict):
    # Initialize a list to store the truth values of the nodes
    nodes = 2 * [None]

    # Node conditions based on the decision tree
    nodes[0] = X["wage increase first year"] > 4.0
    nodes[1] = X["vacation"] != 'ba'
    
    # Decision tree logic
    if nodes[0]:  # If wage increase in first year > 4.0
        if nodes[1]:  # If number of paid vacation days is not below average
            prediction = 1  # good outcome
        else:  # If number of paid vacation days is below average
            prediction = 0  # bad outcome
    else:  # If wage increase in first year <= 4.0
        prediction = 0  # bad outcome

    return prediction, nodes

# Example usage
input_features = {
    'duration': 7,
    'wage increase first year': 5,
    'wage increase second year': 5,
    'wage increase third year': 4,
    'cost of living adjustment': 'tcf',
    'working hours': 35,
    'pension': 'ret_allw',
    'standby pay': 10,
    'shift differential': 2,
    'education allowance': True,
    'statutory holidays': 15,
    'vacation': 'avg',
    'longterm disability assistance': True,
    'contribution to dental plan': 'half',
    'bereavement assistance': True,
    'contribution to health plan': 'half'
}

prediction, nodes = predict(input_features)
print("Prediction:", prediction)
print("Nodes:", nodes)
```

Here's what this code does:
- Defines a function `predict` that takes a dictionary of features as input.
- Sets up the conditions for the decision tree nodes and initializes a list `nodes` to store the truth values of these nodes.
- Fills the list `nodes` based on whether each condition holds true or not.
- Uses these conditions to determine the final prediction about whether the negotiation outcome is good (`1`) or bad (`0`).
- Returns the prediction and the list of nodes.

Remember to update the input dictionary (`input_features`) with real data when you use this function.