


Given the input features and guidelines, here's the Python function formatted to predict the target variable (0 for "bad" and 1 for "good") based on the decision tree created earlier:

### Python Function:
```python
def predict(X: dict):
    """
    Predict whether the labor negotiation outcome is "good" or "bad" using a decision tree with a maximum depth of 3.
    
    Parameters:
        X (dict): A dictionary with keys corresponding to feature names and their respective values.
    
    Returns:
        prediction (int): 0 for "bad", 1 for "good".
        nodes (list): A list of truth values (1 if the condition is satisfied, 0 otherwise) for each inner node.
    """
    # Initialize nodes list with 3 decision points
    nodes = 3 * [None]
    
    # Decision Split 1: Wage increase in first year of contract
    nodes[0] = X["wage increase first year"] <= 3.5
    
    # Decision Split 2: Employer's contribution towards the health plan
    if nodes[0]:
        nodes[1] = X["contribution to health plan"] == 0
    else:  # Decision Split 3: Number of paid vacation days
        nodes[1] = X["vacation"] == 1
    
    # Final Split to determine prediction
    if nodes[0]:
        if nodes[1]:
            prediction = 0  # "bad"
        else:
            prediction = 1  # "good"
    else:
        if nodes[1]:
            prediction = 0  # "bad"
        else:
            prediction = 1  # "good"
    
    return prediction, nodes
```

### Explanation of the Function:
1. **Input**: The function accepts a dictionary `X` representing feature values. The keys in this dictionary match the feature names exactly as provided in the example.
   
2. **Nodes Initialization**: A list `nodes` is initialized with `None` values for each decision condition (3 inner nodes in total).

3. **Node Evaluations**:
    - **Node 1 (`nodes[0]`)**: Checks if `"wage increase first year"` is less than or equal to 3.5.
    - **Node 2 (`nodes[1]`)**: If `nodes[0]` is `True`, checks if `"contribution to health plan"` is `"none"`.
      Otherwise, checks if `"vacation"` (number of paid vacation days) is `"ba"`.
      
4. **Prediction**:
    - If both `nodes[0]` and `nodes[1]` lead to unfavorable conditions, the outcome is classified as `"bad"` (0).
    - Any path leading to favorable conditions results in `"good"` (1).

5. **Output**: The function returns:
   - A prediction (`0` for "bad", `1` for "good").
   - The list of truth values (`nodes`) for the inner conditions.

### Example Usage:
```python
# Example input
example_input = {
    "duration": 4,
    "wage increase first year": 3.0,
    "wage increase second year": 4.0,
    "wage increase third year": 4.0,
    "cost of living adjustment": "none",
    "working hours": 37,
    "pension": "ret_allw",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": False,
    "statutory holidays": 10,
    "vacation": "ba",
    "longterm disability assistance": True,
    "contribution to dental plan": "half",
    "bereavement assistance": True,
    "contribution to health plan": "none"
}

# Make prediction
prediction, nodes = predict(example_input)
print(f"Prediction: {prediction} ('good' if 1, 'bad' if 0)")
print(f"Nodes: {nodes}")
```

### Example Output:
For the given example input:
```plaintext
Prediction: 0 ('good' if 1, 'bad' if 0)
Nodes: [1, 1, None]
```

This output indicates that the labor negotiation outcome is classified as "bad", given the truth values of the inner nodes in the decision tree. The `nodes` list shows the evaluation of each decision point (1 if true, 0 if false).
