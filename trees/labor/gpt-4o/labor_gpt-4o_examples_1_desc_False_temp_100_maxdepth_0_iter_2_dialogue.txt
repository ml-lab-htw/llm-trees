


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First split: Wage increase in the first year of contract
    nodes[0] = X["wage increase first year"] <= 4.5
    
    if nodes[0]:
        # Second split: Employer's contribution towards the health plan
        nodes[1] = X["contribution to health plan"] == "full"
        
        if nodes[1]:
            prediction = 1  # Good outcome
        else:
            prediction = 0  # Bad outcome
    else:
        # Second split: Number of paid vacation days
        nodes[1] = X["vacation"] == "gnr"
        
        if nodes[1]:
            prediction = 1  # Good outcome
        else:
            prediction = 0  # Bad outcome

    return prediction, nodes
```

### Explanation:
1. **First split**: The decision tree starts by checking if the **wage increase in the first year** is less than or equal to 4.5%. This is seen as a threshold that separates potentially bad outcomes from more favorable ones.
   
2. **Second split**: 
   - If the wage increase is on the lower side, the next decision point checks if the employer offers a **full contribution to the health plan**. If this is true, the outcome is considered good, otherwise bad.
   - If the wage increase is higher than 4.5%, the decision is based on whether the **vacation days** are generous ("gnr"). If they are, the outcome is good, otherwise bad.

The function returns both the predicted class (0 for bad, 1 for good) and the list of truth values (`nodes`) for the two inner nodes.