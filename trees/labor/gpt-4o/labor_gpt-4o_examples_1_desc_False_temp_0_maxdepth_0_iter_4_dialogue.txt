


Here is the Python function for the decision tree classifier based on the labor negotiation features you provided. The function predicts whether the outcome of the labor negotiations is "good" (1) or "bad" (0) and returns a list of truth values for the inner nodes.

```python
def predict(X: dict):
    """
    Predicts the outcome of labor negotiations (good or bad) based on input features.

    Parameters:
    X (dict): A dictionary containing the feature values. Keys must match the exact feature names.

    Returns:
    tuple: A tuple containing the prediction (0 = bad, 1 = good) and a list of truth values for the inner nodes.
    """
    nodes = 2 * [None]
    
    # Node 0: Check wage increase in the first year
    nodes[0] = X["wage increase first year"] <= 4.5
    
    # Node 1: Check employer's contribution towards the health plan or vacation days
    if nodes[0]:
        nodes[1] = X["contribution to health plan"] == 0
    else:
        nodes[1] = X["vacation"] == 1  # "ba" = below average

    # Make prediction based on the nodes
    if nodes[0]:  # Wage increase in the first year <= 4.5
        if nodes[1]:  # Contribution to health plan is "none"
            prediction = 0  # bad
        else:  # Contribution to health plan is not "none"
            prediction = 1  # good
    else:  # Wage increase in the first year > 4.5
        if nodes[1]:  # Vacation is "below average"
            prediction = 0  # bad
        else:  # Vacation is not "below average"
            prediction = 1  # good

    return prediction, nodes
```

### Explanation of the Function:
1. **Input**: The function takes a dictionary `X` where the keys are the exact feature names (e.g., `"wage increase first year"`, `"contribution to health plan"`, etc.), and the values are the corresponding feature values.
2. **Nodes**:
   - `nodes[0]`: Checks if the wage increase in the first year is less than or equal to 4.5.
   - `nodes[1]`: If `nodes[0]` is `True`, it checks if the employer's contribution to the health plan is `"none"`. Otherwise, it checks if the vacation days are `"below average"`.
3. **Prediction**:
   - If the wage increase in the first year is low (<= 4.5) and the health plan contribution is `"none"`, the outcome is "bad" (0).
   - If the wage increase in the first year is low (<= 4.5) but the health plan contribution is not `"none"`, the outcome is "good" (1).
   - If the wage increase in the first year is high (> 4.5) and the vacation days are `"below average"`, the outcome is "bad" (0).
   - If the wage increase in the first year is high (> 4.5) and the vacation days are not `"below average"`, the outcome is "good" (1).
4. **Output**: The function returns a tuple:
   - The first element is the prediction (`0` for "bad", `1` for "good").
   - The second element is a list of truth values for the inner nodes (`True` or `False`).

### Example Usage:
```python
# Example input
X = {
    "duration": 3,
    "wage increase first year": 4.0,
    "wage increase second year": 3.5,
    "wage increase third year": 3.0,
    "cost of living adjustment": "none",
    "working hours": 37,
    "pension": "ret_allw",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": True,
    "statutory holidays": 12,
    "vacation": "avg",
    "longterm disability assistance": True,
    "contribution to dental plan": "half",
    "bereavement assistance": True,
    "contribution to health plan": "none"
}

# Make prediction
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 0 (bad)
print("Nodes:", nodes)  # Output: [True, True]
```

This function is flexible and can be used with any valid input dictionary that matches the feature names and encodings.
