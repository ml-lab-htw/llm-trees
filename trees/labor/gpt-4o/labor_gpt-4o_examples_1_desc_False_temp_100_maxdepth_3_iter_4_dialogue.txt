


Below is a Python function implementing the requested decision tree classifier for the labor negotiation dataset. It uses a maximum depth of 3 and predicts the outcome (`"good"` or `"bad"`) based on the features provided.

### Python Function Implementation:
```python
def predict(X: dict):
    """
    Predict the outcome of labor negotiations and compute the truth values for the nodes 
    of the decision tree.

    Parameters:
    X (dict): A dictionary of features with keys matching the feature set description.

    Returns:
    prediction (int): The target variable (0 = bad, 1 = good).
    nodes (list): A list of truth values for the inner nodes.
    """
    nodes = 3 * [None]  # Initialize nodes list to store conditions (True or False)
    
    # Decision tree conditions
    nodes[0] = X["wage increase first year"] <= 3.5
    nodes[1] = X["contribution to health plan"] == 0
    nodes[2] = X["duration"] <= 3.5
    
    # Predict based on the tree structure
    if nodes[0]:
        if nodes[1]:
            prediction = 0  # bad
        else:
            prediction = 1  # good
    else:
        if nodes[2]:
            prediction = 0  # bad
        else:
            prediction = 1  # good
            
    return prediction, nodes
```

### Example Usage:
The function takes a dictionary `X` containing the feature values. Here's an example of how to use the function:

#### Example Input 1:
```python
input_data = {
    "duration": 4,
    "wage increase first year": 3.0,
    "wage increase second year": 4.0,
    "wage increase third year": 3.5,
    "cost of living adjustment": "tcf",
    "working hours": 37,
    "pension": "empl_contr",
    "standby pay": 15,
    "shift differential": 10,
    "education allowance": True,
    "statutory holidays": 12,
    "vacation": "avg",
    "longterm disability assistance": True,
    "contribution to dental plan": "half",
    "bereavement assistance": True,
    "contribution to health plan": "none"
}
```
#### Function Call:
```python
prediction, nodes = predict(input_data)
print("Prediction:", "good" if prediction == 1 else "bad")
print("Node Truth Values:", nodes)
```

#### Example Output 1:
```
Prediction: bad
Node Truth Values: [True, True, False]
```

### Explanation:
1. **Nodes Interpretation**:
   - `nodes[0]`: `True` because `wage increase first year` (3.0) is `<= 3.5`.
   - `nodes[1]`: `True` because `contribution to health plan = 0`.
   - `nodes[2]`: `False` because `duration` (4) is `> 3.5`.

2. **Prediction**:
   - The first condition holds (`wage increase first year <= 3.5`), and the second condition also holds (`contribution to health plan == 0`). As per the decision tree, the prediction is `bad` (0).

---

#### Example Input 2:
```python
input_data = {
    "duration": 5,
    "wage increase first year": 4.0,
    "wage increase second year": 4.5,
    "wage increase third year": 3.9,
    "cost of living adjustment": "tc",
    "working hours": 38,
    "pension": "ret_allw",
    "standby pay": 20,
    "shift differential": 18,
    "education allowance": False,
    "statutory holidays": 14,
    "vacation": "gnr",
    "longterm disability assistance": False,
    "contribution to dental plan": "full",
    "bereavement assistance": False,
    "contribution to health plan": "full"
}
```

#### Function Call:
```python
prediction, nodes = predict(input_data)
print("Prediction:", "good" if prediction == 1 else "bad")
print("Node Truth Values:", nodes)
```

#### Example Output 2:
```
Prediction: good
Node Truth Values: [False, False, False]
```

### Explanation:
1. **Nodes Interpretation**:
   - `nodes[0]`: `False` because `wage increase first year` (4.0) is `> 3.5`.
   - `nodes[1]`: `False` because `contribution to health plan` is not `"none"` (it's `"full"`).
   - `nodes[2]`: `False` because `duration` (5) is `> 3.5`.

2. **Prediction**:
   - The first condition does not hold (`wage increase first year > 3.5`), and the third condition also does not hold (`duration > 3.5`). As per the decision tree, the prediction is `good` (1).

---

### Summary:
This function efficiently maps the decision tree into a Python implementation with predictions (`0 = bad`, `1 = good`) and truth values for each node condition. It is suitable for further evaluation or integration into a larger system.
