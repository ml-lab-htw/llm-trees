


Certainly! Below is a Python function that implements a decision tree with a maximum depth of 2 for predicting the outcome of labor negotiations. The tree uses the most important features based on the examples provided, focusing on the "wage increase in the first year of contract" and the "employer's contribution towards the health plan."

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node conditions
    nodes[0] = X["wage increase first year"] <= 2.5
    nodes[1] = X["contribution to health plan"] in ["none", "half"]
    
    # Decision logic
    if nodes[0]:
        prediction = 0  # Class: Bad
    else:
        if nodes[1]:
            prediction = 0  # Class: Bad
        else:
            prediction = 1  # Class: Good

    return prediction, nodes

# Example usage:
example_record = {
    'duration': 5,
    'wage increase first year': 3.0,
    'wage increase second year': 3.5,
    'wage increase third year': 3.5,
    'cost of living adjustment': 'tc',
    'working hours': 37,
    'pension': 'ret_allw',
    'standby pay': 15,
    'shift differential': 10,
    'education allowance': True,
    'statutory holidays': 12,
    'vacation': 'avg',
    'longterm disability assistance': True,
    'contribution to dental plan': 'full',
    'bereavement assistance': True,
    'contribution to health plan': 'full'
}

print(predict(example_record))
```

### Explanation
1. **Node Conditions**:
    - `nodes[0] = X["wage increase first year"] <= 2.5`: This node checks if the wage increase in the first year is less than or equal to 2.5%.
    - `nodes[1] = X["contribution to health plan"] in ["none", "half"]`: This node checks if the employer's contribution towards the health plan is either "none" or "half."

2. **Decision Logic**:
    - If the first condition (`nodes[0]`) is satisfied, the outcome is classified as "bad" (`prediction = 0`).
    - If the first condition is not satisfied, we check the second condition (`nodes[1]`).
    - If the second condition is satisfied, the outcome is classified as "bad" (`prediction = 0`). Otherwise, it is classified as "good" (`prediction = 1`).

This function returns both the prediction and a list of the boolean values indicating whether each condition in the inner nodes is satisfied.