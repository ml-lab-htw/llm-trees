


Here is the Python function implementing the decision tree for your labor negotiation scenario (maximum depth of 4, as requested). The function returns both the prediction and a list of truth values for the inner nodes:

```python
def predict(X: dict):
    """
    Decision tree classifier for labor negotiations (depth=4).
    
    Input:
        X (dict): A dictionary of features with exact keys:
            'duration', 'wage increase first year', 
            'cost of living adjustment', 'vacation'.
    
    Output:
        (tuple): A tuple containing:
            - prediction: 0 (bad) or 1 (good)
            - nodes: List of True/False values representing the conditions at each decision node.
    """
    # Initialize nodes (truth values for inner nodes)
    nodes = [None] * 4
    
    # Decision tree logic
    nodes[0] = X["duration"] <= 4.5
    if nodes[0]:  # duration <= 4.5
        nodes[1] = X["wage increase first year"] <= 4.5
        if nodes[1]:  # wage increase first year <= 4.5
            prediction = 0  # bad
        else:  # wage increase first year > 4.5
            prediction = 1  # good
    else:  # duration > 4.5
        nodes[2] = X["cost of living adjustment"] == 0
        if nodes[2]:  # cost of living adjustment == 0
            prediction = 0  # bad
        else:  # cost of living adjustment != 0
            nodes[3] = X["vacation"] == 1
            if nodes[3]:  # vacation == 1 (below average)
                prediction = 0  # bad
            else:  # vacation != 1 (average or generous)
                prediction = 1  # good
    
    # Return prediction and truth values
    return prediction, nodes
```

### Explanation of Function Components:

1. **Input - `X`**:
   - `X` is a dictionary with keys that match the feature names:
     - `'duration'`: Agreement duration.
     - `'wage increase first year'`: Wage increase in the first year.
     - `'cost of living adjustment'`: Categorical feature (`'none'`, `'tcf'`, `'tc'`).
     - `'vacation'`: Number of paid vacation days (`'ba'` = below average, `'avg'` = average, `'gnr'` = generous).

2. **Nodes**:
   - `nodes[0]`: Whether `duration` is less than or equal to 4.5.
   - `nodes[1]`: For short agreements (`duration <= 4.5`), whether the first-year wage increase is below or equal to 4.5.
   - `nodes[2]`: For longer agreements (`duration > 4.5`), whether there is no cost-of-living adjustment.
   - `nodes[3]`: For longer agreements with a cost-of-living adjustment, whether the paid vacation days are below average (`'ba'`).

3. **Output**:
   - The function returns a tuple:
     - `prediction`: The classification (0 = bad, 1 = good).
     - `nodes`: A list of truth values indicating if the condition of each inner node is satisfied.

### Example Usage:

```python
# Example input representing a single instance
example_input = {
    "duration": 5,
    "wage increase first year": 5.5,
    "cost of living adjustment": "tcf",
    "vacation": "gnr"
}

# Prediction
prediction, nodes = predict(example_input)

# Output
print("Prediction:", prediction)  # Expected output: 1 (good)
print("Nodes:", nodes)  # Expected output: [False, None, False, None]
```

### Decision Tree Description:

The tree follows a logical sequence:
1. Start with `duration`: Short agreements (`<= 4.5`) are generally "bad," but a higher wage increase can improve the outcome.
2. For longer agreements, the presence of a cost-of-living adjustment and generous vacation policies lead to "good" outcomes, whereas lacking these makes the outcome "bad."

Let me know if you need any adjustments!
