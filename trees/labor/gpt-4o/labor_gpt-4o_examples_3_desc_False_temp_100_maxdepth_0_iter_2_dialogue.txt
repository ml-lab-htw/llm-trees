


Sure, I'll convert the decision tree into a Python function that returns both a prediction and a list of boolean flags indicating the truth values of the inner nodes.

Given the feature set and the constructed decision tree:

```python
def predict(X: dict):
    nodes = [None] * 4
    nodes[0] = X["wage increase first year"] <= 4.0
    nodes[1] = X["cost of living adjustment"] == 'none'
    nodes[2] = nodes[0] == False and X["contribution to health plan"] == 'none'

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # bad outcome
        else:
            prediction = 1  # good outcome
    else:
        if nodes[2]:
            prediction = 0  # bad outcome
        else:
            prediction = 1  # good outcome
            
    return prediction, nodes

# Example usage:
X = {
    "duration": 3,
    "wage increase first year": 4.5,
    "wage increase second year": 3.0,
    "wage increase third year": 2.5,
    "cost of living adjustment": 'tcf',
    "working hours": 38,
    "pension": 'ret_allw',
    "standby pay": 8,
    "shift differential": 5,
    "education allowance": True,
    "statutory holidays": 12,
    "vacation": 'avg',
    "longterm disability assistance": True,
    "contribution to dental plan": 'full',
    "bereavement assistance": True,
    "contribution to health plan": 'half'
}

prediction, nodes = predict(X)
print("Prediction:", "good" if prediction == 1 else "bad")
print("Nodes:", nodes)
```

Explanation of the function:
1. `nodes[0]` checks if the wage increase in the first year of the contract is less than or equal to 4.
2. `nodes[1]` checks if the cost of living adjustment is 'none'.
3. `nodes[2]` checks if the wage increase in the first year is more than 4 and if the contribution to the health plan is 'none'.

Based on the values of `nodes[0]`, `nodes[1]`, and `nodes[2]`:
- If `nodes[0]` is True:
  - If `nodes[1]` is True, the prediction is `bad` (0).
  - If `nodes[1]` is False, the prediction is `good` (1).
- If `nodes[0]` is False:
  - If `nodes[2]` is True, the prediction is `bad` (0).
  - If `nodes[2]` is False, the prediction is `good` (1).

The function assigns these predictions and returns both the prediction and the list of nodes' truth values. The example usage shows how the function can be used, with an example input dictionary containing the features and their respective values.