


Sure, here's your decision tree formatted as a Python function that returns a single prediction and a list representing the truth values of the inner nodes for the labor negotiations outcome classification:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["wage increase first year"] <= 4.5
    nodes[1] = X["vacation"] == "gnr"  # generous

    if nodes[0]:  # Wage increase in the first year <= 4.5%
        prediction = 0  # bad
    else:  # Wage increase in the first year > 4.5%
        if nodes[1]:  # Number of paid vacation days is generous
            prediction = 1  # good
        else:
            prediction = 0  # bad

    return prediction, nodes

# Example usage:
X_example = {
    'duration': 3,
    'wage increase first year': 5.0,
    'wage increase second year': 3.0,
    'wage increase third year': 2.5,
    'cost of living adjustment': 'none',
    'working hours': 37.5,
    'pension': 'ret_allw',
    'standby pay': 10,
    'shift differential': 15,
    'education allowance': True,
    'statutory holidays': 12,
    'vacation': 'gnr',  # generous
    'longterm disability assistance': True,
    'contribution to dental plan': 'full',
    'bereavement assistance': True,
    'contribution to health plan': 'full'
}

prediction, nodes = predict(X_example)

print(f"Prediction: {'good' if prediction == 1 else 'bad'}")
print(f"Nodes: {nodes}")
```

### Explanation:
1. **Root Node: Wage increase in the first year of the contract**:
   - If the wage increase in the first year of the contract is less than or equal to 4.5% (`nodes[0] = X["wage increase first year"] <= 4.5`), the outcome is classified as "bad".
   - If the wage increase in the first year of the contract is more than 4.5% (`else`), the tree goes to the next decision node.

2. **Second Node: Number of paid vacation days**:
   - If the wage increase in the first year is more than 4.5%, then the tree checks if the number of paid vacation days is "generous" (`nodes[1] = X["vacation"] == "gnr"`).
     - If the number of paid vacation days is "generous", the outcome is classified as "good".
     - Otherwise, the outcome is classified as "bad".

The function `predict` takes a dictionary `X` of feature values as input and returns a prediction and a list of boolean values (`nodes`) indicating whether the conditions at each inner node were satisfied during the classification process.