


Here is the Python function formatted according to your requirements. The function builds a depth-1 decision tree to classify whether the outcome of labor negotiations is "good" (1) or "bad" (0), using the most important feature: `wage increase first year`:

```python
def predict(X: dict):
    """
    Predict the outcome of labor negotiations (good/bad) using a depth-1 decision tree.
    
    Parameters:
    X (dict): Feature dictionary with keys matching the feature names provided.

    Returns:
    int: Predicted class label (0 = bad, 1 = good).
    list: Truth values of the inner nodes of the decision tree.
    """
    # Initialize the truth value list for inner nodes
    nodes = 1 * [None]
    
    # Check the condition of the first (and only) node
    nodes[0] = X["wage increase first year"] <= 3.5
    
    # Make a prediction based on the decision tree logic
    if nodes[0]:  # If wage increase first year is less than or equal to 3.5
        prediction = 0  # bad
    else:  # If wage increase first year is greater than 3.5
        prediction = 1  # good
    
    return prediction, nodes
```

### Explanation of the Code:
1. **Input**: The function takes `X` as input, which is a dictionary containing all the feature values for a single instance. The keys in the dictionary match the feature names provided in your specification, such as `"wage increase first year"`.
   
2. **Inner Nodes List**: 
   - `nodes` is a list that keeps track of whether the condition at the inner node is satisfied (`1` if true, `0` if false).
   - For this depth-1 tree, there's only one inner node, so `nodes` has one entry.

3. **Condition**: 
   - The inner node splits on the feature `"wage increase first year"` with a threshold of `3.5`:
     - If `"wage increase first year" <= 3.5`, the outcome is predicted as `bad` (0).
     - Otherwise, if `"wage increase first year" > 3.5`, the outcome is predicted as `good` (1).

4. **Return Values**:
   - `prediction`: The predicted class label (`0` for bad, `1` for good).
   - `nodes`: A list containing the binary value (`1` or `0`) for whether the inner node condition was satisfied.

### Example Usage:
Here is how you can use this function:

```python
# Test instance
X = {
    "duration": 5,
    "wage increase first year": 4.0,
    "wage increase second year": 3.5,
    "wage increase third year": 3.0,
    "cost of living adjustment": "tc",
    "working hours": 37,
    "pension": "empl_contr",
    "standby pay": 10,
    "shift differential": 5,
    "education allowance": True,
    "statutory holidays": 12,
    "vacation": "avg",
    "longterm disability assistance": True,
    "contribution to dental plan": "full",
    "bereavement assistance": True,
    "contribution to health plan": "half"
}

# Predict the outcome
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: Prediction: 1 (good)
print("Inner Node Truth Values:", nodes)  # Output: Inner Node Truth Values: [False]
```

### Example with Different Input:
```python
# Test instance with lower first-year wage increase
X = {
    "duration": 2,
    "wage increase first year": 3.0,
    "wage increase second year": 2.5,
    "wage increase third year": 3.0,
    "cost of living adjustment": "none",
    "working hours": 38,
    "pension": "none",
    "standby pay": 5,
    "shift differential": 1,
    "education allowance": False,
    "statutory holidays": 10,
    "vacation": "ba",
    "longterm disability assistance": False,
    "contribution to dental plan": "none",
    "bereavement assistance": False,
    "contribution to health plan": "none"
}

# Predict the outcome
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: Prediction: 0 (bad)
print("Inner Node Truth Values:", nodes)  # Output: Inner Node Truth Values: [True]
```

This function is simple, interpretable, and adheres to your requirements for feature names, target encoding, and structure.