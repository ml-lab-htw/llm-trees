


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First split: wage increase in the first year of the contract
    nodes[0] = X["wage increase first year"] <= 4.5
    
    # Second split depends on the result of the first split
    if nodes[0]:
        # If the wage increase is less than or equal to 4.5, check cost of living adjustment
        nodes[1] = X["cost of living adjustment"] == 0
        if nodes[1]:
            prediction = 0  # Bad outcome if no cost of living adjustment
        else:
            prediction = 1  # Good outcome if there is a cost of living adjustment (tcf or tc)
    else:
        # If the wage increase is greater than 4.5, check contribution to health plan
        nodes[1] = X["contribution to health plan"] == 0
        if nodes[1]:
            prediction = 0  # Bad outcome if no health plan contribution
        else:
            prediction = 1  # Good outcome if there is any health plan contribution (half or full)

    return prediction, nodes
```

### Explanation:
- **Input:** `X` is a dictionary where the keys are feature names (as provided), and the values are the corresponding feature values.
- **Output:** The function returns:
  - `prediction`: 0 (bad) or 1 (good) based on the decision tree logic.
  - `nodes`: A list of boolean values representing whether each inner node condition was satisfied (`True` or `False`).
  
### Example:
```python
# Example input to the function:
X = {
    "wage increase first year": 4.0,
    "cost of living adjustment": "none",
    "contribution to health plan": "full"
}
prediction, nodes = predict(X)
print(prediction)  # Output: 0 (bad)
print(nodes)       # Output: [True, True]
```
