


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First inner node: Check the wage increase in the first year of the contract
    nodes[0] = X["wage increase first year"] <= 4.0
    
    # Second inner node: Check the employer's contribution to the health plan
    if nodes[0]:  # wage increase first year <= 4.0
        nodes[1] = X["contribution to health plan"] == 0
        if nodes[1]:
            prediction = 0  # bad outcome
        else:
            prediction = 1  # good outcome
    else:  # wage increase first year > 4.0
        # Second inner node: Check the number of paid vacation days
        nodes[1] = X["vacation"] == 1  # "ba" = below average
        if nodes[1]:
            prediction = 0  # bad outcome
        else:
            prediction = 1  # good outcome

    return prediction, nodes
```

### Explanation:
1. **First node**: We check if the wage increase in the first year is less than or equal to 4.0%. If it is, we proceed to the second node.
2. **Second node (when wage increase <= 4.0%)**: We check if the employer provides no contribution to the health plan. If no contribution is given, the prediction is "bad" (0). If thereâ€™s any contribution ("half" or "full"), the prediction is "good" (1).
3. **Second node (when wage increase > 4.0%)**: We check if the number of paid vacation days is "below average" ("ba"). If so, the outcome is classified as "bad" (0). If the vacation days are "average" ("avg") or "generous" ("gnr"), the prediction is "good" (1).

This function returns the predicted outcome and a list of boolean values indicating whether each condition in the tree was satisfied.
