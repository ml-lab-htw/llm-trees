


```python
def predict(X: dict):
    nodes = 4 * [None]
    nodes[0] = X['ca'] <= 0
    nodes[1] = X['thal'] == 2  # Thalassemia == Normal (2)
    nodes[2] = X['exang'] == 2  # Exercise Induced Angina == yes (2)
    nodes[3] = X['oldpeak'] <= 1.0

    if nodes[0]:
        # ca <= 0
        if nodes[1]:
            # thal == Normal
            prediction = 0  # No Heart Disease
        else:
            # thal != Normal
            prediction = 1  # Heart Disease
    else:
        # ca > 0
        if nodes[2]:
            # exang == yes
            prediction = 1  # Heart Disease
        else:
            # exang == no
            if nodes[3]:
                # oldpeak <= 1.0
                prediction = 0  # No Heart Disease
            else:
                # oldpeak > 1.0
                prediction = 1  # Heart Disease

    return prediction, nodes
```

**Explanation:**

This function implements the decision tree classifier based on the provided features and encodings. Given an input dictionary `X` containing the patient's features, it returns a prediction (`0` for No Heart Disease, `1` for Heart Disease) and a list `nodes` representing the truth values of the inner nodes.

**Feature Keys and Encodings Used:**

- `ca`: Number of Major Vessels Colored by Fluoroscopy (values can be `0`, `1`, `2`, `3`)
- `thal`: Thalassemia (`2` = Normal, `1` = Fixed defect, `3` = Reversible defect)
- `exang`: Exercise Induced Angina (`1` = no, `2` = yes)
- `oldpeak`: ST Depression Induced by Exercise Relative to Rest (ranges from `0` to `5`)

**Decision Nodes:**

1. **Node 0** (`nodes[0]`):
   - Condition: `X['ca'] <= 0`
   - Checks if the number of major vessels colored by fluoroscopy is `0` or less.
2. **Node 1** (`nodes[1]`):
   - Condition: `X['thal'] == 2`
   - Checks if Thalassemia is Normal.
   - Evaluated only if Node 0's condition is `True`.
3. **Node 2** (`nodes[2]`):
   - Condition: `X['exang'] == 2`
   - Checks if Exercise Induced Angina is `yes`.
   - Evaluated only if Node 0's condition is `False`.
4. **Node 3** (`nodes[3]`):
   - Condition: `X['oldpeak'] <= 1.0`
   - Checks if ST Depression Induced by Exercise Relative to Rest is `1.0` or less.
   - Evaluated only if Node 2's condition is `False`.

**Usage Example:**

```python
# Example patient data
patient_data = {
    'age': 55,
    'sex': 'male',  # Note: Sex is not used in this decision tree
    'chest_pain': 1,
    'trestbps': 130,
    'chol': 250,
    'fbs': 1,
    'restecg': 2,
    'thalach': 150,
    'exang': 2,
    'oldpeak': 2.3,
    'slope': 2,
    'ca': 1,
    'thal': 3
}

prediction, nodes = predict(patient_data)
print(f"Prediction: {'Heart Disease' if prediction == 1 else 'No Heart Disease'}")
print(f"Decision Path: {nodes}")
```

**Output:**

```
Prediction: Heart Disease
Decision Path: [False, None, True, None]
```

In this example:

- `nodes[0]` is `False` because `ca` is `1` (greater than `0`).
- Since `nodes[0]` is `False`, we evaluate `nodes[2]`.
- `nodes[2]` is `True` because `exang` is `2` (`yes`).
- Since `nodes[2]` is `True`, the prediction is `Heart Disease`.