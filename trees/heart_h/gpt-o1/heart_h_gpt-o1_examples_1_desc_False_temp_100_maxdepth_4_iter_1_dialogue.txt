


```python
def predict(X: dict):
    nodes = 4 * [None]
    # Node 0: ST Depression Induced by Exercise Relative to Rest <= 1.0
    nodes[0] = int(X["oldpeak"] <= 1.0)
    # Node 1: Maximum Heart Rate Achieved > 150
    nodes[1] = int(X["thalach"] > 150)
    # Node 2: Exercise Induced Angina == yes (encoded as 2)
    nodes[2] = int(X["exang"] == 2)
    # Node 3: Number of Major Vessels Colored by Fluoroscopy > 0
    nodes[3] = int(X["ca"] > 0)

    if nodes[0]:  # ST Depression <= 1.0
        if nodes[1]:  # Maximum Heart Rate > 150
            prediction = 0  # No Heart Disease
        else:  # Maximum Heart Rate <= 150
            prediction = 1  # Heart Disease
    else:  # ST Depression > 1.0
        if nodes[2]:  # Exercise Induced Angina is yes
            prediction = 1  # Heart Disease
        else:  # Exercise Induced Angina is no
            if nodes[3]:  # Number of Major Vessels > 0
                prediction = 1  # Heart Disease
            else:  # Number of Major Vessels == 0
                prediction = 0  # No Heart Disease

    return prediction, nodes
```

**Explanation:**

- **Node 0** checks if `'oldpeak'` (ST Depression Induced by Exercise Relative to Rest) is less than or equal to 1.0.
- **Node 1** checks if `'thalach'` (Maximum Heart Rate Achieved) is greater than 150.
- **Node 2** checks if `'exang'` (Exercise Induced Angina) equals 2. According to the encoding provided, `1 = no` and `2 = yes`.
- **Node 3** checks if `'ca'` (Number of Major Vessels Colored by Fluoroscopy) is greater than 0.

The `nodes` list captures the truth values (`1` for True, `0` for False) of each condition in the decision tree:

- `nodes[0]`: Is `'oldpeak'` â‰¤ 1.0?
- `nodes[1]`: Is `'thalach'` > 150?
- `nodes[2]`: Is `'exang'` == 2 (yes)?
- `nodes[3]`: Is `'ca'` > 0?

The function processes the input `X` and navigates through the decision tree using these conditions, ultimately returning:

- `prediction`: `1` if the patient is predicted to have heart disease, `0` otherwise.
- `nodes`: A list of the truth values of the conditions at each node.

**Usage Example:**

```python
# Example patient data
patient = {
    'age': 55,
    'sex': 'male',
    'chest_pain': 1,
    'trestbps': 140,
    'chol': 250,
    'fbs': 1,
    'restecg': 2,
    'thalach': 165,
    'exang': 1,  # No Exercise Induced Angina
    'oldpeak': 0.5,
    'slope': 2,
    'ca': 0,
    'thal': 3
}

prediction, nodes = predict(patient)
print("Prediction:", "Heart Disease" if prediction == 1 else "No Heart Disease")
print("Nodes:", nodes)
```

**Notes:**

- Ensure that the input dictionary `X` includes all the required keys with correct encoding as specified:

  - For categorical features like `'sex'`, `'chest_pain'`, `'fbs'`, `'restecg'`, `'exang'`, `'slope'`, `'ca'`, and `'thal'`, use the numerical encodings provided.
  - For example, `'exang'`: `1` for no, `2` for yes.

- The thresholds and conditions in the decision tree are based on the most informative features for predicting heart disease, as per your initial request.

- This function assumes that all numerical comparisons and encodings are handled correctly in the input data.