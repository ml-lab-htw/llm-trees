


Certainly! Here's the decision tree formatted as a Python function. The function uses the exact feature keys you provided and follows the style of your examples. It returns a prediction (`1` for heart disease, `0` for no heart disease) and a list of truth values (`nodes`) representing whether each condition in the decision tree is satisfied (`1`) or not (`0`).

```python
def predict(X: dict):
    nodes = 4 * [None]
    nodes[0] = int(X["chest_pain"] == 0)          # Chest Pain Type == Asymptomatic
    if nodes[0]:
        prediction = 1  # Heart Disease
    else:
        nodes[1] = int(X["exang"] == 2)           # Exercise Induced Angina == yes
        if nodes[1]:
            prediction = 1  # Heart Disease
        else:
            nodes[2] = int(X["thalach"] <= 140)   # Maximum Heart Rate Achieved <= 140 bpm
            if nodes[2]:
                prediction = 1  # Heart Disease
            else:
                nodes[3] = int(X["oldpeak"] > 1.0)  # ST Depression Induced by Exercise > 1.0
                if nodes[3]:
                    prediction = 1  # Heart Disease
                else:
                    prediction = 0  # No Heart Disease
    return prediction, nodes
```

**Explanation of the Function:**

- **nodes[0]**: Checks whether the patient has **Asymptomatic Chest Pain** (`chest_pain == 0`).
  - If **yes** (`nodes[0] == 1`), the function predicts **Heart Disease** (`prediction = 1`).
  - If **no** (`nodes[0] == 0`), it proceeds to the next condition.
  
- **nodes[1]**: Checks whether the patient has **Exercise Induced Angina** (`exang == 2`).
  - If **yes** (`nodes[1] == 1`), the function predicts **Heart Disease** (`prediction = 1`).
  - If **no** (`nodes[1] == 0`), it proceeds to the next condition.
  
- **nodes[2]**: Checks whether the **Maximum Heart Rate Achieved** is **<= 140 bpm** (`thalach <= 140`).
  - If **yes** (`nodes[2] == 1`), the function predicts **Heart Disease** (`prediction = 1`).
  - If **no** (`nodes[2] == 0`), it proceeds to the final condition.
  
- **nodes[3]**: Checks whether the **ST Depression Induced by Exercise** is **> 1.0** (`oldpeak > 1.0`).
  - If **yes** (`nodes[3] == 1`), the function predicts **Heart Disease** (`prediction = 1`).
  - If **no** (`nodes[3] == 0`), the function predicts **No Heart Disease** (`prediction = 0`).

**Notes:**

- Each entry in the `nodes` list corresponds to a condition in the decision tree:
  - `1` means the condition is **satisfied**.
  - `0` means the condition is **not satisfied**.
  
- The features are used with the exact keys provided:
  - **'chest_pain'**: Chest Pain Type (Encoded as per your specification)
  - **'exang'**: Exercise Induced Angina (1 = no, 2 = yes)
  - **'thalach'**: Maximum Heart Rate Achieved (bpm)
  - **'oldpeak'**: ST Depression Induced by Exercise Relative to Rest

- The threshold values and conditions are filled with meaningful clinical values based on the context.

**Example Usage:**

Suppose we have a patient with the following data:

```python
patient_data = {
    'age': 55,
    'sex': 'male',
    'chest_pain': 0,      # Asymptomatic
    'trestbps': 130,
    'chol': 250,
    'fbs': 1,
    'restecg': 2,
    'thalach': 150,
    'exang': 1,           # No exercise-induced angina
    'oldpeak': 0.5,
    'slope': 2,
    'ca': 0,
    'thal': 2
}
```

Using the `predict` function:

```python
prediction, nodes = predict(patient_data)
print("Prediction:", "Heart Disease" if prediction == 1 else "No Heart Disease")
print("Nodes:", nodes)
```

**Output:**

```
Prediction: Heart Disease
Nodes: [1, None, None, None]
```

- The first condition `nodes[0]` is `1` because `chest_pain == 0` (Asymptomatic).
- Since the first condition is satisfied, the function predicts **Heart Disease** without evaluating further conditions.

**Final Remarks:**

This function provides a clear implementation of the decision tree, allowing you to trace which conditions led to the prediction by examining the `nodes` list.