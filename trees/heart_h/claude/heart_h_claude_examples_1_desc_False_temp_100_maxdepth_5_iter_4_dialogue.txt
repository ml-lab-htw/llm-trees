


Based on the provided feature names and encodings, I'll create a decision function for the heart disease prediction tree:

```python
def predict(X: dict):
    nodes = 6 * [None]  # Initialize list for storing node decisions
    
    # Define decision nodes using the exact feature names and reasonable thresholds
    nodes[0] = X['oldpeak'] <= 1.5
    nodes[1] = X['ca'] <= 0
    nodes[2] = X['age'] <= 52
    nodes[3] = X['thalach'] <= 150
    nodes[4] = X['chest_pain'] == 0  # 0 = Asymptomatic
    nodes[5] = X['exang'] == 2  # 2 = yes
    
    # Tree traversal logic
    if nodes[0]:  # oldpeak <= 1.5
        if nodes[1]:  # ca <= 0
            if nodes[2]:  # age <= 52
                prediction = 0
            else:  # age > 52
                if nodes[3]:  # thalach <= 150
                    prediction = 1
                else:  # thalach > 150
                    prediction = 0
        else:  # ca > 0
            if nodes[4]:  # chest_pain is Asymptomatic
                prediction = 1
            else:  # chest_pain is not Asymptomatic
                prediction = 0
    else:  # oldpeak > 1.5
        if X['thalach'] <= 160:
            prediction = 1
        else:  # thalach > 160
            if nodes[5]:  # exang is yes
                prediction = 1
            else:  # exang is no
                prediction = 0
    
    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the feature values
2. Uses the exact feature names as provided
3. Uses the correct encodings for categorical variables
4. Returns both the prediction (0 = no heart disease, 1 = heart disease) and a list of boolean values for each decision node
5. Uses reasonable thresh