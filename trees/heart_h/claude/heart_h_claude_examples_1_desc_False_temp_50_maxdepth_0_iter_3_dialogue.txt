


Based on the provided feature descriptions and target encoding, I'll create a decision tree function that predicts heart disease (1 = yes, 0 = no) and returns the node conditions. Here's the implementation:

```python
def predict(X: dict):
    nodes = 6 * [None]
    
    # Node conditions
    nodes[0] = X["oldpeak"] <= 1.5
    nodes[1] = X["thalach"] > 150
    nodes[2] = X["age"] <= 55
    nodes[3] = X["ca"] <= 0
    nodes[4] = X["chest_pain"] == 0  # Asymptomatic
    nodes[5] = X["exang"] == 2  # yes
    
    # Tree logic
    if nodes[0]:  # oldpeak <= 1.5
        if nodes[1]:  # thalach > 150
            if nodes[2]:  # age <= 55
                prediction = 0  # No Heart Disease
            else:
                prediction = 1  # Heart Disease
        else:  # thalach <= 150
            if nodes[3]:  # ca <= 0
                prediction = 0  # No Heart Disease
            else:
                prediction = 1  # Heart Disease
    else:  # oldpeak > 1.5
        if nodes[4]:  # chest_pain is Asymptomatic
            prediction = 1  # Heart Disease
        else:
            if nodes[5]:  # exang is yes
                prediction = 1  # Heart Disease
            else:
                prediction = 0  # No Heart Disease
    
    return prediction, nodes
```

This implementation:
1. Uses the exact feature names as provided
2. Respects the feature encodings (e.g., chest_pain = 0 for Asymptomatic, exang = 2 for yes)
3. Returns both the prediction (0 or 1) and a list of boolean values representing the conditions at each node
4. Uses meaningful thresholds based on medical knowledge and typical ranges for these measurements

The decision nodes use:
- oldpeak (ST Depression): threshold at 