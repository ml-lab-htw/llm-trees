


Here is the requested Python function for the decision tree classifier that predicts whether a patient has heart disease (1 = yes, 0 = no). The function is based on the features provided and uses a maximum depth of 2.

```python
def predict(X: dict):
    """
    Predict whether a patient has heart disease (1 = yes, 0 = no) based on input features.
    
    Parameters:
        X (dict): A dictionary containing the following keys:
            - 'age': Age (years)
            - 'sex': Sex ('male', 'female')
            - 'chest_pain': Chest Pain Type (3 = Typical angina, 0 = Asymptomatic, 2 = Non-anginal pain, 1 = Atypical angina)
            - 'trestbps': Resting Blood Pressure (mmHg)
            - 'chol': Serum Cholesterol (mg/dl)
            - 'fbs': Fasting Blood Sugar (1 = false, 2 = true)
            - 'restecg': Resting Electrocardiographic Results (2 = Normal, 3 = Having ST-T wave abnormality, 1 = Showing probable or definite left ventricular hypertrophy by Estes' criteria)
            - 'thalach': Maximum Heart Rate Achieved (bpm)
            - 'exang': Exercise Induced Angina (1 = no, 2 = yes)
            - 'oldpeak': ST Depression Induced by Exercise Relative to Rest (0 to 5)
            - 'slope': Slope of the Peak Exercise ST Segment (3 = Upsloping, 2 = Flat, 1 = Downsloping)
            - 'ca': Number of Major Vessels Colored by Fluoroscopy (0, 1, 2, 3)
            - 'thal': Thalassemia (2 = Normal, 1 = Fixed defect, 3 = Reversible defect)
    
    Returns:
        tuple: A tuple containing:
            - prediction (int): 1 if the patient has heart disease, 0 otherwise.
            - nodes (list): A list of truth values for the inner nodes of the decision tree.
    """
    # Initialize the list to store truth values of the inner nodes
    nodes = 2 * [None]
    
    # Node 0: Check if chest pain type is asymptomatic (0)
    nodes[0] = X["chest_pain"] == 0
    
    if nodes[0]:  # If chest pain is asymptomatic
        prediction = 1  # Patient has heart disease
    else:
        # Node 1: Check if maximum heart rate achieved (thalach) is <= 140
        nodes[1] = X["thalach"] <= 140
        
        if nodes[1]:  # If maximum heart rate is <= 140
            prediction = 1  # Patient has heart disease
        else:  # If maximum heart rate is > 140
            prediction = 0  # Patient does not have heart disease
    
    return prediction, nodes
```

### Explanation of the Code:
1. **Node 0**: The root node checks if the `chest_pain` feature indicates "Asymptomatic" (value = 0). If this condition is true, the patient is classified as having heart disease (`prediction = 1`).
2. **Node 1**: If the chest pain type is not asymptomatic, the second node checks if the `thalach` (maximum heart rate achieved) is less than or equal to 140 bpm. If this condition is true, the patient is classified as having heart disease (`prediction = 1`); otherwise, the patient is classified as not having heart disease (`prediction = 0`).

### Example Usage:
```python
# Example input feature dictionary
X = {
    "age": 55,
    "sex": "male",
    "chest_pain": 0,  # Asymptomatic
    "trestbps": 130,
    "chol": 250,
    "fbs": 1,
    "restecg": 2,
    "thalach": 120,
    "exang": 1,
    "oldpeak": 1.5,
    "slope": 2,
    "ca": 1,
    "thal": 3
}

# Call the predict function
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 1 (patient has heart disease)
print("Nodes:", nodes)  # Output: [True, None]
```

### Example Explanation:
- For the example input, the `chest_pain` value is `0` (asymptomatic), so `nodes[0]` evaluates to `True`. This leads to an immediate classification of `1` (patient has heart disease), and the second node (`nodes[1]`) is not evaluated.

This function adheres to the structure and requirements specified in your question.