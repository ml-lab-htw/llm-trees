


Let's translate the decision tree for predicting heart disease into a Python function. This function will take a dictionary `X` with the given features, compute the truth values for each node in the decision tree, and then predict whether the patient has heart disease or not. It will also return a list of the truth values corresponding to the conditions in the decision tree.

Here's how the function will look:

```python
def predict(X: dict):
    nodes = 7 * [None]
    
    nodes[0] = X["chest_pain"] == 3  # Typical angina
    nodes[1] = X["exang"] == 2  # Exercise Induced Angina
    nodes[2] = X["ca"] <= 0  # Number of Major Vessels Colored by Fluoroscopy
    nodes[3] = X["thalach"] > 150  # Maximum Heart Rate Achieved
    nodes[4] = X["oldpeak"] <= 1.5  # ST Depression Induced by Exercise Relative to Rest
    nodes[5] = X["thal"] == 2  # Thalassemia: Normal
    nodes[6] = X["thal"] == 1  # Thalassemia: Fixed defect

    if nodes[0]:  # Chest Pain Type == Typical angina
        if nodes[1]:  # Exercise Induced Angina == yes
            prediction = 1  # Heart Disease
        else:  # Exercise Induced Angina == no
            prediction = 0  # No Heart Disease
    else:  # Chest Pain Type != Typical angina
        if nodes[2]:  # Number of Major Vessels Colored by Fluoroscopy <= 0
            if nodes[3]:  # Maximum Heart Rate Achieved > 150
                prediction = 0  # No Heart Disease
            else:  # Maximum Heart Rate Achieved <= 150
                prediction = 1  # Heart Disease
        else:  # Number of Major Vessels Colored by Fluoroscopy > 0
            if nodes[4]:  # ST Depression Induced by Exercise Relative to Rest <= 1.5
                if nodes[6]:  # Thalassemia == Fixed defect
                    prediction = 0  # No Heart Disease
                else:  # Thalassemia != Fixed defect
                    prediction = 1  # Heart Disease
            else:  # ST Depression Induced by Exercise Relative to Rest > 1.5
                prediction = 1  # Heart Disease

    return prediction, nodes

# Example usage
X_example = {
    'age': 55,
    'sex': 'male',
    'chest_pain': 2,
    'trestbps': 140,
    'chol': 250,
    'fbs': 1,
    'restecg': 1,
    'thalach': 160,
    'exang': 1,
    'oldpeak': 1.0,
    'slope': 1,
    'ca': 1,
    'thal': 2
}

prediction, nodes = predict(X_example)
print(f"Prediction: {'Heart Disease' if prediction == 1 else 'No Heart Disease'}")
print(f"Nodes: {nodes}")
```

Here, the `nodes` list contains truth values for each condition in the decision tree, and the `prediction` is either 1 (indicating heart disease) or 0 (indicating no heart disease). The keys of the features in the dictionary `X` strictly adhere to the provided feature names. Adjust the example or actual inputs as needed for real-world use cases.