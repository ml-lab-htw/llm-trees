


Here is how the decision tree for predicting whether a patient has heart disease (target: 1 for yes, 0 for no) can be implemented as a Python function. The function outputs the predicted class and a list of truth values for the inner nodes.

```python
def predict(X: dict):
    """
    Predicts whether a patient has heart disease (1 = yes, 0 = no) based on the input features.
    Returns the predicted class and a list of inner node truth values.
    
    Parameters:
        X (dict): Dictionary of input features with the following keys:
                  ['age', 'sex', 'chest_pain', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 
                   'exang', 'oldpeak', 'slope', 'ca', 'thal']

    Returns:
        tuple: (prediction, nodes), where prediction is the target value (0 or 1),
               and nodes is a list of truth values for the inner nodes.
    """
    # Initialize the list for inner node truth values (length = 7 as per maximum depth of tree)
    nodes = 7 * [None]

    # Decision tree logic
    nodes[0] = X["chest_pain"] == 0  # Chest Pain Type: 0 (Asymptomatic)
    if nodes[0]:
        nodes[1] = X["oldpeak"] > 2.0  # ST Depression > 2.0
        if nodes[1]:
            nodes[2] = X["age"] > 60  # Age > 60
            if nodes[2]:
                nodes[3] = X["thal"] == 1  # Thalassemia: Fixed defect
                if nodes[3]:
                    prediction = 1  # Heart Disease
                else:
                    prediction = 0  # No Heart Disease
            else:
                prediction = 1  # Heart Disease
        else:
            nodes[4] = X["thalach"] > 140  # Max Heart Rate > 140
            if nodes[4]:
                prediction = 0  # No Heart Disease
            else:
                prediction = 1  # Heart Disease
    else:
        nodes[5] = X["exang"] == 2  # Exercise Induced Angina: 2 (Yes)
        if nodes[5]:
            nodes[6] = X["ca"] > 1  # Number of Major Vessels > 1
            if nodes[6]:
                prediction = 1  # Heart Disease
            else:
                prediction = 0  # No Heart Disease
        else:
            nodes[6] = X["slope"] == 2  # Slope of Peak ST Segment: 2 (Flat)
            if nodes[6]:
                prediction = 1  # Heart Disease
            else:
                prediction = 0  # No Heart Disease

    return prediction, nodes
```

### Explanation of the Function:
1. **Inner Nodes**:
   - The `nodes` list records the truth value (`True` or `False`, stored as `1` or `0`) for each decision condition (inner node) in the tree. This is useful for interpreting how the conditions inside the tree were traversed to make the prediction.

2. **Feature Checks**:
   - `nodes[0]`: Checks if `chest_pain` is 0 (Asymptomatic).
   - `nodes[1]`: Checks if `oldpeak` (ST Depression) is greater than 2.0.
   - `nodes[2]`: Checks if `age` is greater than 60.
   - `nodes[3]`: Checks if `thal` (Thalassemia) is 1 (Fixed defect).
   - `nodes[4]`: Checks if `thalach` (Maximum Heart Rate) is greater than 140.
   - `nodes[5]`: Checks if `exang` (Exercise Induced Angina) is 2 (Yes).
   - `nodes[6]`: Checks if `slope` (Slope of the Peak ST Segment) is 2 (Flat).

3. **Return Values**:
   - The function returns the predicted class (`0` for no heart disease, `1` for heart disease) and the list of truth values for each inner node.

### Usage Example:
```python
# Example patient input
patient = {
    "age": 65,
    "sex": "male",
    "chest_pain": 0,
    "trestbps": 130,
    "chol": 250,
    "fbs": 1,
    "restecg": 2,
    "thalach": 120,
    "exang": 2,
    "oldpeak": 3.0,
    "slope": 2,
    "ca": 2,
    "thal": 1
}

# Make prediction
prediction, node_values = predict(patient)

print("Prediction (Heart Disease):", prediction)  # 1 = Yes, 0 = No
print("Inner Node Truth Values:", node_values)
```

### Example Output:
```
Prediction (Heart Disease): 1
Inner Node Truth Values: [1, 1, 1, 1, None, None, None]
```

This indicates that the patient is predicted to have heart disease, and the corresponding truth values for the decision conditions along the evaluated path are shown.