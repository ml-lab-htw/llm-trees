Here is a decision tree with a maximum depth of 4, based on the Features you provided. The decision tree has been constructed to meet your specifications without training on actual data, and it uses the most important features for heart disease prediction.

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Decision tree inner nodes
    nodes[0] = X["ca"] > 0  # First consider the number of major vessels colored by fluoroscopy (ca)
    nodes[1] = X["thal"] == 3  # Next, check if thalassemia is a reversible defect (thal)
    nodes[2] = X["oldpeak"] >= 2.0  # Check ST depression induced by exercise relative to rest (oldpeak)
    nodes[3] = X["age"] > 50  # Finally, check the age of the patient
    
    # Decision tree structure
    if nodes[0]:
        if nodes[1]:
            if nodes[2]:
                if nodes[3]:
                    prediction = 1  # High risk of heart disease
                else:
                    prediction = 1  # High risk of heart disease
            else:
                if nodes[3]:
                    prediction = 1  # High risk of heart disease
                else:
                    prediction = 1  # High risk of heart disease
        else:
            if nodes[2]:
                if nodes[3]:
                    prediction = 1  # High risk of heart disease
                else:
                    prediction = 0  # Lower risk of heart disease
            else:
                if nodes[3]:
                    prediction = 1  # High risk of heart disease
                else:
                    prediction = 0  # Lower risk of heart disease
    else:
        if nodes[1]:
            if nodes[2]:
                if nodes[3]:
                    prediction = 1  # High risk of heart disease
                else:
                    prediction = 1  # High risk of heart disease
            else:
                if nodes[3]:
                    prediction = 1  # High risk of heart disease
                else:
                    prediction = 0  # Lower risk of heart disease
        else:
            if nodes[2]:
                if nodes[3]:
                    prediction = 1  # High risk of heart disease
                else:
                    prediction = 0  # Lower risk of heart disease
            else:
                if nodes[3]:
                    prediction = 0  # Lower risk of heart disease
                else:
                    prediction = 0  # Lower risk of heart disease

    return prediction, nodes
```

### Explanation of the decision tree:

- **`ca` (Number of major vessels colored by fluoroscopy)**: This is a key factor in determining heart disease. If more than 0 vessels are colored, it indicates a higher likelihood of heart disease.
  
- **`thal` (Thalassemia)**: If the patient has a reversible defect in thalassemia (thal == 3), this is a strong indicator of heart disease.
  
- **`oldpeak` (ST depression induced by exercise relative to rest)**: If the `oldpeak` value is greater than or equal to 2.0, it increases the likelihood of heart disease.
  
- **`age`**: Older age (greater than 50 years) is also a contributing factor to heart disease.

This decision tree uses 4 inner nodes and a depth of 4. The function returns a prediction (`0` for no heart disease, `1` for heart disease) and a list of boolean node conditions (1 if the condition is satisfied, 0 if not).

### Example usage:

```python
# Example input
X = {
    "age": 55,
    "sex": 1,
    "chest_pain": 0,
    "trestbps": 130,
    "chol": 250,
    "fbs": 1,
    "restecg": 2,
    "thalach": 170,
    "exang": 1,
    "oldpeak": 2.1,
    "slope": 2,
    "ca": 1,
    "thal": 3
}

# Predict using the decision tree
prediction, nodes = predict(X)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

In this example, the decision tree would evaluate the conditions and provide a prediction based on the input features.
