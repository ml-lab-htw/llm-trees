


Below is the Python function implementing the decision tree for predicting whether a patient has heart disease (`1 = yes`, `0 = no`). It adheres to the specified features and encodings, and returns both the prediction and a list of truth values for the decision tree nodes:

```python
def predict(X: dict):
    """
    Predicts whether a patient has heart disease based on input features.

    Parameters:
        X (dict): A dictionary containing the patient's features. Keys are:
            'age', 'sex', 'chest_pain', 'trestbps', 'chol', 'fbs', 'restecg', 
            'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal'

    Returns:
        prediction (int): 1 if heart disease, 0 otherwise.
        nodes (list): A list of binary (1/0) values representing whether the condition at each decision node was satisfied.
    """
    nodes = [None] * 3  # Initialize node truth values
    
    # Decision Tree Logic
    nodes[0] = X['chest_pain'] == 0  # First condition (Chest Pain Type = Asymptomatic)
    if nodes[0]:  # If 'chest_pain' is asymptomatic
        nodes[1] = X['exang'] == 2  # Second condition (Exercise Induced Angina = yes)
        if nodes[1]:
            prediction = 1  # Heart Disease (Yes)
        else:
            prediction = 0  # Heart Disease (No)
    else:  # If 'chest_pain' is not asymptomatic
        nodes[1] = X['thalach'] <= 150  # Second condition (Maximum Heart Rate Achieved <= 150 bpm)
        if nodes[1]:  # 'thalach' <= 150 bpm
            nodes[2] = X['oldpeak'] > 1.8  # Third condition (ST Depression > 1.8)
            if nodes[2]:
                prediction = 1  # Heart Disease (Yes)
            else:
                prediction = 0  # Heart Disease (No)
        else:  # 'thalach' > 150 bpm
            prediction = 0  # Heart Disease (No)
    
    return prediction, nodes
```

### Explanation of Conditions:
1. **First Node:** `X['chest_pain'] == 0`  
   If the chest pain type is "Asymptomatic" (type 0), it’s strongly indicative of heart disease. The tree first checks for this.

2. **Second Node:**  
   - In the "Asymptomatic" branch: `X['exang'] == 2`  
     If the patient has Exercise Induced Angina (value = 2), they're likely to have heart disease.
   - In the non-"Asymptomatic" branch: `X['thalach'] <= 150`  
     A lower maximum heart rate achieved during exercise (≤ 150 bpm) can indicate poor cardiac health.

3. **Third Node:** `X['oldpeak'] > 1.8`  
   ST Depression induced by exercise (oldpeak) greater than 1.8 is a strong indicator of ischemia (oxygen deficiency in heart tissues), so we classify the patient as having heart disease.

---

### Example Usage:

```python
# Example Input
X = {
    'age': 62,
    'sex': 'male',
    'chest_pain': 0,  # Asymptomatic
    'trestbps': 140,
    'chol': 268,
    'fbs': 1,
    'restecg': 2,
    'thalach': 120,
    'exang': 2,  # yes
    'oldpeak': 2.5,
    'slope': 2,
    'ca': 1,
    'thal': 2
}

# Make Prediction
prediction, nodes = predict(X)

# Output Results
print("Prediction:", "Yes" if prediction == 1 else "No")  # Prediction: Yes
print("Nodes:", nodes)  # Nodes: [1, 1, None]
```

### Example Explanation:
Here’s how the input example works:
- `X['chest_pain'] == 0` (True → `nodes[0] = 1`).
- `X['exang'] == 2` (True → `nodes[1] = 1`).
- Since the first two conditions classify the patient as having heart disease, we don’t evaluate the final node (`nodes[2] = None`).

This decision tree efficiently predicts whether the patient has heart disease (Yes = 1, No = 0).