


Certainly! Here is a Python function that represents the decision tree with a maximum depth of 2 for predicting whether a patient has heart disease or not. This function also tracks which inner nodes conditions are satisfied.

```python
def predict(X: dict):
    # Initialize list to store truth values of inner nodes (conditions)
    nodes = 2 * [None]

    # Check the first condition: Chest Pain Type
    nodes[0] = X['chest_pain'] == 3  # Typical angina

    if nodes[0]:  # Typical angina
        prediction = 0  # No Heart Disease
    else:  # Other types of chest pain
        # Check the second condition: Maximum Heart Rate Achieved
        nodes[1] = X['thalach'] <= 140
        
        if nodes[1]:
            prediction = 1  # Heart Disease
        else:
            prediction = 0  # No Heart Disease

    return prediction, nodes

# Example input for validation
example_input = {
    'age': 45, 
    'sex': 'male', 
    'chest_pain': 0,  # Asymptomatic
    'trestbps': 130, 
    'chol': 250, 
    'fbs': 1, 
    'restecg': 2,  # Normal
    'thalach': 150, 
    'exang': 1, 
    'oldpeak': 2.3, 
    'slope': 2, 
    'ca': 0, 
    'thal': 2  # Normal
}

# Example usage
prediction, node_conditions = predict(example_input)
print(f"Prediction: {prediction}, Node Conditions: {node_conditions}")
```

This function works as follows:

1. **Nodes Initialization:** The `nodes` list is initialized to store the boolean results of the inner conditions.
2. **First Condition:** It checks if the `chest_pain` type is `3` (Typical angina). If true, it sets the first entry of `nodes` to `True` and predicts `0` (No Heart Disease).
3. **Second Condition:** If the first condition is false, it checks the second condition, which is whether the `thalach` (maximum heart rate achieved) is less than or equal to `140`. Based on this check, it updates the second entry in the `nodes` list and assigns the corresponding prediction.
4. **Return Values:** It returns the prediction and the list of node conditions.

This code handles the specified feature encodings and thresholds and demonstrates how the decision tree works with specified inputs.