


Here is the required function to predict whether a patient has heart disease, formatted similarly to the examples you provided:

```python
def predict(X: dict):
    nodes = 6 * [None]
    
    nodes[0] = X["chest_pain"] == 0
    nodes[1] = X["exang"] == 2
    nodes[2] = X["ca"] == 0
    nodes[3] = X["age"] <= 50
    nodes[4] = X["thalach"] <= 120
    nodes[5] = X["slope"] == 2

    if nodes[0]:
        prediction = 1  # Heart Disease
    else:
        if nodes[1]:
            prediction = 1  # Heart Disease
        else:
            if nodes[2]:
                if nodes[3]:
                    prediction = 0  # No Heart Disease
                else:
                    prediction = 1  # Heart Disease
            else:
                if nodes[5]:
                    if nodes[4]:
                        prediction = 1  # Heart Disease
                    else:
                        prediction = 0  # No Heart Disease
                else:
                    prediction = 0  # No Heart Disease
    
    return prediction, nodes

# Example usage:
# X = {
#     "age": 45,
#     "sex": "male",
#     "chest_pain": 2,
#     "trestbps": 130,
#     "chol": 250,
#     "fbs": 1,
#     "restecg": 3,
#     "thalach": 150,
#     "exang": 1,
#     "oldpeak": 2.3,
#     "slope": 3,
#     "ca": 0,
#     "thal": 2
# }

# prediction, nodes = predict(X)
# print("Prediction:", prediction)
# print("Nodes:", nodes)
```

In this function, `nodes` list represents the truth values of the inner nodes of the decision tree. Each condition checks a specific feature according to the decision tree we constructed earlier. The function returns a prediction of whether the patient has heart disease (`1` for yes, `0` for no) and the list of truth values for the inner nodes of the tree. 

When using the function, you can pass a dictionary `X` containing the features with exact keys and spelling specified.
