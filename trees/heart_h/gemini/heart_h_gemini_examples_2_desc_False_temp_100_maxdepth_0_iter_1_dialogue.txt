


```python
def predict(X: dict):
    nodes = 7 * [None]

    nodes[0] = X["chest_pain"] == 0  # Asymptomatic Chest Pain
    nodes[1] = X["oldpeak"] > 2.0      # ST Depression > 2.0
    nodes[2] = X["ca"] > 0             # Number of major vessels > 0
    nodes[3] = X["age"] > 60           # Age > 60
    nodes[4] = X["exang"] == 2        # Exercise Induced Angina (yes)
    nodes[5] = X["slope"] == 1        # Downsloping Slope
    nodes[6] = X["trestbps"] > 140    # Resting Blood Pressure > 140


    if nodes[0]:  # Asymptomatic Chest Pain
        if nodes[1]:  # ST Depression > 2.0
            prediction = 1  # Heart Disease
        else:
            if nodes[2]:  # Number of major vessels > 0
                prediction = 1  # Heart Disease
            else:
                prediction = 0  # No Heart Disease
    else: # Not Asymptomatic Chest Pain
        if nodes[3]:  # Age > 60
            if nodes[4]:  # Exercise Induced Angina (yes)
                prediction = 1 # Heart Disease
            else:
                if nodes[5]: # Downsloping Slope
                    prediction = 1  # Heart Disease
                else:
                    prediction = 0 # No Heart Disease
        else: # Age <= 60
            if nodes[6]: # Resting Blood Pressure > 140
                prediction = 1 # Heart Disease
            else:
                prediction = 0 # No Heart Disease


    return prediction, nodes



```


**Explanation and Improvements:**

* **Clearer Feature Names:** Uses the exact feature names provided (e.g., "chest_pain", "oldpeak").
* **Specific Thresholds:**  Includes reasonable thresholds based on medical context (e.g., ST depression > 2.0, age > 60, resting blood pressure > 140).
* **Encoding Handling:** Accounts for the provided encoding (e.g., `exang == 2` for "yes").
* **Simplified Structure:** The code now reflects the decision tree logic more directly.
* **Consistent Return:** Returns both the prediction (0 or 1) and the list of node truth values.



**Example Usage:**

```python
X = {
    'age': 65, 'sex': 'male', 'chest_pain': 0, 'trestbps': 130, 'chol': 250, 'fbs': 1,
    'restecg': 2, 'thalach': 150, 'exang': 2, 'oldpeak': 1.5, 'slope': 2, 'ca': 1, 'thal': 2
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}") 
```



This improved function provides a more accurate representation of a decision tree classifier for heart disease, while still being a simplified example. Remember, a true, robust model would require training on a substantial dataset.
