


```python
def predict(X: dict):
    """
    Predicts the presence of heart disease based on patient features.

    This function implements a simplified decision tree with a depth of 2. 
    The tree uses 'chest_pain' and 'thalach' features for prediction.

    Args:
        X (dict): A dictionary containing patient features.
            Keys: 'age', 'sex', 'chest_pain', 'trestbps', 'chol', 'fbs', 
                  'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal'

    Returns:
        tuple: A tuple containing:
            - prediction (int): 1 if heart disease is predicted, 0 otherwise.
            - nodes (list): A list representing the truth values of inner nodes.
                            1 if the condition is satisfied, 0 otherwise.
    """

    nodes = 2 * [None]
    nodes[0] = X["chest_pain"] == 3  # Typical angina
    nodes[1] = X["thalach"] <= 120   # Threshold for Max Heart Rate

    if nodes[0]:  # Typical angina
        if nodes[1]:  # Low Max Heart Rate
            prediction = 1  # Higher risk
        else: 
            prediction = 0  # Medium risk
    else:  # Other chest pain types
        if nodes[1]:  # Low Max Heart Rate
            prediction = 1  # Medium risk
        else:
            prediction = 0  # Lower risk

    return prediction, nodes

```

**Explanation:**

1. **Function Definition:** The `predict(X)` function takes a dictionary `X` containing patient features as input.
2. **Node Initialization:** A list `nodes` is initialized with two `None` values, representing the truth values of the two inner nodes in our depth-2 tree.
3. **Node Evaluation:**
   - `nodes[0]` checks if the patient has "Typical angina" (`chest_pain` == 3).
   - `nodes[1]` checks if the "Maximum Heart Rate Achieved" (`thalach`) is less than or equal to 120 bpm.
4. **Decision Tree Logic:** The `if-else` statements implement the decision tree logic based on the truth values of the inner nodes. 
5. **Prediction:** Based on the decision path, the `prediction` is set to 1 (heart disease likely) or 0 (heart disease less likely).
6. **Return Values:** The function returns both the `prediction` and the `nodes` list.

**Important Notes:**

* **Simplified Example:** This is a highly simplified example for demonstration. A real-world heart disease prediction model would require more complex logic, a larger set of features, and rigorous validation.
* **Thresholds:** The chosen thresholds (e.g., `thalach` <= 120) are for illustrative purposes only and should not be interpreted as medically accurate.
* **Consult Professionals:** This code is for educational purposes only and should not be used for self-diagnosis or treatment. Always consult with qualified healthcare professionals for medical advice. 
