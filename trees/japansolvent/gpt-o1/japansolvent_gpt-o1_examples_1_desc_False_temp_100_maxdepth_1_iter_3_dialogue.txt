


Certainly! Based on the decision tree we've established, I'll provide you with a Python function that predicts whether a company is solvent or not. The function will use the exact feature keys you've provided and will return both the prediction and a list representing the truth values of the inner nodes.

---

### **Decision Tree Recap**

We are using the following feature:

- **WC/TA**: Working Capital / Total Assets

**Decision Rule:**

- **If** `WC/TA` **â‰¤ 0.0**, **then** the company is **Insolvent** (`0`).
- **Else**, the company is **Solvent** (`1`).

---

### **Python Function**

Here's the function formatted as per your instructions:

```python
def predict(X: dict):
    nodes = 1 * [None]
    nodes[0] = X["WC/TA"] <= 0.0

    if nodes[0]:
        prediction = 0  # Insolvent
    else:
        prediction = 1  # Solvent
    return prediction, nodes
```

---

### **Explanation**

- **Function Name:** `predict`
- **Input:** `X` is a dictionary containing the feature values. The keys must match exactly as:

  ```
  ['EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA']
  ```

- **Nodes List:** `nodes` is a list that will hold the truth value (`1` or `0`) of the inner node condition.
  - We initialize it with one `None` value since we have only one decision node.

- **Node Condition:**
  - `nodes[0] = X["WC/TA"] <= 0.0`
    - **If** `X["WC/TA"]` is less than or equal to `0.0`, `nodes[0]` is `True` (`1`).
    - **Else**, `nodes[0]` is `False` (`0`).

- **Prediction:**
  - **If** `nodes[0]` is `True` (`1`), the prediction is `0` (Insolvent).
  - **Else**, the prediction is `1` (Solvent).

- **Return Value:**
  - The function returns a tuple `(prediction, nodes)`.

---

### **Usage Example**

Here's how you might use this function:

```python
# Example input where the company has negative working capital
company_features = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.03,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.08,
    'NI/Sales': 0.05,
    'WC/TA': -0.1,  # Negative working capital
    'Equity/TL': 0.5,
    'Equity/TA': 0.4
}

prediction, nodes = predict(company_features)
print(f"Prediction: {prediction} (0 = Insolvent, 1 = Solvent)")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: 0 (0 = Insolvent, 1 = Solvent)
Nodes: [True]
```

---

### **Notes**

- **Threshold Selection:** The threshold value of `0.0` for `WC/TA` is meaningful because:
  - A `WC/TA` ratio less than or equal to `0.0` indicates that the company does not have enough current assets to cover its current liabilities, signaling potential insolvency.
  - A positive `WC/TA` suggests that the company has sufficient liquidity, indicating solvency.

- **Feature Importance:** We chose `WC/TA` as it is a strong indicator of a company's short-term financial health.

- **Target Variable Encoding:**
  - `0`: Insolvent
  - `1`: Solvent

---

### **Complete Code Example**

Below is the complete code including the function and an example usage:

```python
def predict(X: dict):
    nodes = 1 * [None]
    nodes[0] = X["WC/TA"] <= 0.0

    if nodes[0]:
        prediction = 0  # Insolvent
    else:
        prediction = 1  # Solvent
    return prediction, nodes

# Example usage
if __name__ == "__main__":
    # Sample company data
    company_features = {
        'EBIT/TA': 0.07,
        'NI/TC': 0.04,
        'Sales/TA': 1.5,
        'EBIT/Sales': 0.1,
        'NI/Sales': 0.06,
        'WC/TA': 0.05,  # Positive working capital
        'Equity/TL': 0.6,
        'Equity/TA': 0.5
    }

    prediction, nodes = predict(company_features)
    status = "Solvent" if prediction == 1 else "Insolvent"
    print(f"Prediction: {prediction} ({status})")
    print(f"Nodes: {nodes}")
```

---

### **Key Takeaways**

- **Exact Feature Keys:** Ensure that the input dictionary `X` uses the exact keys as specified, including case sensitivity and any special characters:
  ```
  ['EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA']
  ```

- **Single Decision Node:** Since the maximum depth of the tree is `1`, there is only one decision node evaluated.

- **Interpretability:** This simple model is highly interpretable, making it easy to understand and explain the prediction.

---

Please let me know if you need any further adjustments or explanations!