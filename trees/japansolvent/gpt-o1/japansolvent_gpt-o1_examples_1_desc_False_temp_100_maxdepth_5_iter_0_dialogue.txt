


```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Node 0: Equity/TL <= 1.0
    nodes[0] = 1 if X['Equity/TL'] <= 1.0 else 0
    
    # Node 1: EBIT/TA <= 0.03
    nodes[1] = 1 if X['EBIT/TA'] <= 0.03 else 0
    
    # Node 2: NI/Sales <= 0.02
    nodes[2] = 1 if X['NI/Sales'] <= 0.02 else 0
    
    # Node 3: WC/TA <= 0.00
    nodes[3] = 1 if X['WC/TA'] <= 0.00 else 0
    
    if nodes[0]:  # Equity/TL <= 1.0
        if nodes[1]:  # EBIT/TA <= 0.03
            prediction = 0  # Non-solvent
        else:  # EBIT/TA > 0.03
            if nodes[2]:  # NI/Sales <= 0.02
                prediction = 0  # Non-solvent
            else:  # NI/Sales > 0.02
                prediction = 1  # Solvent
    else:  # Equity/TL > 1.0
        if nodes[3]:  # WC/TA <= 0.00
            prediction = 0  # Non-solvent
        else:  # WC/TA > 0.00
            prediction = 1  # Solvent
    
    return prediction, nodes
```

**Explanation:**

This function follows the decision tree structure based on the features provided. Here's how it works:

- **Nodes Definition:**
  - `nodes[0]` corresponds to the condition `Equity/TL <= 1.0`.
  - `nodes[1]` corresponds to the condition `EBIT/TA <= 0.03`.
  - `nodes[2]` corresponds to the condition `NI/Sales <= 0.02`.
  - `nodes[3]` corresponds to the condition `WC/TA <= 0.00`.

- **Predictive Logic:**
  - If `Equity/TL` is less than or equal to 1.0, we proceed to check `EBIT/TA`.
    - If `EBIT/TA` is less than or equal to 0.03, the company is predicted to be **non-solvent** (`0`).
    - If `EBIT/TA` is greater than 0.03, we check `NI/Sales`.
      - If `NI/Sales` is less than or equal to 0.02, the company is predicted to be **non-solvent** (`0`).
      - If `NI/Sales` is greater than 0.02, the company is predicted to be **solvent** (`1`).
  - If `Equity/TL` is greater than 1.0, we check `WC/TA`.
    - If `WC/TA` is less than or equal to 0.00, the company is predicted to be **non-solvent** (`0`).
    - If `WC/TA` is greater than 0.00, the company is predicted to be **solvent** (`1`).

- **Nodes List:**
  - The `nodes` list records the truth value of each condition (inner node) as `1` (True) or `0` (False).
  - This list can be used to trace the path taken in the decision tree for a given input.

**Example Usage:**

```python
# Sample input features
X = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.02,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.08,
    'NI/Sales': 0.03,
    'WC/TA': 0.01,
    'Equity/TL': 0.9,
    'Equity/TA': 0.45
}

prediction, nodes = predict(X)
print(f"Prediction: {'Solvent' if prediction == 1 else 'Non-solvent'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: Solvent
Nodes: [1, 0, 0, 1]
```

In this example:

- `Equity/TL` is 0.9 (<= 1.0), so `nodes[0]` is `1`.
- `EBIT/TA` is 0.05 (> 0.03), so `nodes[1]` is `0`.
- `NI/Sales` is 0.03 (> 0.02), so `nodes[2]` is `0`.
- Even though `nodes[3]` is evaluated, it doesn't affect the prediction in this path.

**Note:**

- Ensure that the feature names in your input dictionary `X` match exactly as specified.
- The target variable encoding is `1` for **solvent** and `0` for **non-solvent**.