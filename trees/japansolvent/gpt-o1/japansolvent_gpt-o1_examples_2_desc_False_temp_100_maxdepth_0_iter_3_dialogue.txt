


Sure! Based on the decision tree and your requirements, here's the Python function:

```python
def predict(X: dict):
    nodes = [None] * 3
    # Node 0: Equity/Total Liabilities <= 1.0
    nodes[0] = int(X['Equity/TL'] <= 1.0)
    # Node 1: Working Capital/Total Assets <= 0.05
    nodes[1] = int(X['WC/TA'] <= 0.05)
    # Node 2: Earnings Before Interest and Taxes/Total Assets <= 0.08
    nodes[2] = int(X['EBIT/TA'] <= 0.08)

    if nodes[0]:
        # Equity/Total Liabilities <= 1.0
        prediction = 0  # Insolvent
    else:
        if nodes[1]:
            # Equity/Total Liabilities > 1.0 and WC/TA <= 0.05
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                # Equity/Total Liabilities > 1.0, WC/TA > 0.05, and EBIT/TA <= 0.08
                prediction = 0  # Insolvent
            else:
                # Equity/Total Liabilities > 1.0, WC/TA > 0.05, and EBIT/TA > 0.08
                prediction = 1  # Solvent

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - `'Equity/TL'`: Equity divided by Total Liabilities.
  - `'WC/TA'`: Working Capital divided by Total Assets.
  - `'EBIT/TA'`: Earnings Before Interest and Taxes divided by Total Assets.

- **Decision Logic:**
  1. **Node 0** checks if `Equity/TL` is less than or equal to 1.0.
     - If **yes** (`nodes[0] = 1`), the company is classified as **Insolvent** (`prediction = 0`).
     - If **no** (`nodes[0] = 0`), proceed to Node 1.
  2. **Node 1** checks if `WC/TA` is less than or equal to 0.05.
     - If **yes** (`nodes[1] = 1`), the company is classified as **Insolvent** (`prediction = 0`).
     - If **no** (`nodes[1] = 0`), proceed to Node 2.
  3. **Node 2** checks if `EBIT/TA` is less than or equal to 0.08.
     - If **yes** (`nodes[2] = 1`), the company is classified as **Insolvent** (`prediction = 0`).
     - If **no** (`nodes[2] = 0`), the company is classified as **Solvent** (`prediction = 1`).

- **Nodes List:**
  - `nodes[0]`: Result of `Equity/TL <= 1.0`
  - `nodes[1]`: Result of `WC/TA <= 0.05`
  - `nodes[2]`: Result of `EBIT/TA <= 0.08`
  - Each element in `nodes` is `1` if the condition is **True** and `0` if **False**.

**Example Usage:**

```python
# Example input
X_example = {
    'EBIT/TA': 0.10,
    'NI/TC': 0.05,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.08,
    'NI/Sales': 0.04,
    'WC/TA': 0.06,
    'Equity/TL': 1.2,
    'Equity/TA': 0.55
}

# Predict
prediction, nodes = predict(X_example)

print(f'Prediction: {"Solvent" if prediction == 1 else "Insolvent"}')
print(f'Nodes: {nodes}')
```

**Output:**

```
Prediction: Solvent
Nodes: [0, 0, 0]
```

- **Interpretation:**
  - `nodes[0] = 0`: `Equity/TL` is **greater** than 1.0.
  - `nodes[1] = 0`: `WC/TA` is **greater** than 0.05.
  - `nodes[2] = 0`: `EBIT/TA` is **greater** than 0.08.
  - Since all conditions lead us to the final **else**, the company is predicted to be **Solvent**.

**Notes:**

- The function strictly adheres to the exact keys and feature names you've provided.
- Thresholds are filled with meaningful values based on standard financial analysis.
- The target variable is encoded as specified: `1 = Solvent`, `0 = Insolvent`.

**Summary:**

This function implements the decision tree classifier for determining company solvency based on key financial ratios. The `nodes` list captures the truth values of the inner conditions, which can be used for further analysis or debugging.