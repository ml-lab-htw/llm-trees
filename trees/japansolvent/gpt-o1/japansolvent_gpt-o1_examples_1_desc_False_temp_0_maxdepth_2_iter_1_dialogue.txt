


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary of financial ratios.

    Returns:
        tuple: A tuple containing the prediction (0 or 1) and a list of truth values for inner nodes.
    """
    nodes = 2 * [None]

    nodes[0] = X["NI/TC"] <= 0.02  # ROA threshold set to 2%
    nodes[1] = X["Equity/TL"] <= 1.0  # Equity/Liabilities threshold set to 1

    if nodes[0]:
        prediction = 0  # Insolvent (Low or negative ROA)
    else:  # Positive ROA
        if nodes[1]:
            prediction = 0  # Insolvent (Positive ROA but high leverage)
        else:
            prediction = 1  # Solvent (Positive ROA and lower leverage)

    return prediction, [int(node) for node in nodes]


# Example usage:

example_company1 = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.03,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.04,
    'NI/Sales': 0.025,
    'WC/TA': 0.2,
    'Equity/TL': 0.8,
    'Equity/TA': 0.44
}

prediction1, nodes1 = predict(example_company1)
print(f"Prediction for company 1: {prediction1}")
print(f"Nodes for company 1: {nodes1}")

example_company2 = {
    'EBIT/TA': 0.10,
    'NI/TC': 0.07,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.067,
    'NI/Sales': 0.047,
    'WC/TA': 0.3,
    'Equity/TL': 2.5,
    'Equity/TA': 0.71
}

prediction2, nodes2 = predict(example_company2)
print(f"Prediction for company 2: {prediction2}")
print(f"Nodes for company 2: {nodes2}")



```



**Explanation and Improvements:**

* **Threshold Values:** I've set more realistic threshold values: 2% for `NI/TC` and 1.0 for `Equity/TL`.  These are still examples, and optimal thresholds would depend on the data.
* **Clearer Logic:** The code now directly reflects the decision tree logic, making it easier to understand.
* **Type Conversion for Nodes:** The `nodes` list is now explicitly converted to integers (0 or 1) to match the requested format.
* **Example Usage:** The included examples demonstrate how to use the function and interpret the output.
* **Docstrings:** A docstring is added to explain the function's purpose, arguments, and return values.


This improved version provides a functional Python implementation of the solvency prediction decision tree, including meaningful threshold values and example usage. Remember, a real-world application would require training on a relevant dataset to determine the best features and thresholds.
