


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary of financial ratios.

    Returns:
        tuple: A tuple containing the prediction (0 for insolvent, 1 for solvent)
               and a list representing the truth values of the inner nodes.
    """
    nodes = 2 * [None]

    # Thresholds chosen based on common interpretations of financial ratios.
    # These are illustrative and would be learned from data in a real model.
    nodes[0] = X["EBIT/TA"] > 0.05  # Positive EBIT/TA suggests profitability
    nodes[1] = X["Equity/TL"] > 1.0  # Equity/TL > 1 indicates more equity than liabilities

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Solvent: Profitable and good equity position
        else:
            prediction = 0  # Insolvent: Profitable but high debt
    else:
        prediction = 0  # Insolvent: Not profitable

    nodes = [1 if node else 0 for node in nodes] # convert boolean to integer
    return prediction, nodes


# Example usage
example_features = {
    'EBIT/TA': 0.10,
    'NI/TC': 0.08,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.067,
    'NI/Sales': 0.053,
    'WC/TA': 0.2,
    'Equity/TL': 1.2,
    'Equity/TA': 0.6
}

prediction, node_values = predict(example_features)
print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Solvent)
print(f"Node values: {node_values}") # Output: Node values: [1, 1]


example_features = {
    'EBIT/TA': 0.10,
    'NI/TC': 0.08,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.067,
    'NI/Sales': 0.053,
    'WC/TA': 0.2,
    'Equity/TL': 0.8,
    'Equity/TA': 0.6
}

prediction, node_values = predict(example_features)
print(f"Prediction: {prediction}")  # Output: Prediction: 0 (Insolvent)
print(f"Node values: {node_values}") # Output: Node values: [1, 0]



example_features = {
    'EBIT/TA': 0.03,
    'NI/TC': 0.08,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.067,
    'NI/Sales': 0.053,
    'WC/TA': 0.2,
    'Equity/TL': 0.8,
    'Equity/TA': 0.6
}

prediction, node_values = predict(example_features)
print(f"Prediction: {prediction}")  # Output: Prediction: 0 (Insolvent)
print(f"Node values: {node_values}") # Output: Node values: [0, 0] (The second value is irrelevant because it's not reached)


```

This code now includes meaningful threshold values (0.05 for `EBIT/TA` and 1.0 for `Equity/TL`), clear comments explaining the logic, and the conversion of boolean node values to integers (0 or 1). It also includes example usages demonstrating how different input features lead to different predictions and node values.  Remember to adapt these thresholds based on analysis of real-world data.
