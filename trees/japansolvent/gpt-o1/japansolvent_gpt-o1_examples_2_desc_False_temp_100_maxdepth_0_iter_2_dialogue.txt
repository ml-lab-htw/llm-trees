


Certainly! Based on the decision tree and the features you've provided, here's a Python function that returns a prediction of whether a company is solvent (`1`) or not solvent (`0`) and a list representing the truth values of the inner nodes.

**Python Function:**

```python
def predict(X: dict):
    nodes = [None] * 3
    nodes[0] = X['EBIT/TA'] <= 0.05  # Node 0: Earnings Before Interest and Taxes/Total Assets <= 0.05
    nodes[1] = X['WC/TA'] <= 0.10    # Node 1: Working Capital/Total Assets <= 0.10
    nodes[2] = X['Equity/TL'] <= 1.5 # Node 2: Equity/Total Liabilities <= 1.5

    if nodes[0]:
        prediction = 0  # Not Solvent
    else:
        if nodes[1]:
            prediction = 0  # Not Solvent
        else:
            if nodes[2]:
                prediction = 0  # Not Solvent
            else:
                prediction = 1  # Solvent

    # Convert boolean node values to integers (1 if condition is satisfied, 0 otherwise)
    nodes = [1 if node else 0 for node in nodes]

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - `'EBIT/TA'`: Earnings Before Interest and Taxes / Total Assets
  - `'WC/TA'`: Working Capital / Total Assets
  - `'Equity/TL'`: Equity / Total Liabilities

- **Decision Tree Logic:**

  1. **Node 0:** Check if `EBIT/TA` ≤ 0.05
     - If **Yes** (`nodes[0] = 1`), predict **Not Solvent** (`prediction = 0`).
     - If **No** (`nodes[0] = 0`), proceed to Node 1.
  
  2. **Node 1:** Check if `WC/TA` ≤ 0.10
     - If **Yes** (`nodes[1] = 1`), predict **Not Solvent** (`prediction = 0`).
     - If **No** (`nodes[1] = 0`), proceed to Node 2.
  
  3. **Node 2:** Check if `Equity/TL` ≤ 1.5
     - If **Yes** (`nodes[2] = 1`), predict **Not Solvent** (`prediction = 0`).
     - If **No** (`nodes[2] = 0`), predict **Solvent** (`prediction = 1`).

- **Nodes List:**
  - Each entry in the `nodes` list represents the truth value of the corresponding condition:
    - `1` if the condition is satisfied.
    - `0` if the condition is not satisfied.

**Usage Example:**

Let's test the function with sample data.

```python
# Example 1: Company likely Not Solvent
X1 = {
    'EBIT/TA': 0.03,  # Low profitability
    'WC/TA': 0.12,    # Adequate liquidity
    'Equity/TL': 1.8  # Strong equity base
}

prediction1, nodes1 = predict(X1)
print(f"Prediction: {prediction1}")  # Output: Prediction: 0 (Not Solvent)
print(f"Nodes: {nodes1}")            # Output: Nodes: [1, 0, 0]

# Example 2: Company likely Solvent
X2 = {
    'EBIT/TA': 0.08,  # Good profitability
    'WC/TA': 0.15,    # Good liquidity
    'Equity/TL': 2.0  # Strong equity base
}

prediction2, nodes2 = predict(X2)
print(f"Prediction: {prediction2}")  # Output: Prediction: 1 (Solvent)
print(f"Nodes: {nodes2}")            # Output: Nodes: [0, 0, 0]

# Example 3: Company with liquidity issues
X3 = {
    'EBIT/TA': 0.06,  # Adequate profitability
    'WC/TA': 0.08,    # Low liquidity
    'Equity/TL': 1.4  # Moderate equity base
}

prediction3, nodes3 = predict(X3)
print(f"Prediction: {prediction3}")  # Output: Prediction: 0 (Not Solvent)
print(f"Nodes: {nodes3}")            # Output: Nodes: [0, 1, 0]
```

**Understanding the Outputs:**

- **Example 1 Analysis:**

  - **Node 0:** `EBIT/TA` (0.03) ≤ 0.05 → **True** (`nodes[0] = 1`)
    - Prediction: **Not Solvent** (`prediction = 0`)
  - Nodes: `[1, 0, 0]`

- **Example 2 Analysis:**

  - **Node 0:** `EBIT/TA` (0.08) ≤ 0.05 → **False** (`nodes[0] = 0`)
  - **Node 1:** `WC/TA` (0.15) ≤ 0.10 → **False** (`nodes[1] = 0`)
  - **Node 2:** `Equity/TL` (2.0) ≤ 1.5 → **False** (`nodes[2] = 0`)
    - Prediction: **Solvent** (`prediction = 1`)
  - Nodes: `[0, 0, 0]`

- **Example 3 Analysis:**

  - **Node 0:** `EBIT/TA` (0.06) ≤ 0.05 → **False** (`nodes[0] = 0`)
  - **Node 1:** `WC/TA` (0.08) ≤ 0.10 → **True** (`nodes[1] = 1`)
    - Prediction: **Not Solvent** (`prediction = 0`)
  - Nodes: `[0, 1, 0]`

**Feature Descriptions:**

- **EBIT/TA**: Earnings Before Interest and Taxes divided by Total Assets. Measures operational profitability relative to total assets.
- **WC/TA**: Working Capital divided by Total Assets. Assesses short-term liquidity.
- **Equity/TL**: Equity divided by Total Liabilities. Indicates the proportion of assets financed by shareholders versus creditors.

**Target Variable Encoding:**

- **`prediction = 1`**: Company is **Solvent**.
- **`prediction = 0`**: Company is **Not Solvent**.

**Note:** The threshold values used in the conditions are based on common financial analysis practices. They can be adjusted based on historical data for better accuracy.

**How to Use the Function:**

1. Prepare a dictionary `X` with the exact keys as specified and their corresponding values.
2. Call the `predict` function with `X` as the argument.
3. The function returns:
   - `prediction`: The predicted class (1 for Solvent, 0 for Not Solvent).
   - `nodes`: A list of integers representing the truth values of the inner nodes.

**Example:**

```python
# Define the feature values for a company
X = {
    'EBIT/TA': 0.07,
    'WC/TA': 0.05,
    'Equity/TL': 1.2
}

# Get the prediction and node values
prediction, nodes = predict(X)

# Output the results
status = "Solvent" if prediction == 1 else "Not Solvent"
print(f"The company is predicted to be: {status}")
print(f"Node Conditions: {nodes}")
```

**Output:**

```
The company is predicted to be: Not Solvent
Node Conditions: [0, 1, 1]
```

- **Interpretation:**
  - The company is predicted to be **Not Solvent** because:
    - While it has adequate profitability (`EBIT/TA` > 0.05, so `nodes[0] = 0`), it fails the liquidity test (`WC/TA` ≤ 0.10, so `nodes[1] = 1`).
    - Additionally, its leverage is higher than desired (`Equity/TL` ≤ 1.5, so `nodes[2] = 1`).

**Remember:** Always ensure that the keys in your input dictionary match exactly with the feature names provided, including capitalization and special characters.

---

Feel free to adjust the threshold values or expand the tree with more conditions based on additional data or specific requirements.