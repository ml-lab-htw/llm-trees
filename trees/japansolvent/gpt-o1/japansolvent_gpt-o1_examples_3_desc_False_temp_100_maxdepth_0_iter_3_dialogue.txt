


**Features and Their Keys:**

- `'EBIT/TA'`: Earnings Before Interest and Taxes / Total Assets
- `'NI/TC'`: Net Income / Total Capital
- `'Sales/TA'`: Sales / Total Assets
- `'EBIT/Sales'`: Earnings Before Interest and Taxes / Sales
- `'NI/Sales'`: Net Income / Sales
- `'WC/TA'`: Working Capital / Total Assets
- `'Equity/TL'`: Equity / Total Liabilities
- `'Equity/TA'`: Equity / Total Assets

**Target Variable:**

- `company is solvent` (1 = solvent, 0 = insolvent)

**Decision Tree:**

```
|--- Equity/TA <= 0.35
|    |--- class: 0 (Insolvent)
|--- Equity/TA > 0.35
|    |--- class: 1 (Solvent)
```

**Python Function:**

```python
def predict(X: dict):
    nodes = [None]  # List to store the truth values of inner nodes
    nodes[0] = 1 if X['Equity/TA'] <= 0.35 else 0

    if nodes[0]:
        prediction = 0  # Insolvent
    else:
        prediction = 1  # Solvent
    return prediction, nodes
```

This function takes a dictionary `X` containing the features with their exact keys. It evaluates the condition in the decision tree and returns:

- `prediction`: An integer (0 or 1) indicating whether the company is insolvent or solvent.
- `nodes`: A list containing 1 if the condition is satisfied or 0 otherwise.

**Example Usage:**

```python
# Example input features
X = {
    'EBIT/TA': 0.08,
    'NI/TC': 0.05,
    'Sales/TA': 0.6,
    'EBIT/Sales': 0.1,
    'NI/Sales': 0.08,
    'WC/TA': 0.2,
    'Equity/TL': 1.5,
    'Equity/TA': 0.4
}

prediction, nodes = predict(X)
print(f'Prediction: {prediction}')  # Output: Prediction: 1
print(f'Nodes: {nodes}')            # Output: Nodes: [0]
```

**Explanation:**

- Since `X['Equity/TA']` is 0.4, which is greater than 0.35, `nodes[0]` is set to 0.
- The condition `nodes[0]` evaluates to `False`, so the prediction is `1` (Solvent).

**Note:**

- The decision tree has been simplified to match the target variable, which has only two classes: 0 (Insolvent) and 1 (Solvent).
- The intermediate class "Possibly Solvent" from the initial tree has been merged into "Solvent" for consistency with the target encoding.