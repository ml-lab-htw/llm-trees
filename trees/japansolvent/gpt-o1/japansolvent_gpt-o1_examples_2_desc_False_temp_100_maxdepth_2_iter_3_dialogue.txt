


Certainly! Based on the decision tree we've constructed earlier and following your specifications, here's the Python function that implements the decision tree classifier. This function takes a dictionary of features as input and returns the prediction along with a list of truth values for the inner nodes.

---

**Python Function:**

```python
def predict(X: dict):
    nodes = [None] * 2  # Initialize a list to store truth values of inner nodes

    # Node 0: Check if Equity/TL (Equity / Total Liabilities) <= 1.0
    nodes[0] = X["Equity/TL"] <= 1.0

    if nodes[0]:
        # If Equity/TL <= 1.0, predict Insolvent (0)
        prediction = 0
        nodes[1] = None  # No further nodes to evaluate
    else:
        # Node 1: Check if NI/Sales (Net Income / Sales) <= 0.05
        nodes[1] = X["NI/Sales"] <= 0.05

        if nodes[1]:
            # If NI/Sales <= 0.05, predict Insolvent (0)
            prediction = 0
        else:
            # If NI/Sales > 0.05, predict Solvent (1)
            prediction = 1

    return prediction, nodes
```

---

**Explanation:**

- **Input:** `X` is a dictionary where keys are the exact feature names, and values are the corresponding feature values for a company.
- **Output:** The function returns:
  - `prediction`: An integer where `1` indicates the company is **Solvent** and `0` indicates **Insolvent**.
  - `nodes`: A list containing the truth values (`True` or `False`) of the inner nodes in the decision tree.

**Feature Key Descriptions:**

- `"Equity/TL"`: Equity divided by Total Liabilities.
- `"NI/Sales"`: Net Income divided by Sales.

**Thresholds Used:**

- **Equity/TL ≤ 1.0:** Indicates higher leverage and potential financial risk.
- **NI/Sales ≤ 0.05:** Net Profit Margin of 5% or less may signal low profitability and potential insolvency risk.

---

**Usage Example:**

Suppose we have a company with the following financial ratios:

```python
company_data = {
    "EBIT/TA": 0.12,
    "NI/TC": 0.08,
    "Sales/TA": 1.5,
    "EBIT/Sales": 0.1,
    "NI/Sales": 0.06,
    "WC/TA": 0.2,
    "Equity/TL": 1.2,
    "Equity/TA": 0.55
}
```

We can predict the solvency status as follows:

```python
prediction, nodes = predict(company_data)
print(f"Prediction: {'Solvent' if prediction == 1 else 'Insolvent'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: Solvent
Nodes: [False, False]
```

---

**Note on Nodes List:**

- `nodes[0]`: Represents the truth value of the condition `Equity/TL ≤ 1.0`.
- `nodes[1]`: Represents the truth value of the condition `NI/Sales ≤ 0.05` (evaluated only if `nodes[0]` is `False`).
- If a node is not evaluated (because the previous condition was decisive), its value in the list is set to `None`.

---

**Important Considerations:**

- Ensure that all required features are present in the input dictionary `X` and that they use the exact keys as specified.
- The thresholds are based on financial analysis and are meaningful values that help in assessing the company's solvency.

**Remember:**

- **Solvent (1):** Company is financially stable.
- **Insolvent (0):** Company is at risk of not meeting its financial obligations.

---

Feel free to use this function with your data to classify companies based on their financial ratios!