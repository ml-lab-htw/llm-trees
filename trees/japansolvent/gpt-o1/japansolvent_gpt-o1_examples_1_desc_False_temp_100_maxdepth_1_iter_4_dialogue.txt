


Sure! Here's the decision tree formatted as a Python function:

```python
def predict(X: dict):
    nodes = [None] * 1  # Initialize a list for one inner node
    # Evaluate the condition for the inner node
    nodes[0] = 1 if X["Equity/TL"] <= 1.0 else 0
    # Make prediction based on the inner node
    if nodes[0]:
        prediction = 0  # Not Solvent
    else:
        prediction = 1  # Solvent
    return prediction, nodes
```

**Explanation:**

- **Feature Used:** `"Equity/TL"` (Equity divided by Total Liabilities)
- **Threshold:** `1.0`
  - If a company's Equity/Total Liabilities ratio is **less than or equal to 1.0**, it means the company's equity is not sufficient to cover its liabilities, indicating potential insolvency.
  - If the ratio is **greater than 1.0**, the company has more equity than liabilities, indicating solvency.
- **Nodes List:**
  - `nodes[0]`: Stores `1` if the condition `X["Equity/TL"] <= 1.0` is **True** (condition satisfied), else `0`.
- **Prediction:**
  - If `nodes[0]` is `1` (condition satisfied), the company is predicted as **Not Solvent** (`0`).
  - If `nodes[0]` is `0` (condition not satisfied), the company is predicted as **Solvent** (`1`).

**Usage Example:**

```python
# Sample company data
company_data = {
    'EBIT/TA': 0.15,
    'NI/TC': 0.10,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.08,
    'NI/Sales': 0.05,
    'WC/TA': 0.20,
    'Equity/TL': 0.8,  # Equity is less than total liabilities
    'Equity/TA': 0.45
}

# Make prediction
prediction, nodes = predict(company_data)

print("Prediction:", "Solvent" if prediction == 1 else "Not Solvent")
print("Nodes:", nodes)
```

**Output:**

```
Prediction: Not Solvent
Nodes: [1]
```

This function follows your specifications:

- It uses the exact keys of the features as provided.
- The decision is based on a meaningful threshold (`1.0`) for the `Equity/TL` ratio.
- It returns both the prediction and a list of node evaluations (`nodes`), where each entry is `1` if the condition is satisfied, and `0` otherwise.