


```python
def predict(X: dict):
    nodes = [None, None, None]  # List to store the truth values of the inner nodes
    nodes[0] = 1 if X['EBIT/TA'] <= 0.00 else 0
    if nodes[0]:
        # Node 0 condition is True: 'EBIT/TA' <= 0.00
        # Prediction: Insolvent
        prediction = 0
        nodes[1] = None  # Subsequent nodes are not evaluated
        nodes[2] = None
    else:
        # Node 0 condition is False: 'EBIT/TA' > 0.00
        nodes[1] = 1 if X['Equity/TL'] <= 0.50 else 0
        if nodes[1]:
            # Node 1 condition is True: 'Equity/TL' <= 0.50
            # Prediction: Insolvent
            prediction = 0
            nodes[2] = None
        else:
            # Node 1 condition is False: 'Equity/TL' > 0.50
            nodes[2] = 1 if X['NI/TC'] <= 0.05 else 0
            if nodes[2]:
                # Node 2 condition is True: 'NI/TC' <= 0.05
                # Prediction: Insolvent
                prediction = 0
            else:
                # Node 2 condition is False: 'NI/TC' > 0.05
                # Prediction: Solvent
                prediction = 1
    return prediction, nodes
```

**Explanation:**

- **Node 0:** Checks if `EBIT/TA` (Earnings Before Interest and Taxes / Total Assets) is less than or equal to 0.00.
  - If **True** (`nodes[0] = 1`), the company is classified as **Insolvent** (`prediction = 0`).
  - If **False** (`nodes[0] = 0`), proceed to **Node 1**.
  
- **Node 1:** Checks if `Equity/TL` (Equity / Total Liabilities) is less than or equal to 0.50.
  - If **True** (`nodes[1] = 1`), the company is classified as **Insolvent** (`prediction = 0`).
  - If **False** (`nodes[1] = 0`), proceed to **Node 2**.
  
- **Node 2:** Checks if `NI/TC` (Net Income / Total Capital) is less than or equal to 0.05.
  - If **True** (`nodes[2] = 1`), the company is classified as **Insolvent** (`prediction = 0`).
  - If **False** (`nodes[2] = 0`), the company is classified as **Solvent** (`prediction = 1`).

**Return Values:**

- `prediction`: The classification result (1 = Solvent, 0 = Insolvent).
- `nodes`: A list representing the truth values of the inner nodes:
  - `1` if the condition is satisfied.
  - `0` if the condition is not satisfied.
  - `None` if the node was not evaluated because a previous condition led to a prediction.

**Usage Example:**

```python
# Example input features
X_example = {
    'EBIT/TA': 0.02,
    'NI/TC': 0.06,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.1,
    'NI/Sales': 0.05,
    'WC/TA': 0.2,
    'Equity/TL': 0.6,
    'Equity/TA': 0.55
}

# Make a prediction
prediction, nodes = predict(X_example)

print("Prediction:", "Solvent" if prediction == 1 else "Insolvent")
print("Nodes:", nodes)
```

**Sample Output:**

```
Prediction: Solvent
Nodes: [0, 0, 0]
```

In this example:

- `nodes[0] = 0` because `EBIT/TA` (0.02) is not less than or equal to 0.00.
- `nodes[1] = 0` because `Equity/TL` (0.6) is not less than or equal to 0.50.
- `nodes[2] = 0` because `NI/TC` (0.06) is not less than or equal to 0.05.
- The company is predicted to be **Solvent** (`prediction = 1`).

**Note:** Please ensure that the input dictionary `X` contains all the required features with the exact keys as specified.