


Sure! Here's the Python function representing the decision tree classifier, following your instructions and using the exact feature names and target encoding provided:

```python
def predict(X: dict):
    nodes = [None] * 3  # Initialize list for node truth values

    # Evaluate conditions at each node
    nodes[0] = int(X['EBIT/TA'] <= 0.05)    # Node 0: EBIT/TA <= 0.05
    nodes[1] = int(X['WC/TA'] <= 0)         # Node 1: WC/TA <= 0
    nodes[2] = int(X['Equity/TL'] <= 1)     # Node 2: Equity/TL <= 1

    # Decision logic based on the decision tree
    if nodes[0]:  # If EBIT/TA <= 0.05
        prediction = 0  # Company is insolvent
    else:  # If EBIT/TA > 0.05
        if nodes[1]:  # If WC/TA <= 0
            prediction = 0  # Company is insolvent
        else:  # If WC/TA > 0
            if nodes[2]:  # If Equity/TL <= 1
                prediction = 0  # Company is insolvent
            else:  # If Equity/TL > 1
                prediction = 1  # Company is solvent

    return prediction, nodes
```

**Explanation:**

- **Feature Keys (Exact Spelling):**

  - `'EBIT/TA'`: Earnings Before Interest and Taxes / Total Assets
  - `'WC/TA'`: Working Capital / Total Assets
  - `'Equity/TL'`: Equity / Total Liabilities

- **Target Variable Encoding:**

  - `1`: Company is **Solvent**
  - `0`: Company is **Insolvent**

- **Nodes List:**

  - Each entry in the `nodes` list corresponds to the truth value of a condition in the decision tree.
  - The value is `1` if the condition is **satisfied** (True) and `0` if **not satisfied** (False).

- **Thresholds Used:**

  - **`EBIT/TA <= 0.05`**: A threshold of 5% for profitability relative to assets.
  - **`WC/TA <= 0`**: Indicates negative working capital (liquidity issues).
  - **`Equity/TL <= 1`**: Equity not exceeding liabilities (higher leverage risk).

**Usage Example:**

```python
# Example input data
X_example = {
    'EBIT/TA': 0.06,
    'NI/TC': 0.03,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.08,
    'NI/Sales': 0.05,
    'WC/TA': 0.1,
    'Equity/TL': 1.5,
    'Equity/TA': 0.6
}

# Make prediction
prediction, nodes = predict(X_example)

print(f"Prediction: {prediction} (1 = Solvent, 0 = Insolvent)")
print(f"Node Truth Values: {nodes}")
```

**Output:**

```
Prediction: 1 (1 = Solvent, 0 = Insolvent)
Node Truth Values: [0, 0, 0]
```

- In this example, the company is predicted to be **Solvent**.
- The node truth values indicate which conditions were met during the evaluation.

**Decision Path Explanation:**

1. **Node 0 (`EBIT/TA <= 0.05`):**

   - `X['EBIT/TA'] = 0.06`
   - Condition not satisfied (**False**), so `nodes[0] = 0`.

2. **Node 1 (`WC/TA <= 0`):**

   - `X['WC/TA'] = 0.1`
   - Condition not satisfied (**False**), so `nodes[1] = 0`.

3. **Node 2 (`Equity/TL <= 1`):**

   - `X['Equity/TL'] = 1.5`
   - Condition not satisfied (**False**), so `nodes[2] = 0`.

4. **Final Decision:**

   - Since all conditions lead to the rightmost leaf with `prediction = 1`, the company is predicted to be **Solvent**.

**Important Notes:**

- Ensure that **all required features** are present in the input dictionary `X`, with the exact keys as specified.
- The function uses **meaningful thresholds** based on typical financial analysis for solvency prediction.
- The `nodes` list provides insight into the decision-making process, indicating which conditions were critical in reaching the final prediction.

---

I hope this function meets your requirements and helps you classify companies based on their solvency!