


Sure! Here's the Python function representing the decision tree:

```python
def predict(X: dict):
    nodes = [None] * 4
    nodes[0] = X['Equity/TA'] <= 0.40       # Node 0
    nodes[1] = X['WC/TA'] <= 0.00           # Node 1
    nodes[2] = X['NI/TC'] <= 0.05           # Node 2
    nodes[3] = X['EBIT/TA'] <= 0.10         # Node 3

    if nodes[0]:  # Equity/TA <= 0.40
        if nodes[1]:  # WC/TA <= 0.00
            if nodes[2]:  # NI/TC <= 0.05
                prediction = 0  # Insolvent
            else:  # NI/TC > 0.05
                prediction = 1  # Solvent
        else:  # WC/TA > 0.00
            prediction = 1  # Solvent
    else:  # Equity/TA > 0.40
        if nodes[3]:  # EBIT/TA <= 0.10
            prediction = 0  # Insolvent
        else:  # EBIT/TA > 0.10
            prediction = 1  # Solvent

    return prediction, nodes
```

**Explanation:**

- **nodes[0]:** `Equity/TA <= 0.40`
- **nodes[1]:** `WC/TA <= 0.00`
- **nodes[2]:** `NI/TC <= 0.05`
- **nodes[3]:** `EBIT/TA <= 0.10`

**Usage Example:**

```python
# Sample input
X = {
    'EBIT/TA': 0.12,
    'NI/TC': 0.04,
    'Sales/TA': 0.8,
    'EBIT/Sales': 0.15,
    'NI/Sales': 0.05,
    'WC/TA': -0.01,
    'Equity/TL': 1.5,
    'Equity/TA': 0.35
}

# Make prediction
prediction, nodes = predict(X)

print(f"Prediction: {'Solvent' if prediction == 1 else 'Insolvent'}")
print(f"Node Values: {nodes}")
```

**Note:** This function follows the decision tree you provided, using the exact feature keys and thresholds. It returns the prediction and a list of boolean values indicating whether each node's condition is satisfied (`True`) or not (`False`).