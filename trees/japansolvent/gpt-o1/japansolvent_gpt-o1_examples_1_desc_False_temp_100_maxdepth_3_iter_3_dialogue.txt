


Here is the Python function implementing the decision tree:

```python
def predict(X: dict):
    nodes = [None] * 3  # Initialize a list to store truth values of inner nodes

    # Node 0: 'EBIT/TA' <= 0.05
    nodes[0] = int(X['EBIT/TA'] <= 0.05)

    # Node 1: 'NI/Sales' <= 0.00
    nodes[1] = int(X['NI/Sales'] <= 0.00)

    # Node 2: 'Equity/TL' <= 0.50
    nodes[2] = int(X['Equity/TL'] <= 0.50)

    # Decision logic based on the nodes
    if nodes[0]:  # If 'EBIT/TA' <= 0.05
        if nodes[1]:  # If 'NI/Sales' <= 0.00
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent
    else:
        if nodes[2]:  # If 'Equity/TL' <= 0.50
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - `'EBIT/TA'`: Earnings Before Interest and Taxes / Total Assets
  - `'NI/Sales'`: Net Income / Sales
  - `'Equity/TL'`: Equity / Total Liabilities

- **Nodes:**
  - `nodes[0]`: Checks if `'EBIT/TA'` is less than or equal to `0.05`
    - `1` if True, `0` if False
  - `nodes[1]`: Checks if `'NI/Sales'` is less than or equal to `0.00`
    - `1` if True, `0` if False
  - `nodes[2]`: Checks if `'Equity/TL'` is less than or equal to `0.50`
    - `1` if True, `0` if False

- **Decision Logic:**
  - **First Split:** Assess profitability relative to assets.
    - If `nodes[0]` is `1` (`'EBIT/TA'` ≤ `0.05`):
      - **Second Split (Left Branch):** Examine net profitability from sales.
        - If `nodes[1]` is `1` (`'NI/Sales'` ≤ `0.00`):
          - **Prediction:** `0` (Insolvent)
        - Else:
          - **Prediction:** `1` (Solvent)
    - Else (`nodes[0]` is `0`):
      - **Second Split (Right Branch):** Evaluate financial leverage.
        - If `nodes[2]` is `1` (`'Equity/TL'` ≤ `0.50`):
          - **Prediction:** `0` (Insolvent)
        - Else:
          - **Prediction:** `1` (Solvent)

- **Return Values:**
  - `prediction`: `1` if the company is **Solvent**, `0` if **Insolvent**
  - `nodes`: List containing `1` (True) or `0` (False) for each inner node condition

**Usage Example:**

```python
# Example input dictionary with feature values
X_example = {
    'EBIT/TA': 0.04,
    'NI/TC': 0.02,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.07,
    'NI/Sales': -0.01,
    'WC/TA': 0.1,
    'Equity/TL': 0.6,
    'Equity/TA': 0.4
}

# Get prediction and node values
prediction, nodes = predict(X_example)

print(f"Prediction: {'Solvent' if prediction == 1 else 'Insolvent'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: Insolvent
Nodes: [1, 1, 1]
```

**Notes:**

- Ensure that the input dictionary `X` contains all the required features with exact keys as specified:
  - `'EBIT/TA'`, `'NI/Sales'`, `'Equity/TL'`, etc.
- The thresholds (`0.05`, `0.00`, `0.50`) are based on meaningful financial ratios typical in solvency assessments.
- The function follows a maximum depth of 3, using the most important features to classify company solvency.