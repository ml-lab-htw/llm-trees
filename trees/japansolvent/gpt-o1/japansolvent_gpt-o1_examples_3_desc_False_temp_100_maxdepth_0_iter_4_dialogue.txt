


```python
def predict(X: dict):
    nodes = [None] * 5
    nodes[0] = X['Equity/TL'] <= 0.50
    nodes[1] = X['WC/TA'] <= 0.00
    nodes[2] = X['NI/TC'] <= 0.05
    nodes[3] = X['EBIT/TA'] <= 0.08
    nodes[4] = X['NI/Sales'] <= 0.05

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Not Solvent
        else:
            if nodes[2]:
                prediction = 0  # Not Solvent
            else:
                prediction = 1  # Solvent
    else:
        if nodes[3]:
            if nodes[4]:
                prediction = 0  # Not Solvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
    - `'Equity/TL'`: Equity divided by Total Liabilities.
    - `'WC/TA'`: Working Capital divided by Total Assets.
    - `'NI/TC'`: Net Income divided by Total Capital.
    - `'EBIT/TA'`: Earnings Before Interest and Taxes divided by Total Assets.
    - `'NI/Sales'`: Net Income divided by Sales.

- **Decision Nodes:**
    - `nodes[0]`: Checks if Equity/Total Liabilities is less than or equal to 0.50.
    - `nodes[1]`: Checks if Working Capital/Total Assets is less than or equal to 0.00.
    - `nodes[2]`: Checks if Net Income/Total Capital is less than or equal to 0.05.
    - `nodes[3]`: Checks if EBIT/Total Assets is less than or equal to 0.08.
    - `nodes[4]`: Checks if Net Income/Sales is less than or equal to 0.05.

- **Logic Flow:**
    - **If `Equity/TL` ≤ 0.50 (nodes[0]):**
        - **If `WC/TA` ≤ 0.00 (nodes[1]):**
            - **Prediction:** 0 (Not Solvent)
        - **Else (`WC/TA` > 0.00):**
            - **If `NI/TC` ≤ 0.05 (nodes[2]):**
                - **Prediction:** 0 (Not Solvent)
            - **Else (`NI/TC` > 0.05):**
                - **Prediction:** 1 (Solvent)
    - **Else (`Equity/TL` > 0.50):**
        - **If `EBIT/TA` ≤ 0.08 (nodes[3]):**
            - **If `NI/Sales` ≤ 0.05 (nodes[4]):**
                - **Prediction:** 0 (Not Solvent)
            - **Else (`NI/Sales` > 0.05):**
                - **Prediction:** 1 (Solvent)
        - **Else (`EBIT/TA` > 0.08):**
            - **Prediction:** 1 (Solvent)

- **Return Value:**
    - `prediction`: The classification result, where **1** indicates **Solvent** and **0** indicates **Not Solvent**.
    - `nodes`: A list of boolean values (1 for `True`, 0 for `False`) representing the truth values of the decision nodes.

**Usage Example:**

```python
# Sample input data
X = {
    'Equity/TL': 0.45,
    'WC/TA': -0.05,
    'NI/TC': 0.04,
    'EBIT/TA': 0.07,
    'NI/Sales': 0.06,
    'Sales/TA': 0.5,
    'EBIT/Sales': 0.1,
    'Equity/TA': 0.3
}

# Get prediction and node values
prediction, nodes = predict(X)

print(f"Prediction: {'Solvent' if prediction == 1 else 'Not Solvent'}")
print("Node Truth Values:", nodes)
```

**Explanation of Example:**

- **Input Values:**
    - `'Equity/TL'`: 0.45 (≤ 0.50, so `nodes[0]` is **True**)
    - `'WC/TA'`: -0.05 (≤ 0.00, so `nodes[1]` is **True**)
    - Since `nodes[0]` and `nodes[1]` are both **True**, the company is predicted **Not Solvent**.

- **Output:**
    - `Prediction: Not Solvent`
    - `Node Truth Values: [True, True, True, True, False]`

**Note:** All nodes are evaluated at the beginning, and their truth values are stored in the `nodes` list. This allows for easy tracing of the decision path taken for the prediction.