


```python
def predict(X: dict):
    nodes = [None] * 2
    nodes[0] = X["EBIT/TA"] <= 0.03
    nodes[1] = X["WC/TA"] <= 0.15 if not nodes[0] else None

    if nodes[0]:
        prediction = 0  # Not Solvent
    else:
        if nodes[1]:
            prediction = 0  # Not Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

**Explanation:**

- **Feature Keys:**
  - `"EBIT/TA"` corresponds to Earnings Before Interest and Taxes divided by Total Assets.
  - `"WC/TA"` corresponds to Working Capital divided by Total Assets.

- **Decision Tree Logic:**
  1. **First Node (`nodes[0]`):** Check if `EBIT/TA` is less than or equal to `0.03`.
     - If **Yes** (`nodes[0]` is `True`), the company is predicted to be **Insolvent** (`prediction = 0`).
     - If **No** (`nodes[0]` is `False`), proceed to the second node.
  2. **Second Node (`nodes[1]`):** Check if `WC/TA` is less than or equal to `0.15`.
     - If **Yes** (`nodes[1]` is `True`), the company is predicted to be **Insolvent** (`prediction = 0`).
     - If **No** (`nodes[1]` is `False`), the company is predicted to be **Solvent** (`prediction = 1`).

- **Nodes List:**
  - The `nodes` list captures the boolean evaluations of the inner nodes:
    - `nodes[0]` corresponds to the result of the first condition (`EBIT/TA` ≤ `0.03`).
    - `nodes[1]` corresponds to the result of the second condition (`WC/TA` ≤ `0.15`), evaluated only if `nodes[0]` is `False`.

**Usage Example:**

```python
# Example input data
X_example = {
    "EBIT/TA": 0.05,
    "NI/TC": 0.10,
    "Sales/TA": 1.2,
    "EBIT/Sales": 0.08,
    "NI/Sales": 0.05,
    "WC/TA": 0.20,
    "Equity/TL": 1.5,
    "Equity/TA": 0.6
}

# Make prediction
prediction, nodes = predict(X_example)
print(f"Prediction: {'Solvent' if prediction == 1 else 'Not Solvent'}")
print(f"Nodes evaluation: {nodes}")
```

**Note:** Ensure that the input dictionary `X` contains all the required keys with correct spelling and casing as specified:
- `'EBIT/TA'`
- `'WC/TA'`