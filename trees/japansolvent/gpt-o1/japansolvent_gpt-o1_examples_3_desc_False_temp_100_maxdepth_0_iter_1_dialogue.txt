


Certainly! Below is the Python function implementing the decision tree classifier for predicting whether a company is **solvent** (1) or **insolvent** (0), along with the list representing the truth values of the inner nodes.

**Features and Their Exact Keys:**

- **EBIT/TA**: Earnings Before Interest and Taxes / Total Assets
- **NI/TC**: Net Income / Total Capital
- **Sales/TA**: Sales / Total Assets
- **EBIT/Sales**: Earnings Before Interest and Taxes / Sales
- **NI/Sales**: Net Income / Sales
- **WC/TA**: Working Capital / Total Assets
- **Equity/TL**: Equity / Total Liabilities
- **Equity/TA**: Equity / Total Assets

**Target Variable:**

- **company is solvent**: (1 = solvent, 0 = insolvent)

**Decision Tree Function:**

```python
def predict(X: dict):
    nodes = [None] * 2  # Initialize list for truth values of inner nodes

    # Inner Node Conditions
    nodes[0] = X["WC/TA"] <= 0.0  # Node 0: Working Capital / Total Assets <= 0.0
    nodes[1] = X["NI/TC"] <= 0.0  # Node 1: Net Income / Total Capital <= 0.0

    # Decision Tree Logic
    if nodes[0]:
        prediction = 0  # Insolvent
    else:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent

    # Convert boolean conditions to integers (1 if True, 0 if False)
    nodes = [1 if condition else 0 for condition in nodes]

    return prediction, nodes
```

**Explanation:**

- **nodes[0]** corresponds to the first inner node condition:
  - `X["WC/TA"] <= 0.0`
  - Checks if the Working Capital to Total Assets ratio is less than or equal to zero.
- **nodes[1]** corresponds to the second inner node condition:
  - `X["NI/TC"] <= 0.0`
  - Checks if the Net Income to Total Capital ratio is less than or equal to zero.
- The **nodes** list will contain `1` if the condition is satisfied (True) and `0` otherwise (False).

**Usage Example:**

Suppose we have a company with the following financial ratios:

```python
company_data = {
    "EBIT/TA": 0.05,
    "NI/TC": -0.02,
    "Sales/TA": 1.0,
    "EBIT/Sales": 0.08,
    "NI/Sales": -0.02,
    "WC/TA": 0.1,
    "Equity/TL": 1.5,
    "Equity/TA": 0.6
}

prediction, nodes = predict(company_data)
print(f"Prediction: {prediction} (1 = Solvent, 0 = Insolvent)")
print(f"Inner Node Conditions: {nodes}")
```

**Output:**

```
Prediction: 0 (1 = Solvent, 0 = Insolvent)
Inner Node Conditions: [0, 1]
```

- **Interpretation:**
  - **nodes[0] = 0**: `WC/TA` is not less than or equal to 0.0 (condition not satisfied).
  - **nodes[1] = 1**: `NI/TC` is less than or equal to 0.0 (condition satisfied).
  - The company is predicted to be **Insolvent** (`0`) because it failed the profitability test.

**Note:**

- Ensure that the input dictionary `X` contains all the required keys with correct spelling and casing as specified.
- The thresholds used in the conditions are meaningful values based on financial analysis:
  - A `WC/TA` ratio ≤ 0.0 indicates potential liquidity issues.
  - A `NI/TC` ratio ≤ 0.0 indicates the company is not profitable.

---

This function provides a straightforward implementation of the decision tree classifier using the most critical financial ratios to assess a company's solvency.