


Here is the Python function that implements the decision tree:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X['Equity/TL'] <= 0.5
    nodes[1] = X['EBIT/TA'] <= 0.04
    nodes[2] = X['WC/TA'] <= -0.1
    nodes[3] = X['Equity/TA'] <= 0.4
    nodes[4] = X['NI/Sales'] <= 0.02

    if nodes[0]:  # Equity/TL <= 0.5
        if nodes[1]:  # EBIT/TA <= 0.04
            if nodes[2]:  # WC/TA <= -0.1
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent
    else:  # Equity/TL > 0.5
        if nodes[3]:  # Equity/TA <= 0.4
            if nodes[4]:  # NI/Sales <= 0.02
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    nodes = [int(n) for n in nodes]
    return prediction, nodes
```

This function takes a dictionary `X` with the following keys:

- `'EBIT/TA'`: Earnings Before Interest and Taxes / Total Assets
- `'NI/TC'`: Net Income / Total Capital
- `'Sales/TA'`: Sales / Total Assets
- `'EBIT/Sales'`: Earnings Before Interest and Taxes / Sales
- `'NI/Sales'`: Net Income / Sales
- `'WC/TA'`: Working Capital / Total Assets
- `'Equity/TL'`: Equity / Total Liabilities
- `'Equity/TA'`: Equity / Total Assets

It returns:

- `prediction`: The predicted class (1 = solvent, 0 = insolvent)
- `nodes`: A list of integers representing the truth values of the inner nodes (1 if the condition is satisfied, 0 otherwise)

**Example usage:**

```python
features = {
    'EBIT/TA': 0.03,
    'NI/TC': 0.05,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.08,
    'NI/Sales': 0.015,
    'WC/TA': -0.15,
    'Equity/TL': 0.4,
    'Equity/TA': 0.35
}

prediction, nodes = predict(features)
print("Prediction:", "Solvent" if prediction == 1 else "Insolvent")
print("Nodes:", nodes)
```

**Output:**

```
Prediction: Insolvent
Nodes: [1, 1, 1, 0, 0]
```