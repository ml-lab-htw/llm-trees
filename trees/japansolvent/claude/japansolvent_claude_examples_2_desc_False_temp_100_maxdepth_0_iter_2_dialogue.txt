


Based on the decision tree I created earlier and the specific feature names you provided, here's a Python function that predicts whether a company is solvent or not and returns the truth values of the inner nodes:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X['EBIT/TA'] <= 0.05
    nodes[1] = X['NI/TC'] <= 0.02
    nodes[2] = X['WC/TA'] <= 0.10
    nodes[3] = X['Equity/TA'] <= 0.30
    nodes[4] = X['Sales/TA'] <= 0.80

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:
        if nodes[3]:
            if nodes[4]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, [int(node) for node in nodes]
```

This function does the following:

1. It takes a dictionary `X` as input, where the keys are the feature names and the values are the corresponding feature values for a company.

2. It creates a list `nodes` to store the truth values of the inner nodes.

3. It evaluates each condition in the decision tree and stores the result (True or False) in the `nodes` list.

4. It then follows the decision tree structure to make a prediction:
   - 1 represents a solvent company
   - 0 represents an insolvent company

5. Finally, it returns a tuple containing:
   - The prediction (1 for solvent, 0 for insolvent)
   - A list of integer values (1 for True, 0 for False) representing the truth values of the inner nodes

This function adheres to the feature names you provided and uses the target encoding you specified (1 = solvent