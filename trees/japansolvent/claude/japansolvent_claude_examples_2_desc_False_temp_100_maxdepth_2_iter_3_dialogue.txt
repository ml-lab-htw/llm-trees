


Based on the decision tree I provided earlier and the instructions you've given, here's the Python function that implements the decision tree classifier for company solvency:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["NI/Sales"] <= 0.03  # Using NI/Sales instead of NI/TC as it's in the given feature list
    nodes[1] = X["WC/TA"] <= 0.15
    
    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent
    else:
        prediction = 1  # Solvent

    return prediction, nodes
```

Explanation:
1. The function takes a dictionary `X` as input, where the keys are the feature names.
2. We create a list `nodes` to store the truth values of the inner nodes.
3. The first node checks if NI/Sales (Net Income/Sales) is less than or equal to 0.03. We use this ratio instead of Net Income/Total Assets as it's in the given feature list and serves a similar purpose in assessing profitability.
4. The second node checks if WC/TA (Working Capital/Total Assets) is less than or equal to 0.15.
5. The prediction is made based on these conditions:
   - If NI/Sales <= 0.03 and WC/TA <= 0.15, the company is predicted as insolvent (0).
   - If NI/Sales <= 0.03 but WC/TA > 0.15, the company is predicted as solvent (1).
   - If NI/Sales > 0.03, the company is predicted as solvent (1) regardless of WC/TA.
6. The function returns the prediction (0 for insolvent, 1 for solvent) and the list of node truth values.

This implementation uses the exact keys provided in the feature list and follows the target variable encoding where 1 represents a solvent company and 0 represents an insolvent company.
