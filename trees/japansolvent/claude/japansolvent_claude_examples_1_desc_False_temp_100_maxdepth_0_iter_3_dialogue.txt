


Based on the provided features and typical financial ratios, here's the decision tree implemented as a Python function:

```python
def predict(X: dict):
    nodes = 5 * [None]  # Initialize list for 5 inner nodes
    
    # Define conditions for inner nodes using realistic threshold values
    nodes[0] = X['EBIT/TA'] <= 0.02  # Profitability threshold
    nodes[1] = X['WC/TA'] <= 0.10    # Liquidity threshold
    nodes[2] = X['Equity/TA'] <= 0.30  # Leverage threshold
    nodes[3] = X['Equity/TL'] <= 0.45  # Debt-to-equity threshold
    nodes[4] = X['NI/TC'] <= 0.01    # Return on capital threshold
    
    # Decision logic
    if nodes[0]:  # Low profitability
        if nodes[1]:  # Low working capital
            prediction = 0  # Insolvent
        else:  # Adequate working capital
            if nodes[2]:  # Low equity ratio
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:  # Adequate profitability
        if nodes[3]:  # High leverage
            if nodes[4]:  # Low return on capital
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent
    
    return prediction, nodes
```

This implementation:
- Takes a dictionary of features as input
- Uses realistic threshold values based on common financial benchmarks
- Returns both the prediction (1 for solvent, 0 for insolvent) and the list of boolean values for each inner node
- Uses the exact feature names provided
- Follows typical financial logic for solvency prediction

The thresholds are set to reasonable values:
- EBIT/TA: 0.02 (2% return on assets)
- WC/TA: 0.10 (10% working capital ratio)
-