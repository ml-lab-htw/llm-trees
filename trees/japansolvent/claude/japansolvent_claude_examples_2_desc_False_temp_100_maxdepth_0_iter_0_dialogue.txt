


Based on the provided information and requirements, I'll create a Python function that implements the decision tree for predicting company solvency. Here's the function:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X['EBIT/TA'] <= 0.05
    nodes[1] = X['WC/TA'] <= 0.10
    nodes[2] = X['Equity/TA'] <= 0.30
    nodes[3] = X['NI/TC'] <= 0.02
    nodes[4] = X['Sales/TA'] <= 0.75

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:
        if nodes[3]:
            if nodes[4]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

This function does the following:

1. It takes a dictionary `X` as input, where the keys are the feature names and the values are the corresponding feature values for a company.

2. It creates a list `nodes` to store the truth values of the inner nodes of the decision tree.

3. It evaluates each condition in the decision tree and stores the result (True or False) in the `nodes` list.

4. It then uses these conditions to navigate through the decision tree and make a prediction.

5. The function returns two values:
   - `prediction`: 1 if the company is predicted to be solvent, 0 if insolvent.
   - `nodes`: A list of boolean values representing the truth values of the inner nodes.

The thresholds used in this function are based on common financial ratios and general business knowledge:

- EBIT/TA <= 0.05: This is a low profitability threshold.
- WC/TA <= 0.10: This indicates very low