


Based on the decision tree I created earlier and the instructions you've provided, here's the Python function that predicts whether a company is solvent and returns the truth values of the inner nodes:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X['EBIT/TA'] <= 0.05
    nodes[1] = X['WC/TA'] <= 0.10
    nodes[2] = X['Equity/TA'] <= 0.40
    
    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent
    else:
        if nodes[2]:
            prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

Explanation:

1. The function takes a dictionary `X` as input, where the keys are the feature names.
2. We create a list `nodes` to store the truth values of the inner nodes.
3. The first condition checks if EBIT/TA is less than or equal to 0.05.
4. If true, we then check if WC/TA is less than or equal to 0.10.
5. If false, we check if Equity/TA is less than or equal to 0.40.
6. Based on these conditions, we make a prediction (1 for solvent, 0 for insolvent).
7. The function returns the prediction and the list of node truth values.

Note that this tree predicts a company as solvent in most cases. In a real-world scenario, you might want to adjust the thresholds or add more conditions for a more balanced prediction.