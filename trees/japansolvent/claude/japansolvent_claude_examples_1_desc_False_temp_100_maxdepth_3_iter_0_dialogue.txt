


Based on the provided features and the goal of predicting company solvency, here's the Python function implementing the decision tree:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Node 0: Primary split on EBIT/TA (profitability)
    nodes[0] = X['EBIT/TA'] <= 0.02
    
    # Node 1: Working capital position
    nodes[1] = X['WC/TA'] <= -0.10
    
    # Node 2: Leverage ratio
    nodes[2] = X['Equity/TL'] <= 0.30
    
    if nodes[0]:  # If low profitability
        if nodes[1]:  # If negative working capital
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent
    else:  # If higher profitability
        if nodes[2]:  # If low equity to liability ratio
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent
            
    return prediction, nodes
```

The thresholds are set based on common financial benchmarks:
- EBIT/TA: 0.02 (2% return on assets is a minimal profitability threshold)
- WC/TA: -0.10 (negative working capital above 10% of assets indicates serious liquidity issues)
- Equity/TL: 0.30 (equity covering less than 30% of liabilities indicates high leverage)

The function returns:
1. prediction: 1 for solvent, 0 for insolvent
2. nodes: list of boolean values indicating whether each condition was met