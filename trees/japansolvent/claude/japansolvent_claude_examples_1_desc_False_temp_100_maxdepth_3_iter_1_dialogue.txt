


Based on the provided features and target encoding, I'll create a prediction function for the decision tree I proposed earlier, using realistic threshold values for financial ratios:

```python
def predict(X: dict):
    nodes = 3 * [None]  # For three decision nodes
    
    # Decision nodes with realistic threshold values
    nodes[0] = X['EBIT/TA'] <= 0.025  # Profitability threshold
    nodes[1] = X['WC/TA'] <= -0.10    # Liquidity threshold
    nodes[2] = X['Equity/TA'] <= 0.15  # Leverage threshold
    
    if nodes[0]:  # Low profitability
        if nodes[1]:  # Poor working capital
            prediction = 0  # Insolvent
        else:  # Better working capital
            prediction = 1  # Solvent
    else:  # Better profitability
        if nodes[2]:  # Low equity ratio
            prediction = 0  # Insolvent
        else:  # Better equity ratio
            prediction = 1  # Solvent
    
    return prediction, nodes
```

This implementation:
- Uses the exact feature names provided
- Returns both the prediction (1 for solvent, 0 for insolvent) and the list of node conditions
- Uses realistic threshold values based on financial literature:
  - EBIT/TA: 0.025 (2.5%) as minimum profitable ratio
  - WC/TA: -0.10 (-10%) as critical working capital level
  - Equity/TA: 0.15 (15%) as minimum healthy equity ratio