


I'll create a Python function based on the decision tree I provided earlier, using the exact feature names and making sure the thresholds are realistic for financial ratios.

```python
def predict(X: dict):
    nodes = 3 * [None]  # Initialize list for 3 inner nodes
    
    # First level: Check profitability
    nodes[0] = X['EBIT/TA'] <= 0.02
    
    # Second level: Check capital structure
    nodes[1] = X['Equity/TA'] <= -0.15
    
    # Third level: Check liquidity
    nodes[2] = X['WC/TA'] <= -0.10
    
    # Decision logic
    if nodes[0]:  # If EBIT/TA is low
        if nodes[1]:  # If Equity/TA is very negative
            prediction = 0  # Insolvent
        else:  # If Equity/TA is better
            if nodes[2]:  # If WC/TA is negative
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:  # If EBIT/TA is better
        if nodes[2]:  # If WC/TA is negative
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent
    
    return prediction, nodes
```

This function:
- Takes a dictionary with financial ratios as input
- Uses realistic thresholds for financial ratios:
  - EBIT/TA: 0.02 (2% return on assets)
  - Equity/TA: -0.15 (-15% equity ratio)
  - WC/TA: -0.10 (-10% working capital ratio)
- Returns a tuple containing:
  - prediction (1 for solvent, 0 for insolvent)
  - list of boolean values for each decision node
- Uses exactly the feature names provided
- Follows the target encoding (1 = solvent, 0 = insolvent)