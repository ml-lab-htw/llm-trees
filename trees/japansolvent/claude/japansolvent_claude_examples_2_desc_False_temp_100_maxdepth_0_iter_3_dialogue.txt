


Based on the decision tree I provided earlier and the instructions you've given, I'll create a Python function that predicts whether a company is solvent or not, and returns both the prediction and a list of truth values for the inner nodes. Here's the function:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X['EBIT/TA'] <= 0.05
    nodes[1] = X['WC/TA'] <= 0.10
    nodes[2] = X['NI/TC'] <= 0.02
    nodes[3] = X['Equity/TA'] <= 0.30
    nodes[4] = X['Sales/TA'] <= 0.80

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:
        if nodes[3]:
            if nodes[4]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

This function does the following:

1. It takes a dictionary `X` as input, where the keys are the feature names.
2. It creates a list `nodes` to store the truth values of the inner nodes.
3. It evaluates each condition and stores the result (True or False) in the `nodes` list.
4. It then uses these conditions to navigate the decision tree and make a prediction.
5. The prediction is 1 for solvent and 0 for insolvent, as specified in your instructions.
6. Finally, it returns both the prediction and the list of node truth values.

The thresholds used in this function are based on the decision tree I provided earlier, which were chosen to be meaningful values for these financial ratios. However, these thresholds might need to be adjusted based on the specific dataset and industry norms.