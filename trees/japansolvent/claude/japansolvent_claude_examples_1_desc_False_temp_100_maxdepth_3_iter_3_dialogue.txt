


Based on the provided features and target encoding, I'll create a decision tree function that predicts company solvency and returns the node conditions. I'll use realistic threshold values based on common financial ratios.

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # First node checks profitability
    nodes[0] = X['EBIT/TA'] <= 0.02
    
    # Second node checks liquidity for less profitable companies
    nodes[1] = X['WC/TA'] <= -0.05
    
    # Third node checks leverage for more profitable companies
    nodes[2] = X['Equity/TA'] <= 0.30
    
    if nodes[0]:  # Low profitability
        if nodes[1]:  # Poor working capital
            prediction = 0  # Insolvent
        else:  # Better working capital
            prediction = 1  # Solvent
    else:  # Higher profitability
        if nodes[2]:  # High leverage
            prediction = 0  # Insolvent
        else:  # Lower leverage
            prediction = 1  # Solvent
    
    return prediction, nodes
```

I've used the following thresholds based on common financial benchmarks:
- EBIT/TA: 0.02 (2% return on assets)
- WC/TA: -0.05 (-5% working capital ratio)
- Equity/TA: 0.30 (30% equity ratio)

The function returns:
- prediction: 1 for solvent, 0 for insolvent
- nodes: list of boolean values indicating whether each condition was met