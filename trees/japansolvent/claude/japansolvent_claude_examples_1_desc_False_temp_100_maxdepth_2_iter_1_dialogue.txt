


Based on the provided feature names and format requirements, here's the Python function implementing the decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.02  # 2% profitability threshold
    nodes[1] = X["Equity/TA"] <= 0.30  # 30% equity ratio threshold
    
    if nodes[0]:  # Low profitability
        if nodes[1]:  # Low equity ratio
            prediction = 0  # Insolvent
        else:  # Adequate equity ratio
            prediction = 1  # Solvent
    else:  # High profitability
        prediction = 1  # Solvent
    
    return prediction, nodes
```

This implementation:
- Uses the exact feature names provided
- Returns both the prediction (1 for solvent, 0 for insolvent) and the list of node conditions
- Uses realistic threshold values based on financial ratios:
  - EBIT/TA threshold of 0.02 (2% return on assets)
  - Equity/TA threshold of 0.30 (30% equity ratio)
- Follows the same tree structure as previously described
- Maintains the specified target encoding (1 = solvent, 0 = insolvent)