


Based on the decision tree I created earlier and the provided information, here's the Python function that predicts whether a company is solvent or not, along with the list of truth values for the inner nodes:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X['EBIT/TA'] <= 0.05
    nodes[1] = X['WC/TA'] <= 0.10
    nodes[2] = X['NI/TC'] <= 0.02
    nodes[3] = X['Equity/TA'] <= 0.30
    nodes[4] = X['Sales/TA'] <= 0.80

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:
        if nodes[3]:
            if nodes[4]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

This function takes a dictionary `X` containing the financial ratios as input. It then evaluates the conditions for each node in the decision tree and returns two values:

1. `prediction`: 1 if the company is predicted to be solvent, 0 if insolvent.
2. `nodes`: A list of boolean values representing the truth values of the inner nodes. 1 if the condition is satisfied, 0 otherwise.

The thresholds used in the decision tree are based on common financial benchmarks and the structure of the tree I proposed earlier. These thresholds can be adjusted based on more specific industry standards or historical data if available.

This implementation follows the decision tree structure I outlined earlier, using the exact keys provided for the features and the correct encoding for the target variable (1 = solvent, 0 = insolvent).