


Based on the provided features and their financial meaning, I'll create a decision function that implements the previously discussed tree with realistic threshold values:

```python
def predict(X: dict):
    nodes = 5 * [None]  # Initialize list for storing node decisions
    
    # Define decision nodes with realistic financial thresholds
    nodes[0] = X["EBIT/TA"] <= 0.02  # Profitability threshold
    nodes[1] = X["WC/TA"] <= -0.10   # Working capital threshold
    nodes[2] = X["Equity/TA"] <= 0.15  # Equity ratio threshold
    nodes[3] = X["Equity/TL"] <= 0.30  # Debt-to-equity threshold
    nodes[4] = X["NI/TC"] <= 0.01    # Return on capital threshold
    
    # Implement decision logic
    if nodes[0]:  # Low profitability
        if nodes[1]:  # Negative working capital
            prediction = 0  # Insolvent
        else:
            if nodes[2]:  # Low equity ratio
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:  # Higher profitability
        if nodes[3]:  # Lower equity to liabilities
            if nodes[4]:  # Low return on capital
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent
    
    return prediction, nodes
```

This implementation:
- Uses the exact feature names provided
- Returns both the prediction (1 for solvent, 0 for insolvent) and the list of node decisions
- Uses realistic threshold values based on financial ratios:
  * EBIT/TA: 0.02 (2% return on assets)
  * WC/TA: -0.10 (negative working capital ratio)
  * Equity/TA: 0.15 (15% equity ratio)
  * Equity/TL: 0.30 (30