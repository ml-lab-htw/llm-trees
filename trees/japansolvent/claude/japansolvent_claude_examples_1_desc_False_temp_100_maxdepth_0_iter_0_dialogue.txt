


Based on the provided feature names and their meanings, I'll create a decision tree function that makes economically sensible predictions about company solvency using reasonable threshold values for financial ratios.

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # First level: Profitability check
    nodes[0] = X["EBIT/TA"] <= 0.02
    
    # Second level branches
    nodes[1] = X["WC/TA"] <= -0.10
    nodes[2] = X["Equity/TA"] <= 0.15
    
    # Third level branches
    nodes[3] = X["Equity/TL"] <= 0.30
    nodes[4] = X["NI/TC"] <= 0.01
    
    # Decision logic
    if nodes[0]:  # Low profitability branch
        if nodes[1]:  # Poor working capital
            prediction = 0  # Insolvent
        else:
            if nodes[2]:  # Low equity ratio
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:  # Higher profitability branch
        if nodes[3]:  # Lower equity to liabilities
            if nodes[4]:  # Poor return on capital
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent
            
    return prediction, nodes
```

The thresholds are set based on common financial benchmarks:
- EBIT/TA > 2%: basic profitability threshold
- WC/TA > -10%: critical working capital level
- Equity/TA > 15%: minimum equity ratio
- Equity/TL > 30%: minimum equity to liabilities ratio
- NI/TC > 1%: minimum return on capital

The prediction returns 1 for solvent companies and 0 for insolvent ones, along with the array of node conditions.