


Based on your requirements, I'll convert the previously designed decision tree into a Python function using the exact feature names and encoding you provided. The thresholds are set to financially meaningful values for these ratios:

```python
def predict(X: dict):
    nodes = 5 * [None]  # Initialize list for storing node decisions
    
    # Define the nodes with conditions
    nodes[0] = X["EBIT/TA"] <= 0.02
    nodes[1] = X["WC/TA"] <= -0.10
    nodes[2] = X["Equity/TA"] <= 0.15
    nodes[3] = X["Equity/TL"] <= 0.30
    nodes[4] = X["NI/TC"] <= 0.01
    
    # Tree logic
    if nodes[0]:  # EBIT/TA <= 0.02
        if nodes[1]:  # WC/TA <= -0.10
            prediction = 0  # Insolvent
        else:  # WC/TA > -0.10
            if nodes[2]:  # Equity/TA <= 0.15
                prediction = 0  # Insolvent
            else:  # Equity/TA > 0.15
                prediction = 1  # Solvent
    else:  # EBIT/TA > 0.02
        if nodes[3]:  # Equity/TL <= 0.30
            if nodes[4]:  # NI/TC <= 0.01
                prediction = 0  # Insolvent
            else:  # NI/TC > 0.01
                prediction = 1  # Solvent
        else:  # Equity/TL > 0.30
            prediction = 1  # Solvent
    
    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list to store the binary decisions at each node
3. Evaluates the conditions using meaningful thresholds for financial ratios
4. Returns both the prediction (1 for solvent, 0 for insolvent) and the