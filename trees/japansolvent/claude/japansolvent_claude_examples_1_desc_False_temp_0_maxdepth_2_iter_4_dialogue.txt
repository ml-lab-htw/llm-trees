


Based on your requirements, I'll create a Python function for the solvency decision tree that returns both the prediction and the node conditions. I'll use the exact feature keys you provided and the binary target encoding (1 = solvent, 0 = insolvent).

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.02
    nodes[1] = X["Equity/TA"] <= 0.30
    
    if nodes[0]:
        if nodes[1]:
            prediction = 0  # insolvent
        else:
            prediction = 1  # solvent
    else:
        prediction = 1  # solvent

    return prediction, nodes
```

This implementation:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list 'nodes' to store the boolean results of the conditions
3. First checks if EBIT/TA is <= 0.02 (first node)
4. If true, checks if Equity/TA is <= 0.30 (second node)
5. Makes classification based on these conditions:
   - If EBIT/TA <= 0.02 and Equity/TA <= 0.30: insolvent (0)
   - If EBIT/TA <= 0.02 and Equity/TA > 0.30: solvent (1)
   - If EBIT/TA > 0.02: solvent (1)
6. Returns both the prediction and the list of node conditions

The thresholds (0.02 for EBIT/TA and 0.30 for Equity/TA) are meaningful values based on financial analysis:
- EBIT/TA <= 0.02 indicates very low profitability
- Equity/TA <= 0.30 indicates high leverage (70% or more debt financing)