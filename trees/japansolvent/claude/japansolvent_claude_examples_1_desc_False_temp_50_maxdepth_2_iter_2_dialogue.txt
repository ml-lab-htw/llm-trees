


I'll create a decision tree function based on my previous tree structure, using the exact feature keys and target encoding you provided:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.02
    nodes[1] = X["WC/TA"] <= -0.05
    
    if nodes[0]:  # Low profitability
        if nodes[1]:  # Poor working capital
            prediction = 0  # insolvent
        else:  # Adequate working capital
            prediction = 1  # solvent
    else:  # Good profitability
        prediction = 1  # solvent

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list 'nodes' to store the boolean results of the decision conditions
3. First checks if EBIT/TA is less than or equal to 0.02 (low profitability threshold)
4. For companies with low profitability, checks if WC/TA is less than or equal to -0.05 (negative working capital threshold)
5. Returns:
   - prediction: 1 for solvent, 0 for insolvent
   - nodes: list of boolean values representing the conditions at each node

The thresholds (0.02 for EBIT/TA and -0.05 for WC/TA) are based on common financial analysis benchmarks where:
- EBIT/TA <= 0.02 indicates poor profitability
- WC/TA <= -0.05 indicates significant liquidity problems