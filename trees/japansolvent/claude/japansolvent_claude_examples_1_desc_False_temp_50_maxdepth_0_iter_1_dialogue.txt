


I'll create a Python function that implements the decision tree I proposed earlier, using the exact feature names you provided and the binary classification (0 = insolvent, 1 = solvent).

```python
def predict(X: dict):
    # Initialize nodes list for storing boolean conditions
    nodes = 4 * [None]
    
    # Define the conditions for each node
    nodes[0] = X["EBIT/TA"] <= 0.02
    nodes[1] = X["WC/TA"] <= -0.10
    nodes[2] = X["Equity/TA"] <= 0.15
    nodes[3] = X["Equity/TL"] <= 0.30
    
    # Decision tree logic
    if nodes[0]:  # EBIT/TA <= 0.02
        if nodes[1]:  # WC/TA <= -0.10
            prediction = 0  # Insolvent
        else:  # WC/TA > -0.10
            if nodes[2]:  # Equity/TA <= 0.15
                prediction = 0  # Insolvent
            else:  # Equity/TA > 0.15
                prediction = 1  # Solvent
    else:  # EBIT/TA > 0.02
        if nodes[3]:  # Equity/TL <= 0.30
            if X["NI/TC"] <= 0.01:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:  # Equity/TL > 0.30
            prediction = 1  # Solvent
            
    return prediction, nodes
```

This implementation:
1. Takes a dictionary of features as input
2. Uses realistic threshold values based on financial ratios:
   - EBIT/TA: 0.02 (2% return on assets)
   - WC/TA: -0.10 (negative working capital ratio)
   - Equity/TA: 0.15 (15% equity ratio)
   - Equity/TL: