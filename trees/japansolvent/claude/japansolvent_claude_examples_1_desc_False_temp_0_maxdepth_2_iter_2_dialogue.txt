


I'll create a Python function for the solvency decision tree that returns both the prediction and the node conditions. I'll use the exact feature keys you provided and the binary encoding for the target variable (1 = solvent, 0 = insolvent).

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First node: EBIT/TA <= 0.02
    nodes[0] = X["EBIT/TA"] <= 0.02
    
    # Second node: Equity/TA <= 0.30
    nodes[1] = X["Equity/TA"] <= 0.30
    
    if nodes[0]:  # If EBIT/TA <= 0.02
        if nodes[1]:  # If Equity/TA <= 0.30
            prediction = 0  # Insolvent
        else:  # If Equity/TA > 0.30
            prediction = 1  # Solvent
    else:  # If EBIT/TA > 0.02
        prediction = 1  # Solvent

    return prediction, nodes
```

This implementation:
1. Takes a dictionary X containing the feature values
2. Creates a list 'nodes' to store the boolean results of the conditions
3. Evaluates two conditions:
   - First node: EBIT/TA <= 0.02 (profitability threshold)
   - Second node: Equity/TA <= 0.30 (leverage threshold)
4. Returns:
   - prediction: 1 for solvent, 0 for insolvent
   - nodes: list of boolean values representing the conditions at each node

The thresholds (0.02 and 0.30) are based on common financial benchmarks:
- EBIT/TA of 0.02 represents a minimal profitability threshold
- Equity/TA of 0.30 represents a reasonable capital structure threshold