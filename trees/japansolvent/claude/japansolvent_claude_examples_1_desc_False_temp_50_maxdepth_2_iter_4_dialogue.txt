


Based on the provided features and target encoding, I'll create a decision tree prediction function that follows the structure I proposed earlier, using the exact feature keys and meaningful thresholds.

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.04
    nodes[1] = X["Equity/TA"] <= 0.30
    
    if nodes[0]:  # EBIT/TA <= 0.04
        if nodes[1]:  # Equity/TA <= 0.30
            prediction = 0  # insolvent
        else:  # Equity/TA > 0.30
            prediction = 1  # solvent
    else:  # EBIT/TA > 0.04
        prediction = 1  # solvent

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list 'nodes' to store the boolean results of the decision nodes
3. Evaluates two conditions:
   - First node: EBIT/TA threshold of 0.04 (profitability indicator)
   - Second node: Equity/TA threshold of 0.30 (leverage indicator)
4. Returns:
   - prediction: 1 for solvent, 0 for insolvent
   - nodes: list of boolean values indicating which conditions were met

The thresholds (0.04 for EBIT/TA and 0.30 for Equity/TA) are based on common financial benchmarks for company solvency assessment.