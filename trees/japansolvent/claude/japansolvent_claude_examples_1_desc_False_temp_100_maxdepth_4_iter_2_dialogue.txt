


Based on the provided features and format, I'll create a prediction function for the solvency decision tree:

```python
def predict(X: dict):
    nodes = 5 * [None]  # Initialize list for 5 inner nodes
    
    # Define the decision nodes with realistic thresholds
    nodes[0] = X['EBIT/TA'] <= 0.02
    nodes[1] = X['WC/TA'] <= -0.10
    nodes[2] = X['Equity/TA'] <= 0.15
    nodes[3] = X['NI/TC'] <= 0.01
    nodes[4] = X['Sales/TA'] <= 0.85

    # Decision tree logic
    if nodes[0]:  # EBIT/TA <= 0.02
        if nodes[1]:  # WC/TA <= -0.10
            prediction = 0  # Insolvent
        else:  # WC/TA > -0.10
            if nodes[2]:  # Equity/TA <= 0.15
                prediction = 0  # Insolvent
            else:  # Equity/TA > 0.15
                prediction = 1  # Solvent
    else:  # EBIT/TA > 0.02
        if nodes[3]:  # NI/TC <= 0.01
            if nodes[4]:  # Sales/TA <= 0.85
                prediction = 0  # Insolvent
            else:  # Sales/TA > 0.85
                prediction = 1  # Solvent
        else:  # NI/TC > 0.01
            prediction = 1  # Solvent

    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list to store the truth values of 5 inner nodes
3. Evaluates each condition using realistic thresholds for financial ratios
4. Returns both the prediction (1 for solvent, 0 for insolvent) and the list of node truth values

The thresholds are set based on typical financial ratio