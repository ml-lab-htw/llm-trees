


Based on the provided features and target encoding, I'll create a prediction function for the decision tree I designed earlier, using realistic threshold values for financial ratios:

```python
def predict(X: dict):
    nodes = 4 * [None]  # Initialize list for 4 inner nodes
    
    # Decision nodes with realistic thresholds
    nodes[0] = X['EBIT/TA'] <= 0.02  # Profitability threshold
    nodes[1] = X['WC/TA'] <= -0.10   # Working capital threshold
    nodes[2] = X['Equity/TA'] <= 0.15  # Equity ratio threshold
    nodes[3] = X['Equity/TL'] <= 0.30  # Equity to liabilities threshold
    
    if nodes[0]:  # Low profitability
        if nodes[1]:  # Poor working capital
            prediction = 0  # insolvent
        else:  # Better working capital
            if nodes[2]:  # Low equity ratio
                prediction = 0  # insolvent
            else:  # Better equity ratio
                prediction = 1  # solvent
    else:  # Better profitability
        if nodes[3]:  # Low equity to liabilities
            prediction = 0  # insolvent
        else:  # Better equity to liabilities
            prediction = 1  # solvent
    
    return prediction, nodes
```

This function:
- Takes a dictionary X with the financial ratios as input
- Returns a tuple containing:
  - prediction (1 = solvent, 0 = insolvent)
  - list of boolean values for each decision node
- Uses realistic threshold values based on financial analysis
- Follows the exact feature names provided
- Implements the decision tree logic as described earlier