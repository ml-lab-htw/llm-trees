


Based on the provided feature names and value ranges, I'll create a Python function that implements the decision tree we discussed earlier with realistic threshold values:

```python
def predict(X: dict):
    nodes = 5 * [None]  # Initialize list for storing node decisions
    
    # Decision nodes with realistic threshold values
    nodes[0] = X['EBIT/TA'] <= 0.025
    nodes[1] = X['WC/TA'] <= -0.15
    nodes[2] = X['Equity/TA'] <= 0.20
    nodes[3] = X['Equity/TL'] <= 0.30
    nodes[4] = X['NI/TC'] <= 0.01
    
    # Tree logic
    if nodes[0]:  # EBIT/TA <= 0.025
        if nodes[1]:  # WC/TA <= -0.15
            prediction = 0  # insolvent
        else:  # WC/TA > -0.15
            if nodes[2]:  # Equity/TA <= 0.20
                prediction = 0  # insolvent
            else:  # Equity/TA > 0.20
                prediction = 1  # solvent
    else:  # EBIT/TA > 0.025
        if nodes[3]:  # Equity/TL <= 0.30
            if nodes[4]:  # NI/TC <= 0.01
                prediction = 0  # insolvent
            else:  # NI/TC > 0.01
                prediction = 1  # solvent
        else:  # Equity/TL > 0.30
            prediction = 1  # solvent
    
    return prediction, nodes
```

This function takes a dictionary of features as input and returns:
1. A prediction (1 for solvent, 0 for insolvent)
2. A list of boolean values representing the decisions at each node

The thresholds are set to realistic values for financial ratios:
- EBIT/TA: 0.025 (2.5% return on assets)
-