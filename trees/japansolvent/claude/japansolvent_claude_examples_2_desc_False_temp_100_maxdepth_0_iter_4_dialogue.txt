


Based on the provided information and requirements, here's a Python function that implements the decision tree for predicting company solvency:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    nodes[0] = X['EBIT/TA'] <= 0.05
    nodes[1] = X['WC/TA'] <= 0.00
    nodes[2] = X['NI/TC'] <= 0.02
    nodes[3] = X['Equity/TA'] <= 0.30
    nodes[4] = X['Sales/TA'] <= 0.80

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:
        if nodes[3]:
            if nodes[4]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

This function:

1. Takes a dictionary `X` as input, where the keys are the feature names exactly as provided.
2. Creates a list `nodes` to store the boolean results of each decision node.
3. Evaluates each decision node based on the thresholds we set earlier.
4. Traverses the decision tree based on these evaluations.
5. Returns a tuple containing:
   - The prediction (1 for solvent, 0 for insolvent)
   - The list of node evaluations (1 if the condition is true, 0 if false)

The thresholds used in this function are based on the earlier decision tree structure, with some adjustments to make them more concrete:

- EBIT/TA: 0.05 (5% return on assets)
- WC/TA: 0.00 (positive working capital)
- NI/TC: 0.02 (2% return on capital)
- Equity/TA: 0.30 