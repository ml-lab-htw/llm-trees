


Based on the provided features and target encoding, I'll create a decision tree prediction function using realistic threshold values for financial ratios:

```python
def predict(X: dict):
    nodes = 3 * [None]  # Initialize list for 3 inner nodes
    
    # First level split on EBIT/TA (profitability)
    nodes[0] = X["EBIT/TA"] <= 0.02
    
    # Second level splits
    nodes[1] = X["WC/TA"] <= -0.10  # Working capital ratio
    nodes[2] = X["Equity/TA"] <= 0.30  # Equity ratio
    
    if nodes[0]:  # If EBIT/TA is low (<=0.02)
        if nodes[1]:  # If Working Capital ratio is negative
            prediction = 0  # insolvent
        else:
            prediction = 1  # solvent
    else:  # If EBIT/TA is higher
        if nodes[2]:  # If Equity ratio is low
            prediction = 0  # insolvent
        else:
            prediction = 1  # solvent
    
    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates three binary decisions based on financial ratios
3. Returns both the prediction (1 = solvent, 0 = insolvent) and the list of node conditions
4. Uses realistic threshold values:
   - EBIT/TA: 0.02 (2% return on assets)
   - WC/TA: -0.10 (-10% working capital ratio)
   - Equity/TA: 0.30 (30% equity ratio)