


Based on the decision tree I provided earlier and the specific requirements you've outlined, here's the Python function that predicts whether a company is solvent or not:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.05
    nodes[1] = X["WC/TA"] <= 0.10
    nodes[2] = X["Equity/TA"] <= 0.30
    nodes[3] = X["NI/TC"] <= 0.02
    nodes[4] = X["Sales/TA"] <= 0.80

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:
        if nodes[3]:
            if nodes[4]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

This function takes a dictionary `X` as input, where the keys are the feature names exactly as you provided. It returns a tuple containing the prediction (0 for insolvent, 1 for solvent) and a list of boolean values representing the truth values of the inner nodes.

The thresholds used in the decision tree are based on financial ratios and have been set to meaningful values:

1. EBIT/TA <= 0.05: This suggests that if a company's earnings before interest and taxes are 5% or less of its total assets, it might be at risk of insolvency.
2. WC/TA <= 0.10: This indicates that if a company's working capital is 10% or less of its total assets, it might have liquidity issues.
3. Equity/TA <= 0.30: This suggests that if a company's equity is 30% or less of its total assets, it might be highly leveraged.
4. NI/TC <= 0.02