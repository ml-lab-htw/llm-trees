


Based on the provided features and specifications, I'll create a prediction function for the decision tree I proposed earlier, using the exact feature names and adjusting the thresholds to realistic values for financial ratios:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.02  # 2% return on assets threshold
    nodes[1] = X["WC/TA"] <= -0.05   # -5% working capital ratio threshold
    
    if nodes[0]:  # Low profitability
        if nodes[1]:  # Poor working capital
            prediction = 0  # Insolvent
        else:  # Better working capital
            prediction = 1  # Solvent
    else:  # Good profitability
        prediction = 1  # Solvent
    
    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list to store the boolean values of the decision nodes
3. Uses realistic thresholds:
   - 2% for EBIT/TA (typical minimum acceptable return on assets)
   - -5% for WC/TA (critical threshold for working capital ratio)
4. Returns:
   - prediction: 1 for solvent, 0 for insolvent
   - nodes: list of boolean values representing the conditions at each node

The thresholds are based on common financial benchmarks and would typically indicate company solvency status.