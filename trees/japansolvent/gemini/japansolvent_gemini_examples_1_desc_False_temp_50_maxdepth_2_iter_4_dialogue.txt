


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary containing the financial ratios.
                 Keys: 'EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 
                       'WC/TA', 'Equity/TL', 'Equity/TA'

    Returns:
        tuple: A tuple containing the prediction (0 or 1) and a list of truth 
               values for the inner nodes.
    """
    nodes = 2 * [None]

    # Using Net Income/Total Assets (ROA) as the primary indicator
    nodes[0] = X['NI/TC'] > 0.05  # Hypothetical 5% ROA threshold

    # Using Equity/Total Liabilities as a secondary indicator for leverage
    nodes[1] = X['Equity/TL'] > 1.0  # Hypothetical 1.0 threshold

    if nodes[0]:  # If ROA > 5%
        if nodes[1]:  # If Equity/Liabilities > 1.0
            prediction = 1  # Solvent (Profitable and low leverage)
        else:
            prediction = 0  # Insolvent (Profitable but high leverage)
    else:  # If ROA <= 5%
        prediction = 0 # Insolvent (Low profitability)

    return prediction, nodes

```


**Example Usage:**

```python
company_data = {
    'EBIT/TA': 0.10,
    'NI/TC': 0.08,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.067,
    'NI/Sales': 0.053,
    'WC/TA': 0.2,
    'Equity/TL': 0.8,  # Example: Less equity than liabilities
    'Equity/TA': 0.45,
    'NI/TC': 0.06
}

prediction, nodes = predict(company_data)

print(f"Prediction: {prediction}") # Predicted: 0
print(f"Nodes: {nodes}") # Nodes: [True, False]


company_data2 = {
    'EBIT/TA': 0.10,
    'NI/TC': 0.08,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.067,
    'NI/Sales': 0.053,
    'WC/TA': 0.2,
    'Equity/TL': 1.2,  # Example: More equity than liabilities
    'Equity/TA': 0.45,
    'NI/TC': 0.06
}

prediction, nodes = predict(company_data2)
print(f"Prediction: {prediction}") # Predicted: 1
print(f"Nodes: {nodes}") # Nodes: [True, True]


```



This revised version uses the specified feature names and incorporates the ROA and leverage ratio as decision criteria.  The `nodes` list provides the truth values for each decision node, enabling you to see the path taken during prediction. Remember, this is a simplified example.  A real-world application would require training on a dataset to determine the optimal thresholds and feature importance.
