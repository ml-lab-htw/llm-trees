```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["EBIT/TA"] > 0.05  # EBIT/TA is often a good indicator of profitability and solvency
    nodes[1] = X["NI/TC"] > 0.02  # NI/TC reflects return on invested capital
    nodes[2] = X["Sales/TA"] > 1.5  # Higher Sales/TA can suggest efficient asset utilization
    nodes[3] = X["Equity/TA"] > 0.5  # Higher equity proportion indicates lower financial leverage
    nodes[4] = X["WC/TA"] > 0.1  # Sufficient working capital is important for short-term obligations


    if nodes[0]:
        if nodes[1]:
            if nodes[2]:
                if nodes[3]:
                    if nodes[4]:
                        prediction = 1  # Solvent if all conditions met
                    else:
                        prediction = 1 # Likely solvent even with slightly lower WC/TA
                else:
                    prediction = 0 # Lower Equity/TA increases risk even with other positive factors
            else:
                 prediction = 0 # Low Sales/TA suggests inefficiency
        else:
            prediction = 0  # Negative or low NI/TC is a strong indicator of potential insolvency
    else:
        if nodes[3]: # Even with low EBIT/TA, higher equity can offer a buffer
            if nodes[4]: # And if working capital is healthy
                prediction = 1 # There's a chance of solvency
            else:
                prediction = 0 # But low WC/TA with low EBIT/TA makes insolvency more likely
        else:
            prediction = 0  # Low EBIT/TA and low Equity/TA are strong indicators of insolvency

    return prediction, [int(node) for node in nodes]

```


This decision tree uses a heuristic approach based on financial ratios commonly associated with solvency.  A company with positive earnings (EBIT/TA and NI/TC), efficient asset utilization (Sales/TA), a healthy equity position (Equity/TA), and sufficient working capital (WC/TA) is more likely to be solvent. The tree's structure prioritizes these factors in a logical order, though without real-world data training, it is a simplified model.


Remember that this decision tree is generated without training.  Its accuracy depends on the actual relationship between these features and solvency in your dataset.  To get a truly useful model, you'll need to train a decision tree classifier on real-world data using a suitable machine learning library like scikit-learn.
