


```python
def predict(X: dict):
    nodes = 3 * [None]  # Initialize list for truth values of inner nodes

    nodes[0] = X["Equity/TA"] > 0.20
    nodes[1] = X["NI/TC"] > 0.05
    nodes[2] = X["WC/TA"] > 0.00


    if not nodes[0]: # X["Equity/TA"] <= 0.20
        prediction = 0  # Insolvent
    elif not nodes[1]:  # X["Equity/TA"] > 0.20 and X["NI/TC"] <= 0.05
        prediction = 0 # Insolvent
    elif not nodes[2]: # X["Equity/TA"] > 0.20 and X["NI/TC"] > 0.05 and X["WC/TA"] <= 0.00
        prediction = 0 # Insolvent
    else: #X["Equity/TA"] > 0.20 and X["NI/TC"] > 0.05 and X["WC/TA"] > 0.00
        prediction = 1 # Solvent

    return prediction, nodes

```


This function takes a dictionary `X` containing the feature values as input.  It then evaluates the conditions at each node, stores the truth values (True/False converted to 1/0) in the `nodes` list, and returns the final prediction (0 for insolvent, 1 for solvent) along with the `nodes` list.  The thresholds (0.20, 0.05, 0.00) are illustrative and should be adjusted based on real-world data if available.  I've also used NI/TC (Net Income/Total Capital) at the second level, as it's more closely related to profitability than Net Income/Sales, and follows the structure of my previous response using NITA (Net Income/Total Assets),  which I changed from the original NI/Sales. You may wish to experiment with other features at these nodes to see how the results are affected.  Most importantly, this version provides a functional Python implementation that adheres to the requested format and uses the specified feature names.
