


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X: A dictionary of financial ratios. Keys must match the specified feature names.

    Returns:
        A tuple containing the prediction (1 for solvent, 0 for insolvent) and
        a list of boolean values representing the truth values of inner nodes.
    """
    nodes = 2 * [None]

    # Thresholds based on general financial principles.  These should be refined
    # with real-world data and domain expertise.
    threshold1_equity_liabilities = 1.0  # Equity/Total Liabilities >= 1.0 considered safer
    threshold2_working_capital = 0.10   # Working Capital/Total Assets >= 0.10 considered safer

    nodes[0] = X["Equity/TL"] > threshold1_equity_liabilities
    nodes[1] = X["WC/TA"] > threshold2_working_capital


    if nodes[0]:  # Equity/TL above threshold
        if nodes[1]: # WC/TA above threshold
            prediction = 1 # Solvent
        else:       # WC/TA below threshold
            prediction = 0 # Insolvent
    else:          # Equity/TL below threshold
        prediction = 0  # Insolvent


    return prediction, [int(node) for node in nodes] # Convert boolean to 1/0



# Example usage:
example_company = {
    'EBIT/TA': 0.15,
    'NI/TC': 0.12,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.10,
    'NI/Sales': 0.08,
    'WC/TA': 0.25,
    'Equity/TL': 1.2,
    'Equity/TA': 0.60
}

prediction, node_values = predict(example_company)
print(f"Prediction: {prediction}")
print(f"Node values: {node_values}")


example_company2 = {
    'EBIT/TA': 0.05,
    'NI/TC': -0.02,
    'Sales/TA': 0.8,
    'EBIT/Sales': 0.06,
    'NI/Sales': -0.03,
    'WC/TA': -0.10,
    'Equity/TL': 0.5,
    'Equity/TA': 0.25
}

prediction2, node_values2 = predict(example_company2)
print(f"Prediction 2: {prediction2}")
print(f"Node values 2: {node_values2}")

```


Key improvements:

* **Clear Thresholds:**  Meaningful threshold values are included based on general financial interpretations.  These are still illustrative and need to be adjusted based on data analysis.
* **Type Conversion:** The boolean values in `nodes` are explicitly converted to integers (1 or 0) as requested.
* **Docstrings:** The function now includes a docstring to explain its purpose, arguments, and return values.
* **Example Usage:** Example code demonstrates how to use the function.
* **Adherence to the requested format:**  The code strictly adheres to the format and structure specified in the prompt.


This improved version is more robust, easier to understand, and aligns better with best practices in Python coding. Remember to adjust thresholds based on data analysis for real-world applications.
