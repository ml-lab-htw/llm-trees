


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary containing the financial ratios.

    Returns:
        tuple: A tuple containing the prediction (0 for insolvent, 1 for solvent)
               and a list of truth values for the inner nodes.
    """
    nodes = 2 * [None]  # Initialize list to store truth values of inner nodes

    nodes[0] = X["WC/TA"] > 0.10
    nodes[1] = X["Equity/TL"] > 1.0

    if nodes[0]:  # WC/TA > 0.10
        if nodes[1]:  # Equity/TL > 1.0
            prediction = 1  # Solvent
        else:           # Equity/TL <= 1.0
            prediction = 0  # Insolvent
    else:           # WC/TA <= 0.10
        prediction = 0  # Insolvent

    return prediction, nodes



# Example usage:
example_company = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.03,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.04,
    'NI/Sales': 0.025,
    'WC/TA': 0.25,
    'Equity/TL': 0.5,
    'Equity/TA': 0.4
}

prediction, nodes = predict(example_company)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")


example_company2 = {
    'EBIT/TA': 0.15,
    'NI/TC': 0.10,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.10,
    'NI/Sales': 0.067,
    'WC/TA': 0.35,
    'Equity/TL': 2.5,
    'Equity/TA': 0.7
}

prediction, nodes = predict(example_company2)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")
```



This function takes a dictionary of financial ratios as input and returns the prediction and the truth values of the inner nodes.  The thresholds (0.10 for `WC/TA` and 1.0 for `Equity/TL`) are incorporated into the conditional statements.  The `nodes` list reflects which branches of the tree were taken based on the input features.  Remember that these thresholds and the structure of the tree itself are hypothetical and would need to be adjusted based on real-world data.
