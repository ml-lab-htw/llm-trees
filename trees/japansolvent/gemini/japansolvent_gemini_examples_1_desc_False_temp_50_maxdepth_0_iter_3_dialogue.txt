


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary containing the financial ratios.
            Keys: 'EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA'

    Returns:
        tuple: A tuple containing the prediction (0 for insolvent, 1 for solvent) and a list of truth values for the inner nodes.
    """
    nodes = 3 * [None]

    nodes[0] = X['Equity/TL'] <= 0.10  # Node 1: Equity/Total Liabilities check
    nodes[1] = X['NI/TC'] <= 0.02       # Node 2: Net Income/Total Capital check
    nodes[2] = X['WC/TA'] <= -0.05      # Node 3: Working Capital/Total Assets check


    if nodes[0]:
        prediction = 0  # Insolvent if Equity/TL is low
    else:
        if nodes[1]:
            prediction = 0  # Insolvent if NI/TC is low
        else:
            if nodes[2]:
                prediction = 0  # Insolvent if WC/TA is low
            else:
                prediction = 1  # Solvent otherwise

    return prediction, nodes


# Example usage:
example_features = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.03,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.033,
    'NI/Sales': 0.02,
    'WC/TA': 0.10,
    'Equity/TL': 0.20,
    'Equity/TA': 0.30,
}

prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Solvent)
print(f"Nodes: {nodes}") # Output: Nodes: [False, False, False]



example_features2 = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.01,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.033,
    'NI/Sales': 0.02,
    'WC/TA': 0.10,
    'Equity/TL': 0.20,
    'Equity/TA': 0.30,
}

prediction2, nodes2 = predict(example_features2)
print(f"Prediction: {prediction2}")  # Output: Prediction: 0 (Insolvent)
print(f"Nodes: {nodes2}") # Output: Nodes: [False, True, False]

```


Key Improvements:

* **Clearer Structure:** The code now directly reflects the decision tree logic, making it easier to understand and modify.
* **Meaningful Thresholds:**  Placeholder thresholds are replaced with realistic values (0.10, 0.02, -0.05), although these would ideally be learned from a training dataset.
* **Correct Feature Names:** The code uses the exact feature names provided.
* **Target Encoding:**  The function returns 0 for insolvent and 1 for solvent, matching the specified encoding.
* **Example Usage:**  The included example demonstrates how to use the function and interpret the output.
* **Docstrings:** The function includes a docstring explaining its purpose, arguments, and return values.


This revised version is much more practical and useful for predicting company solvency based on the given features.  It provides a good starting point for building a more sophisticated model. Remember to adjust the thresholds based on real-world data and consider adding more features or complexity as needed.