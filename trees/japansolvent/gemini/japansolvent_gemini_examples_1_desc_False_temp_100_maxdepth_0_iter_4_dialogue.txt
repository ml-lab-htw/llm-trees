


```python
def predict(X: dict):
    nodes = 4 * [None]  # Initialize list for truth values of inner nodes
    
    nodes[0] = X['Equity/TL'] <= 0.5
    nodes[1] = X['NI/TC'] <= 0.0
    nodes[2] = X['WC/TA'] <= 0.0
    nodes[3] = X['EBIT/TA'] <= 0.0


    if nodes[0]:  # Equity/TL <= 0.5
        if nodes[1]:  # NI/TC <= 0.0
            prediction = 0  # Insolvent
        else:  # NI/TC > 0.0
            if nodes[2]: # WC/TA <= 0.0
                prediction = 0 # Insolvent
            else: # WC/TA > 0.0
                prediction = 1 # Solvent
    else:  # Equity/TL > 0.5
        if nodes[3]: #EBIT/TA <= 0.0
            if X['Sales/TA'] <= 0.5:
                prediction = 0 # Insolvent
            else:
                prediction = 0 # Insolvent (Potentially, needs more investigation)
        else: #EBIT/TA > 0
            prediction = 1 #Solvent


    return prediction, nodes

```


This Python function implements the decision tree logic described previously.  It takes a dictionary `X` as input, where the keys are the feature names (exactly as specified) and the values are the feature values for a given company. The function returns the predicted solvency (1 for solvent, 0 for insolvent) and a list `nodes` representing the truth values of the conditions at each inner node.  This allows you to trace the path taken through the tree for a given input.  Remember that this tree is a simplified example and would likely benefit from training on a real dataset.
