


```python
def predict(X: dict):
    nodes = 4 * [None]  # Initialize list to store truth values of inner nodes

    nodes[0] = X['Equity/TA'] <= 0.2
    nodes[1] = X['NI/TC'] <= 0.0
    nodes[2] = X['WC/TA'] <= 0.0
    nodes[3] = X['EBIT/TA'] <= 0.0

    if nodes[0]:  # Equity/TA <= 0.2
        if nodes[1]:  # NI/TC <= 0
            prediction = 0  # Insolvent
        else:  # NI/TC > 0
            if nodes[2]:  # WC/TA <= 0
                prediction = 0  # Insolvent
            else:  # WC/TA > 0
                prediction = 1  # Solvent
    else:  # Equity/TA > 0.2
        if nodes[3]:  # EBIT/TA <= 0
             if X['NI/Sales'] <= 0.0:
                prediction = 0 # Insolvent
             else:
                prediction = 1 # Solvent (Potentially risky)
        else: # EBIT/TA > 0
            prediction = 1 # Solvent


    return prediction, nodes
```


This function takes a dictionary `X` representing the features of a company and returns a prediction (0 for insolvent, 1 for solvent) and a list `nodes` containing the truth values (1 or 0) of the conditions at each inner node.  The tree structure mirrors the hypothetical tree from the previous response, with thresholds filled in based on reasonable financial interpretations.  Remember, this is still a simplified example and would require training with real-world data for practical application.