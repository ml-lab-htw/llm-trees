


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary containing the financial ratios.

    Returns:
        tuple: A tuple containing the prediction (0 for insolvent, 1 for solvent)
               and a list of truth values for the inner nodes.
    """
    nodes = 2 * [None]

    nodes[0] = X["EBIT/TA"] <= 0.05  # Low profitability
    nodes[1] = X["Equity/TL"] <= 1.0  # High leverage

    if nodes[0]:
        prediction = 0  # Likely insolvent
    else:
        if nodes[1]:
            prediction = 0  # Possibly insolvent (higher profit but high leverage)
        else:
            prediction = 1  # Likely solvent (higher profit and lower leverage)


    return prediction, nodes



# Example usage:
company_data = {
    "EBIT/TA": 0.02,
    "NI/TC": 0.03,
    "Sales/TA": 1.5,
    "EBIT/Sales": 0.01,
    "NI/Sales": 0.02,
    "WC/TA": 0.2,
    "Equity/TL": 0.8,
    "Equity/TA": 0.4
}

prediction, nodes = predict(company_data)
print(f"Prediction: {prediction}") # Output: Prediction: 0
print(f"Nodes: {nodes}") # Output: Nodes: [True, True]


company_data2 = {
    "EBIT/TA": 0.10,
    "NI/TC": 0.08,
    "Sales/TA": 1.8,
    "EBIT/Sales": 0.05,
    "NI/Sales": 0.04,
    "WC/TA": 0.3,
    "Equity/TL": 1.2,
    "Equity/TA": 0.5
}

prediction2, nodes2 = predict(company_data2)
print(f"Prediction: {prediction2}") # Output: Prediction: 1
print(f"Nodes: {nodes2}") # Output: Nodes: [False, False]
```


**Explanation and Improvements:**

* **Clearer Thresholds:** The code now uses 0.05 for `EBIT/TA` and 1.0 for `Equity/TL` as threshold values. These are still hypothetical but represent reasonable starting points.
* **Comments:** Added comments to explain the logic behind the thresholds and predictions.
* **Example Usage:** Included example usage with two sample company datasets to demonstrate how the function works.
* **Node List:** The `nodes` list correctly tracks the truth values of the inner nodes, as requested.
* **Type Hinting:** Included type hinting (`X: dict`) for better readability and maintainability.


This improved version is more functional, readable, and demonstrates the intended behavior. Remember to replace the hypothetical thresholds with values learned from real data when building a production-ready model.  You can also experiment with different features and tree depths to find the best model for your specific dataset.
