


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary of financial ratios.

    Returns:
        tuple: A tuple containing the prediction (0 for insolvent, 1 for solvent) 
               and a list of truth values for the inner nodes.
    """
    nodes = 2 * [None]

    nodes[0] = X["NI/TC"] > 0.0  # ROA > 0
    nodes[1] = X["Equity/TL"] > 1.0 # Equity/Liabilities > 1

    if nodes[0]:  # ROA > 0
        if nodes[1]: # Equity/Liabilities > 1
            prediction = 1 # Solvent
        else: # Equity/Liabilities <= 1
            prediction = 0  # Insolvent
    else: # ROA <= 0
        prediction = 0 # Insolvent

    return prediction, nodes


# Example usage (replace with your actual feature values):
example_features = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.03,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.04,
    'NI/Sales': 0.025,
    'WC/TA': 0.15,
    'Equity/TL': 0.8,
    'Equity/TA': 0.4
}

prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")  # Output: Prediction: 0 (Insolvent in this example)
print(f"Nodes: {nodes}")       # Output: Nodes: [True, False]

example_features2 = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.03,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.04,
    'NI/Sales': 0.025,
    'WC/TA': 0.15,
    'Equity/TL': 2.0,  # Changed to > 1
    'Equity/TA': 0.4
}

prediction, nodes = predict(example_features2)
print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Solvent in this example)
print(f"Nodes: {nodes}")       # Output: Nodes: [True, True]


example_features3 = {
    'EBIT/TA': -0.05,  # Negative ROA
    'NI/TC': -0.03,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.04,
    'NI/Sales': 0.025,
    'WC/TA': 0.15,
    'Equity/TL': 2.0,
    'Equity/TA': 0.4
}

prediction, nodes = predict(example_features3)
print(f"Prediction: {prediction}")  # Output: Prediction: 0
print(f"Nodes: {nodes}")       # Output: Nodes: [False, True]
```


This code implements the decision tree logic as a Python function and provides clear examples of its usage with different input features.  It also correctly returns the truth values of the inner nodes for interpretability. Remember that this is a simplified model and would need to be trained on real-world data for practical application.
