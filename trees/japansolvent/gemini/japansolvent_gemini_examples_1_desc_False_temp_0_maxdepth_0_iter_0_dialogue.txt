


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary containing the financial ratios.

    Returns:
        tuple: A tuple containing the prediction (0 for insolvent, 1 for solvent) 
               and a list of truth values for the inner nodes.
    """
    nodes = 4 * [None]

    nodes[0] = X["Equity/TA"] <= 0.20
    nodes[1] = X["NI/TC"] <= 0.05
    nodes[2] = X["WC/TA"] <= 0.0
    nodes[3] = X["EBIT/TA"] <= 0.0


    if nodes[0]:
        prediction = 0  # Insolvent if Equity/TA is low
    else:
        if nodes[1]:
            if nodes[2]:
                prediction = 0  # Insolvent if NI/TC and WC/TA are low
            else:
                prediction = 1  # Solvent if NI/TC is low but WC/TA is okay
        else:
            if nodes[3]:
                prediction = 0  # Insolvent if NI/TC is good but EBIT/TA is low
            else:
                prediction = 1  # Solvent if both NI/TC and EBIT/TA are good

    return prediction, nodes



```


**Explanation and Justification of Thresholds:**

* **Equity/TA <= 0.20:** A low equity ratio (below 20%) often indicates a high level of debt and increased risk of insolvency.
* **NI/TC <= 0.05:**  A net income to total capital ratio of 5% or less suggests weak profitability.
* **WC/TA <= 0.0:** Negative working capital is a strong indicator of potential short-term liquidity problems.
* **EBIT/TA <= 0.0:** Negative earnings before interest and taxes indicate operational inefficiency and potential losses.


**Key Improvements:**

* **Clearer Structure:** The code now directly reflects the decision tree logic, making it easier to understand and maintain.
* **Meaningful Thresholds:**  The placeholder thresholds have been replaced with values that are more realistic and interpretable in a financial context.
* **Correct Feature Names:** The code uses the exact feature names provided.
* **Consistent Return Values:** The function returns the prediction and the list of node truth values as specified.
* **Simplified Logic:** The nested `if` statements are organized to match the decision tree structure.



This improved function provides a more robust and interpretable implementation of the solvency prediction decision tree.  Remember, these thresholds are examples and should ideally be learned from real-world financial data using a machine learning algorithm.  The function structure now facilitates easy integration with such a trained model by simply updating the thresholds and tree structure based on the learned model.
