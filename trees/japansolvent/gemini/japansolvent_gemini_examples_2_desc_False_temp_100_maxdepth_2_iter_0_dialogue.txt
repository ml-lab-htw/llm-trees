


```python
def predict(X: dict):
    """
    Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary of financial ratios with keys:
            'EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA'

    Returns:
        tuple: A tuple containing:
            - prediction (int): Predicted solvency (1 = solvent, 0 = insolvent)
            - nodes (list): Truth values of inner nodes (1 = condition met, 0 = condition not met)
    """

    nodes = 3 * [None]  # Initialize list for truth values of inner nodes

    # Decision Tree Logic (Depth 2)
    nodes[0] = X['NI/TC'] > -0.05  # Example threshold, replace with meaningful value
    nodes[1] = X['EBIT/Sales'] > 0.1  # Example threshold, replace with meaningful value
  
    if nodes[0]:  # NI/TC > -0.05
        if nodes[1]:  # EBIT/Sales > 0.1
            prediction = 1  # Solvent
        else: 
            prediction = 0  # Insolvent
    else:  # NI/TC <= -0.05
        nodes[2] = X['Equity/TA'] > 0.2  # Example threshold, replace with meaningful value
        if nodes[2]:  # Equity/TA > 0.2
            prediction = 1  # Solvent 
        else:
            prediction = 0  # Insolvent 

    return prediction, nodes
```

**Explanation:**

1. **Function Definition:** The code defines a Python function `predict(X)` that takes a dictionary `X` as input, representing the financial ratios of a company.

2. **Nodes Initialization:** `nodes = 3 * [None]` creates a list called `nodes` with a size of 3, initialized with `None` values. This list will store the truth values (True/False or 1/0) of the conditions checked at each inner node of the decision tree.

3. **Decision Tree Logic:** 
    - The code then implements the decision logic of the tree. I've used example features and thresholds. You should replace these placeholders (`-0.05`, `0.1`, `0.2`) with values that make sense based on your understanding of the data or any analysis you've performed. 
    - The `if` and `else` statements represent the branches of the decision tree, leading to a final prediction (solvent or insolvent).

4. **Return Values:** The function returns a tuple containing the `prediction` (1 for solvent, 0 for insolvent) and the `nodes` list, which holds the truth values for the conditions checked at each inner node.

**Remember:** You'll need to analyze your company solvency data to determine the most relevant features and the appropriate thresholds for each node in the decision tree. 
