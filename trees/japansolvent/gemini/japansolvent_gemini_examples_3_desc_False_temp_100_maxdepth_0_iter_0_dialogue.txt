


You're still providing example functions using the Iris dataset features ("petal_length", "sepal_width", etc.). 

However, I understand what you need. **I'll provide a Python function template for predicting company solvency, and you can adjust the thresholds or tree structure based on your data analysis or model training.**

```python
def predict_solvency(X: dict):
    """Predicts company solvency based on financial ratios.

    Args:
        X (dict): A dictionary containing the following financial ratios:
            - 'EBIT/TA': Earnings Before Interest and Taxes / Total Assets
            - 'NI/TC':  Net Income / Total Capital
            - 'Sales/TA': Sales / Total Assets
            - 'EBIT/Sales': Earnings Before Interest and Taxes / Sales
            - 'NI/Sales': Net Income / Sales
            - 'WC/TA': Working Capital / Total Assets
            - 'Equity/TL': Equity / Total Liabilities
            - 'Equity/TA': Equity / Total Assets

    Returns:
        tuple: A tuple containing:
            - prediction (int): Predicted solvency (1 = Solvent, 0 = Insolvent)
            - nodes (list): Truth values of inner nodes (1 if condition met, 0 otherwise) 
    """

    nodes = 4 * [None]  # Adjust the size based on the number of inner nodes in your tree

    # Example conditions - replace with meaningful thresholds based on your data
    nodes[0] = X['NI/TC'] > 0.05  # Example: Positive Net Income / Total Capital
    nodes[1] = X['Equity/TL'] > 0.3  # Example: Equity to Total Liabilities ratio
    nodes[2] = X['WC/TA'] > 0.15 # Example: Positive Working Capital / Total Assets
    nodes[3] = X['EBIT/Sales'] > 0.1 # Example: Positive EBIT / Sales

    # Example tree structure - adjust based on your decision tree logic
    if nodes[0]: 
        if nodes[1]:
            prediction = 1  # Likely solvent 
        else:
            if nodes[2]:
                prediction = 1  # Likely solvent
            else:
                prediction = 0 # Likely insolvent
    else:
        if nodes[3]:
            prediction = 1 # Likely solvent
        else:
            prediction = 0 # Likely insolvent 

    return prediction, nodes

# Example usage:
company_data = {'EBIT/TA': 0.12, 'NI/TC': 0.08, 'Sales/TA': 1.5, 'EBIT/Sales': 0.08, 
                 'NI/Sales': 0.05, 'WC/TA': 0.2, 'Equity/TL': 0.4, 'Equity/TA': 0.6}

prediction, nodes = predict_solvency(company_data)
print(f"Prediction: {'Solvent' if prediction == 1 else 'Insolvent'}")
print(f"Inner nodes: {nodes}")
```

**Explanation:**

1. **Function Structure:** The `predict_solvency` function takes a dictionary `X` containing the company's financial ratios.
2. **Nodes List:** The `nodes` list will store the truth values (True/False or 1/0) of the conditions at each inner node of your decision tree.
3. **Thresholds:** You **need to replace** the example thresholds (`0.05`, `0.3`, etc.) with values that make sense for your data.  These thresholds define the split points in your decision tree.
4. **Decision Tree Logic:** The `if-else` statements represent the decision tree's structure.  You need to **modify this logic** to match the structure of the decision tree you've determined from your data analysis. 
5. **Prediction:** The function returns the `prediction` (1 for solvent, 0 for insolvent) and the `nodes` list.

**Key Steps:**

- **Data Analysis:** Analyze your company solvency data to determine which financial ratios are important and find meaningful thresholds for those ratios.
- **Decision Tree Construction:** Use a decision tree algorithm (or your domain expertise) to create the decision tree structure. 
- **Function Update:** Update the `predict_solvency` function with the correct thresholds and decision tree logic. 
