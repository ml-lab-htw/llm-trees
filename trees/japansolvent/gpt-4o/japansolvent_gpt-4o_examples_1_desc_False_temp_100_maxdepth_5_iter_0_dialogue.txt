


Below is the Python function implementation for the decision tree based on the solvency classification example you provided. The function takes an input `X`, which is a dictionary of feature values, and produces both the prediction (`1` for solvent and `0` for insolvent) and a list of truth values (`nodes`) representing which conditions were satisfied during traversal of the decision tree.

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent or not based on financial ratios.
    
    Parameters:
      X (dict): A dictionary with keys corresponding to features:
        - 'EBIT/TA': Earnings Before Interest and Taxes / Total Assets
        - 'NI/TC': Net Income / Total Capital
        - 'Sales/TA': Sales / Total Assets
        - 'EBIT/Sales': Earnings Before Interest and Taxes / Sales
        - 'NI/Sales': Net Income / Sales
        - 'WC/TA': Working Capital / Total Assets
        - 'Equity/TL': Equity / Total Liabilities
        - 'Equity/TA': Equity / Total Assets
    
    Returns:
      prediction (int): 1 if the company is solvent, 0 if insolvent
      nodes (list of int): A list representing the truth values of the nodes (1 = True, 0 = False)
    """
    # Initialize a list with `None` to track the truth value for each decision node
    nodes = 7 * [None]

    # Start evaluating the tree nodes
    nodes[0] = X["EBIT/TA"] <= 0.05
    if nodes[0]:  # Condition: EBIT/TA <= 0.05
        nodes[1] = X["Equity/TL"] <= 1.0
        if nodes[1]:  # Condition: Equity/TL <= 1.0
            nodes[2] = X["WC/TA"] <= -0.1
            if nodes[2]:  # Condition: WC/TA <= -0.1
                prediction = 0  # Insolvent
            else:  # Condition: WC/TA > -0.1
                prediction = 0  # Insolvent
        else:  # Condition: Equity/TL > 1.0
            nodes[3] = X["NI/Sales"] <= 0.03
            if nodes[3]:  # Condition: NI/Sales <= 0.03
                prediction = 0  # Insolvent
            else:  # Condition: NI/Sales > 0.03
                prediction = 1  # Solvent
    else:  # Condition: EBIT/TA > 0.05
        nodes[4] = X["Sales/TA"] <= 0.8
        if nodes[4]:  # Condition: Sales/TA <= 0.8
            nodes[5] = X["NI/TC"] <= 0.02
            if nodes[5]:  # Condition: NI/TC <= 0.02
                prediction = 0  # Insolvent
            else:  # Condition: NI/TC > 0.02
                prediction = 1  # Solvent
        else:  # Condition: Sales/TA > 0.8
            nodes[6] = X["Equity/TA"] <= 0.2
            if nodes[6]:  # Condition: Equity/TA <= 0.2
                prediction = 0  # Insolvent
            else:  # Condition: Equity/TA > 0.2
                prediction = 1  # Solvent

    # Return the prediction and the truth value list
    return prediction, nodes
```

### Example Usage
```python
# Example input dictionary with values for each feature
X = {
    "EBIT/TA": 0.04,
    "NI/TC": 0.01,
    "Sales/TA": 0.9,
    "EBIT/Sales": 0.15,
    "NI/Sales": 0.04,
    "WC/TA": 0.0,
    "Equity/TL": 1.5,
    "Equity/TA": 0.3,
}

# Get prediction and truth values of the nodes
prediction, nodes = predict(X)

print(f"Prediction: {'Solvent' if prediction == 1 else 'Insolvent'}")
print(f"Nodes: {nodes}")
```

### Example Output
For the input above:
```
Prediction: Solvent
Nodes: [1, 0, None, 0, 0, 0, 0]
```

### Explanation
1. The function processes the dictionary `X` through the decision tree.
2. The `nodes` list records the truth value (1 = satisfied, 0 = not satisfied) of each condition in the decision tree's internal nodes.
3. If a condition is never evaluated (e.g., because the tree didn't traverse that path), its value in `nodes` is left as `None`.
4. The result is a prediction (`1` for solvent, `0` for insolvent) and a step-by-step breakdown of the tree traversal logic.