


Here is the implementation of a Python function based on your decision tree for classifying whether a company is solvent (`1 = solvent`) or insolvent (`0 = insolvent`) given the mentioned features. The function uses a list to reflect the truth values of the inner nodes.

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent (1) or insolvent (0) based on financial features.

    Parameters:
    X (dict): A dictionary of features with the following keys:
        - 'EBIT/TA': Earnings Before Interest and Taxes/Total Assets
        - 'NI/TC': Net Income/Total Capital
        - 'Sales/TA': Sales/Total Assets
        - 'EBIT/Sales': Earnings Before Interest and Taxes/Sales
        - 'NI/Sales': Net Income/Sales
        - 'WC/TA': Working Capital/Total Assets
        - 'Equity/TL': Equity/Total Liabilities
        - 'Equity/TA': Equity/Total Assets

    Returns:
    int: Prediction (1 = solvent, 0 = insolvent)
    list: Truth values of the inner nodes (1 = condition satisfied, 0 = condition not satisfied)
    """
    # Initialize the nodes list for truth values
    nodes = [None] * 7
    
    # Evaluate the conditions of the decision tree
    nodes[0] = X['NI/TC'] <= 0.05
    nodes[1] = X['WC/TA'] <= -0.10
    nodes[2] = X['EBIT/TA'] <= 0.03
    nodes[3] = X['Equity/TL'] <= 0.5
    nodes[4] = X['Sales/TA'] <= 1.0
    nodes[5] = X['EBIT/Sales'] <= 0.06
    nodes[6] = X['NI/Sales'] <= 0.04

    # Decision tree logic
    if nodes[0]:  # NI/TC <= 0.05
        if nodes[1]:  # WC/TA <= -0.10
            prediction = 0  # Not Solvent
        else:  # WC/TA > -0.10
            if nodes[2]:  # EBIT/TA <= 0.03
                if nodes[3]:  # Equity/TL <= 0.5
                    prediction = 0  # Not Solvent
                else:  # Equity/TL > 0.5
                    prediction = 1  # Solvent
            else:  # EBIT/TA > 0.03
                prediction = 1  # Solvent
    else:  # NI/TC > 0.05
        if nodes[4]:  # Sales/TA <= 1.0
            if nodes[5]:  # EBIT/Sales <= 0.06
                prediction = 0  # Not Solvent
            else:  # EBIT/Sales > 0.06
                prediction = 1  # Solvent
        else:  # Sales/TA > 1.0
            if nodes[6]:  # NI/Sales <= 0.04
                prediction = 0  # Not Solvent
            else:  # NI/Sales > 0.04
                prediction = 1  # Solvent

    return prediction, nodes
```

### Example Usage:
```python
# Example input data
X = {
    'EBIT/TA': 0.04,
    'NI/TC': 0.06,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.07,
    'NI/Sales': 0.05,
    'WC/TA': -0.05,
    'Equity/TL': 0.6,
    'Equity/TA': 0.4
}

# Prediction
prediction, nodes = predict(X)

print("Prediction (1 = Solvent, 0 = Insolvent):", prediction)
print("Truth values of the inner nodes:", nodes)
```

### Example Output:
```
Prediction (1 = Solvent, 0 = Insolvent): 1
Truth values of the inner nodes: [False, False, False, False, False, False, False]
```

### Explanation:
1. **`nodes` List**: Each element in this list corresponds to whether a specific condition in the decision tree is satisfied (`1 = True, 0 = False`).
    - For example, `nodes[0] = X['NI/TC'] <= 0.05` checks the first condition.
2. **Decision Tree Logic**: Nested `if-else` statements implement the decision tree using the truth values of the `nodes`.

This function ensures that the implementation follows the given tree logic with a maximum depth of 5 and uses meaningful thresholds based on financial metrics.