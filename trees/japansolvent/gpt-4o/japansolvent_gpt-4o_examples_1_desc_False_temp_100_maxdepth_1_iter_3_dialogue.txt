


Below is the Python function for the decision tree based on the features provided. The function predicts whether a company is solvent (`1`) or insolvent (`0`), uses thresholds for the most important feature (`NI/TC`), and returns both the prediction and the list of node evaluations:

### Python Function:

```python
def predict(X: dict):
    """
    Decision tree-based classifier to determine if a company is solvent or insolvent.

    Parameters:
        X (dict): A dictionary where keys are feature names and values are the feature values.

    Returns:
        prediction (int): 1 if the company is solvent, 0 if insolvent.
        nodes (list): A list of truth values for the inner decision nodes.
    """

    # Initialize a list to keep track of inner node evaluations
    nodes = [None]  # Depth 1 decision tree has a single inner node

    # Inner node: Check if "NI/TC" (Net Income/Total Capital) is below or above the threshold
    nodes[0] = X["NI/TC"] <= 0.10  # Threshold for "NI/TC" is set at 0.10

    if nodes[0]:
        prediction = 0  # Insolvent
    else:
        prediction = 1  # Solvent

    return prediction, nodes
```

### Explanation of the Decision Tree:
- The decision tree has a **single decision node**, which evaluates the feature `NI/TC` (Net Income/Total Capital).
- The threshold for `NI/TC` is **0.10**:
  - If `NI/TC <= 0.10`, the company is predicted to be **insolvent** (`0`).
  - If `NI/TC > 0.10`, the company is predicted to be **solvent** (`1`).

### Example Predictions:

Given a feature dictionary `X`, we can use the function to make predictions. Below are a couple of examples:

#### Example 1:
```python
X = {
    "EBIT/TA": 0.15,
    "NI/TC": 0.05,
    "Sales/TA": 2.0,
    "EBIT/Sales": 0.08,
    "NI/Sales": 0.03,
    "WC/TA": 0.10,
    "Equity/TL": 1.5,
    "Equity/TA": 0.6,
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction}")  # Output: Prediction: 0 (Insolvent)
print(f"Nodes: {nodes}")            # Output: Nodes: [True]
```

#### Example 2:
```python
X = {
    "EBIT/TA": 0.25,
    "NI/TC": 0.15,
    "Sales/TA": 1.8,
    "EBIT/Sales": 0.12,
    "NI/Sales": 0.07,
    "WC/TA": 0.15,
    "Equity/TL": 2.0,
    "Equity/TA": 0.8,
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Solvent)
print(f"Nodes: {nodes}")            # Output: Nodes: [False]
```

### Structure of the Output:
- `prediction`: The predicted class, either `1` (solvent) or `0` (insolvent).
- `nodes`: A list of truth values (`True` or `False`) for each inner node in the decision tree:
  - `True`: The condition at the node was satisfied.
  - `False`: The condition at the node was not satisfied.

### Key Assumptions and Notes:
- The feature `NI/TC` (Net Income/Total Capital) is identified as the most important for this decision tree based on its ability to discriminate between solvent and insolvent companies.
- A `threshold` value of **0.10** is chosen as a meaningful cutoff for `NI/TC` â€” companies with `NI/TC > 0.10` are considered solvent, while those with `NI/TC <= 0.10` are considered insolvent.
- You can generalize the approach by replacing `NI/TC` and its threshold with another feature or cutoff if applicable.