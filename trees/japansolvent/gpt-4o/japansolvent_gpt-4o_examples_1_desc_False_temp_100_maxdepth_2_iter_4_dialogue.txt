


Certainly! Below is the Python function that implements the decision tree classifier for predicting whether a company is solvent or not, using the features you provided.

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First condition: Equity/Total Liabilities <= 0.5
    nodes[0] = X["Equity/TL"] <= 0.5
    
    # Second condition (only checked if the first condition is False): Net Income/Total Capital <= 0.1
    if not nodes[0]:
        nodes[1] = X["NI/TC"] <= 0.1
    
    # Decision tree logic
    if nodes[0]:
        prediction = 0  # Insolvent if Equity/TL <= 0.5
    else:
        if nodes[1]:
            prediction = 0  # Insolvent if Equity/TL > 0.5 and NI/TC <= 0.1
        else:
            prediction = 1  # Solvent if Equity/TL > 0.5 and NI/TC > 0.1
    
    return prediction, nodes
```

### Explanation:
- The function `predict(X)` takes a dictionary `X` where the keys are the feature names and the values are the corresponding feature values.
- It checks two conditions:
  1. Whether **Equity/TL** (Equity/Total Liabilities) is less than or equal to 0.5.
  2. If the first condition is not satisfied (i.e., Equity/TL is greater than 0.5), it checks if **NI/TC** (Net Income/Total Capital) is less than or equal to 0.1.
  
- The function then makes a prediction:
  - If **Equity/TL** is less than or equal to 0.5, the company is predicted to be **insolvent** (0).
  - If **Equity/TL** is greater than 0.5, the company is further evaluated on **NI/TC**:
    - If **NI/TC** is less than or equal to 0.1, the company is predicted to be **insolvent** (0).
    - If **NI/TC** is greater than 0.1, the company is predicted to be **solvent** (1).

- The function returns the prediction and a list `nodes` representing whether each condition in the decision tree was satisfied (1 if the condition holds, 0 otherwise).

### Example usage:
```python
X = {
    "EBIT/TA": 0.15,
    "NI/TC": 0.08,
    "Sales/TA": 0.75,
    "EBIT/Sales": 0.12,
    "NI/Sales": 0.05,
    "WC/TA": 0.2,
    "Equity/TL": 0.6,
    "Equity/TA": 0.4
}

prediction, nodes = predict(X)
print(f"Prediction: {'solvent' if prediction == 1 else 'insolvent'}")
print(f"Nodes: {nodes}")
```

This Python function follows your exact specifications and uses the feature names provided.