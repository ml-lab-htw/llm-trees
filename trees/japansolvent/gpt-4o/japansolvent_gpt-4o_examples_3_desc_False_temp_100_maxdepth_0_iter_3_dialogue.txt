


Based on the specific features and target variable for the company solvency decision tree, let's define the decision tree classifier in Python. We'll check the conditions sequentially and maintain a list of truth values for the inner nodes.

Here is the implementation:

```python
def predict(X: dict):
    nodes = [None] * 6  # Six inner nodes based on our decision tree structure
    nodes[0] = X['Equity/TL'] <= 0.5
    nodes[1] = X['EBIT/TA'] <= 0.05 if nodes[0] else None
    nodes[2] = X['NI/Sales'] <= 0.01 if nodes[0] and not nodes[1] else None
    nodes[3] = X['Equity/TA'] <= 0.40 if not nodes[0] else None

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
    else:
        if nodes[3]:
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent

    # If an inner node condition was never reached, it should default to 0 (False)
    nodes = [0 if node is None else int(node) for node in nodes]
    return prediction, nodes

# Example usage:
X_example = {
    'EBIT/TA': 0.04,
    'NI/TC': 0.03,
    'Sales/TA': 1.5,
    'EBIT/Sales': 0.1,
    'NI/Sales': 0.005,
    'WC/TA': 0.2,
    'Equity/TL': 0.4,
    'Equity/TA': 0.3
}

prediction, nodes = predict(X_example)
print("Prediction:", prediction)
print("Nodes:", nodes)
```

### Explanation:

1. **`nodes` list:** We initialize a list with `None` values to store the truth values of the inner nodes.
2. **`nodes[0]`:** Checks if `Equity/TL` is less than or equal to 0.5.
3. **`nodes[1]`:** Checks if `EBIT/TA` is less than or equal to 0.05, only if `nodes[0]` is `True`.
4. **`nodes[2]`:** Checks if `NI/Sales` is less than or equal to 0.01, only if `nodes[0]` is `True` and `nodes[1]` is `False`.
5. **`nodes[3]`:** Checks if `Equity/TA` is less than or equal to 0.40, only if `nodes[0]` is `False`.
6. **Decision Logic:** Uses the values of `nodes` to traverse the decision tree and determines the final prediction (0 = Insolvent, 1 = Solvent).
7. **Adjust `nodes` values:** Ensures that all entries in `nodes` are either `0` (False) or `1` (True), replacing any `None` values with `0`.

This script will classify a company as solvent or insolvent based on the financial ratios provided in `X`, and it will also return the truth values of the inner nodes used in the decision process.