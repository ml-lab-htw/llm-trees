Here's the decision tree based on the Features you provided, with a maximum depth of 2. The most common financial ratios used to assess a companyâ€™s solvency are related to profitability, liquidity, and leverage. Based on this, I will create a decision tree using ratios that can be crucial for solvency prediction.

**Chosen features for the decision tree:**
1. **Equity/TA** (Equity/Total Assets): A high value indicates that the company is largely financed by equity, which is generally safer.
2. **EBIT/TA** (Earnings Before Interest and Taxes/Total Assets): A higher EBIT/TA ratio shows the company is generating good earnings relative to its asset base, which is a positive sign for solvency.
3. **WC/TA** (Working Capital/Total Assets): A higher working capital relative to total assets indicates the company has enough short-term assets to cover its short-term liabilities.

Now, let's construct the decision tree.

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node 0: Equity/TA condition
    nodes[0] = X["Equity/TA"] > 0.3
    
    # Node 1: EBIT/TA condition (used only if Equity/TA is less than or equal to 0.3)
    nodes[1] = X["EBIT/TA"] > 0.1
    
    if nodes[0]:
        # If Equity/TA is high, predict solvent
        prediction = 1
    else:
        # If Equity/TA is low, check EBIT/TA
        if nodes[1]:
            prediction = 1
        else:
            prediction = 0

    return prediction, nodes
```

### Explanation:
1. **Node 0:** Checks if the company's **Equity/TA** is greater than 0.3. This is a key indicator of financial stability. If the condition is satisfied (i.e., the company has a high equity-to-assets ratio), the prediction is that the company is solvent (1).
   
2. **Node 1:** If the company's **Equity/TA** is less than or equal to 0.3, then the model checks the **EBIT/TA** ratio. If **EBIT/TA** is greater than 0.1, it predicts the company is solvent (1). Otherwise, if neither condition is met, it predicts the company is insolvent (0).

### Example usage:

```python
# Example input
X = {
    "EBIT/TA": 0.12,
    "NI/TC": 0.05,
    "Sales/TA": 0.8,
    "EBIT/Sales": 0.15,
    "NI/Sales": 0.07,
    "WC/TA": 0.1,
    "Equity/TL": 0.5,
    "Equity/TA": 0.25
}

# Call the function
prediction, nodes = predict(X)

# Output
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")
```

In this example:
- The first condition (Equity/TA > 0.3) is not satisfied (`nodes[0] = False`).
- The second condition (EBIT/TA > 0.1) is satisfied (`nodes[1] = True`).
So, the company is predicted to be solvent (`prediction = 1`).

You can adjust the thresholds based on domain knowledge or data insights for different use cases.
