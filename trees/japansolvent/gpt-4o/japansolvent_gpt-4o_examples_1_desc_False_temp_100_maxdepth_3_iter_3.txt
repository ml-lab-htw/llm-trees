Here is a decision tree of depth 3 based on the Features and the target variable `company is solvent` (1 = solvent, 0 = insolvent). The decision tree is generated without training on actual data, and it selects a few of the most important features for deciding the prediction.

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Inner node 1: EBIT/TA <= 0.1
    nodes[0] = X["EBIT/TA"] <= 0.1
    
    if nodes[0]:
        # Inner node 2: NI/TC <= 0.05
        nodes[1] = X["NI/TC"] <= 0.05
        if nodes[1]:
            # Inner node 3: WC/TA <= 0.0
            nodes[2] = X["WC/TA"] <= 0.0
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent
    else:
        # Inner node 2: Equity/TL <= 0.5
        nodes[1] = X["Equity/TL"] <= 0.5
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent
    
    return prediction, nodes
```

### Explanation:

- **Node 1** (Root): Checks if `EBIT/TA` (Earnings Before Interest and Taxes/Total Assets) is less than or equal to 0.1. If it is, the company may be more likely to be insolvent.
- **Node 2** (Left of Node 1): If `EBIT/TA <= 0.1`, it checks if `NI/TC` (Net Income/Total Capital) is less than or equal to 0.05. This further refines whether the company is solvent or not based on capital efficiency.
- **Node 3** (Left of Node 2): If both `EBIT/TA <= 0.1` and `NI/TC <= 0.05`, it further checks if `WC/TA` (Working Capital/Total Assets) is less than or equal to 0. This could indicate liquidity issues.
- **Node 2** (Right of Node 1): If `EBIT/TA > 0.1`, it checks if `Equity/TL` (Equity/Total Liabilities) is less than or equal to 0.5. This indicates whether the company has a strong equity position relative to its liabilities.

This tree has a maximum depth of 3 with 3 inner nodes.
