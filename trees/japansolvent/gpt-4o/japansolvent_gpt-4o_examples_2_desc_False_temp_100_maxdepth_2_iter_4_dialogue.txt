


Based on your requirements, we are going to build a function to predict the solvency of a company using the features provided. Recall our considered features and decision tree structure:

Decision tree:
```plaintext
|--- Equity / Total Liabilities <= 1.5
||--- Net Income / Total Capital <= 0.2
|||--- class: insolvent (0)
||--- Net Income / Total Capital > 0.2
|||--- class: solvent (1)
|--- Equity / Total Liabilities > 1.5
||--- class: solvent (1)
```

Weâ€™ll implement this decision tree in a function that outputs a prediction and keeps track of the truth values of the inner nodes.

```python
def predict(X: dict):
    # Initialize the truth values for the inner nodes
    nodes = 2 * [None]
    
    # Define the tree decision criteria
    nodes[0] = X['Equity/TL'] <= 1.5
    nodes[1] = X['NI/TC'] <= 0.2 if nodes[0] else None
    
    # Make predictions based on the decision tree
    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Company is insolvent
        else:
            prediction = 1  # Company is solvent
    else:
        prediction = 1  # Company is solvent

    return prediction, nodes

# Example usage
features_example = {
    'EBIT/TA': 0.1,       # Example feature values
    'NI/TC': 0.25,
    'Sales/TA': 0.5,
    'EBIT/Sales': 0.2,
    'NI/Sales': 0.1,
    'WC/TA': 0.3,
    'Equity/TL': 1.2,
    'Equity/TA': 0.6
}

prediction, nodes = predict(features_example)
print(f"Prediction: {prediction}, Nodes: {nodes}")
# Output should be something like: Prediction: 1, Nodes: [True, False]
```

### Explanation of the function:

1. **Initialization:** We initialize a list `nodes` to store the truth values of our inner nodes.
2. **Node 1 Check:** The first inner node checks if "Equity / Total Liabilities" is less than or equal to 1.5 (`nodes[0]`).
3. **Node 2 Check:** If the condition in Node 1 is true, we then check "Net Income / Total Capital" to be less than or equal to 0.2 (`nodes[1]`).
    - If `nodes[0]` is `True`, then we evaluate `nodes[1]` (it means our model will check the second feature only if the first condition is satisfied).
    - If `nodes[0]` is `False`, `nodes[1]` is not evaluated and remains `None`.
4. **Prediction:** Based on the evaluations of the inner nodes, the function makes a prediction:
    - If `nodes[0]` is `True` and `nodes[1]` is `True`, the company is insolvent (`prediction = 0`).
    - If `nodes[0]` is `True` and `nodes[1]` is `False`, the company is solvent (`prediction = 1`).
    - If `nodes[0]` is `False`, the company is solvent (`prediction = 1`).

5. **Return:** The function returns a tuple containing the prediction and the list of nodes.

You can now use the `predict` function to classify any company based on the provided feature set.