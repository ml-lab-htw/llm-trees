


Here is a Python function implementing the decision tree for classifying whether a company is solvent (1) or insolvent (0). It follows the specification, ensuring compliance with the provided feature names, target values, and logic representation:

```python
# Decision Tree Classifier Function
def predict(X: dict):
    # Initialize the list to store truth values of inner nodes
    nodes = 5 * [None]
    
    # Decision tree conditions based on features in X
    nodes[0] = X['Equity/TA'] <= 0.40  # Node 1
    nodes[1] = X['WC/TA'] <= -0.10 if nodes[0] else None  # Node 2
    nodes[2] = X['NI/Sales'] <= 0.00 if nodes[1] else (X['Sales/TA'] <= 1.25 if nodes[0] else None)  # Node 3
    nodes[3] = X['NI/TC'] <= 0.05 if not nodes[0] else None  # Node 4
    nodes[4] = X['EBIT/TA'] <= 0.08 if nodes[3] else None  # Node 5

    # Predictions based on the decision tree
    if nodes[0]:  # Equity/TA <= 0.40
        if nodes[1]:  # WC/TA <= -0.10
            if nodes[2]:  # NI/Sales <= 0.00
                prediction = 0  # Not Solvent
            else:
                prediction = 0  # Not Solvent
        else:  # WC/TA > -0.10
            if nodes[2]:  # Sales/TA <= 1.25
                prediction = 0  # Not Solvent
            else:
                prediction = 1  # Solvent
    else:  # Equity/TA > 0.40
        if nodes[3]:  # NI/TC <= 0.05
            if nodes[4]:  # EBIT/TA <= 0.08
                prediction = 0  # Not Solvent
            else:
                prediction = 1  # Solvent
        else:  # NI/TC > 0.05
            prediction = 1  # Solvent
    
    # Return the prediction and the list of inner node truth values
    return prediction, nodes
```

### Example Usage
You can use the function by passing a dictionary `X` where keys are the feature names and values are the feature values for a given company.

#### Example Input `X`
```python
X = {
    'EBIT/TA': 0.12,
    'NI/TC': 0.08,
    'Sales/TA': 1.50,
    'EBIT/Sales': 0.10,
    'NI/Sales': 0.05,
    'WC/TA': 0.02,
    'Equity/TL': 0.8,
    'Equity/TA': 0.50,
}

# Call the function
prediction, nodes = predict(X)

# Outputs
print(f"Prediction: {prediction}")  # Prediction: 1 (Solvent)
print(f"Nodes: {nodes}")  # Truth values of the inner nodes
```

#### Example Output
If the input dictionary is as follows:
```python
X = {
    'EBIT/TA': 0.05,
    'NI/TC': 0.03,
    'Sales/TA': 0.90,
    'EBIT/Sales': 0.07,
    'NI/Sales': -0.01,
    'WC/TA': -0.20,
    'Equity/TL': 0.3,
    'Equity/TA': 0.35,
}
```
The output would be:
```plaintext
Prediction: 0  # Not Solvent
Nodes: [True, True, True, None, None]
```

### Explanation of the Function
1. **Nodes**:
   - The truth values for each decision node are stored in the `nodes` list.
   - The conditions at each node follow the decision tree logic discussed earlier.

2. **Prediction**:
   - Along with the traversal of the decision tree, we make a final prediction (`1` for solvent and `0` for not solvent).

3. **Functionality**:
   - The function handles decisions hierarchically and captures the inner-node conditions, allowing the user to interpret the decision-making process.