Here's a decision tree classifier with a maximum depth of 4 based on the Features you provided:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Inner nodes based on feature thresholds
    nodes[0] = X["EBIT/TA"] > 0.05
    nodes[1] = X["NI/TC"] > 0.02
    nodes[2] = X["Equity/TL"] > 0.5
    nodes[3] = X["WC/TA"] > 0.1

    # Final decision logic based on the inner nodes
    if nodes[0]:
        if nodes[1]:
            if nodes[2]:
                if nodes[3]:
                    prediction = 1  # Solvent
                else:
                    prediction = 0  # Insolvent
            else:
                if nodes[3]:
                    prediction = 1  # Solvent
                else:
                    prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 1  # Solvent
            else:
                prediction = 0  # Insolvent
    else:
        if nodes[1]:
            if nodes[3]:
                prediction = 1  # Solvent
            else:
                prediction = 0  # Insolvent
        else:
            prediction = 0  # Insolvent

    return prediction, nodes
```

### Explanation of the decision tree:
- **Node 0:** If "EBIT/TA" (Earnings Before Interest and Taxes/Total Assets) is greater than 0.05, this is a good indicator of profitability, which generally suggests solvency.
- **Node 1:** If "NI/TC" (Net Income/Total Capital) is greater than 0.02, this indicates positive returns relative to the capital invested.
- **Node 2:** If "Equity/TL" (Equity/Total Liabilities) is greater than 0.5, this suggests that the company has a strong equity position relative to its liabilities.
- **Node 3:** If "WC/TA" (Working Capital/Total Assets) is greater than 0.1, this indicates the company has sufficient liquidity, which is a good sign of solvency.

### Usage:
- The function `predict(X)` accepts a dictionary `X` with the feature values for a particular company.
- It returns the predicted class (1 for solvent, 0 for insolvent) and a list of boolean values representing whether each condition (node) was satisfied.

### Example:

```python
company_data = {
    "EBIT/TA": 0.08,
    "NI/TC": 0.03,
    "Sales/TA": 1.5,
    "EBIT/Sales": 0.15,
    "NI/Sales": 0.07,
    "WC/TA": 0.12,
    "Equity/TL": 0.6,
    "Equity/TA": 0.4
}

prediction, nodes = predict(company_data)
print(f"Prediction: {'Solvent' if prediction == 1 else 'Insolvent'}, Nodes: {nodes}")
```

In this example, the function predicts whether the company is solvent based on the provided financial metrics and returns the truth values of the inner nodes.
