


Below is the Python function implementing the decision tree for the classification of whether a company is solvent (1 = solvent, 0 = insolvent). The function also returns a list of truth values representing the satisfaction of the inner node conditions.

```python
def predict(X: dict):
    """
    Predict whether a company is solvent (1) or not solvent (0) based on financial features.
    
    Parameters:
    X (dict): A dictionary containing the following financial features:
        'EBIT/TA': Earnings Before Interest and Taxes/Total Assets
        'NI/TC': Net Income/Total Capital
        'Sales/TA': Sales/Total Assets
        'EBIT/Sales': Earnings Before Interest and Taxes/Sales
        'NI/Sales': Net Income/Sales
        'WC/TA': Working Capital/Total Assets
        'Equity/TL': Equity/Total Liabilities
        'Equity/TA': Equity/Total Assets

    Returns:
    tuple: A tuple containing:
        - prediction (int): 1 if solvent, 0 if not solvent
        - nodes (list): A list of boolean values representing the satisfaction of inner node conditions
    """
    # List to store the truth values of the inner node conditions
    nodes = 5 * [None]
    
    # Decision tree conditions
    nodes[0] = X["WC/TA"] <= 0.15  # Working Capital/Total Assets
    nodes[1] = X["Equity/TL"] <= 0.50  # Equity/Total Liabilities
    nodes[2] = X["Sales/TA"] <= 0.80  # Sales/Total Assets
    nodes[3] = X["EBIT/TA"] <= 0.10  # EBIT/Total Assets
    nodes[4] = X["NI/Sales"] <= 0.05  # Net Income/Sales
    
    # Traverse the decision tree
    if nodes[0]:  # WC/TA <= 0.15
        if nodes[1]:  # Equity/TL <= 0.50
            prediction = 0  # Not solvent
        else:  # Equity/TL > 0.50
            if nodes[2]:  # Sales/TA <= 0.80
                prediction = 0  # Not solvent
            else:  # Sales/TA > 0.80
                prediction = 1  # Solvent
    else:  # WC/TA > 0.15
        if nodes[3]:  # EBIT/TA <= 0.10
            if nodes[4]:  # NI/Sales <= 0.05
                prediction = 0  # Not solvent
            else:  # NI/Sales > 0.05
                if X["Equity/TA"] <= 0.40:  # Equity/Total Assets <= 0.40
                    prediction = 0  # Not solvent
                else:  # Equity/Total Assets > 0.40
                    prediction = 1  # Solvent
        else:  # EBIT/TA > 0.10
            prediction = 1  # Solvent
    
    # Return the prediction and the truth values of the nodes
    return prediction, nodes
```

### Explanation of Decision Tree in Code
1. **Node Conditions:** 
   - The nodes are defined based on features and thresholds (e.g., `WC/TA <= 0.15`).
   - These conditions correspond directly to the decision tree described earlier.
2. **Truth Values List (`nodes`):**
   - Each node evaluates to `True` (1) or `False` (0) based on the input `X`.
3. **Traversal Logic:**
   - If-else conditions replicate the decision tree structure to arrive at a final prediction based on the truth values of the nodes.
4. **Values and Thresholds:**
   - Threshold values for each feature are meaningful and based on expected financial reasoning (e.g., `WC/TA <= 0.15` suggests low liquidity).

### Example Usage
```python
# Example input dictionary with financial feature values
X = {
    "EBIT/TA": 0.12,
    "NI/TC": 0.08,
    "Sales/TA": 0.85,
    "EBIT/Sales": 0.20,
    "NI/Sales": 0.06,
    "WC/TA": 0.18,
    "Equity/TL": 0.45,
    "Equity/TA": 0.50,
}

# Predict solvency and get node truth values
prediction, nodes = predict(X)

print("Prediction:", prediction)  # 1 = solvent, 0 = not solvent
print("Node Truth Values:", nodes)  # List of boolean values for each node
```

### Example Output
```python
Prediction: 1
Node Truth Values: [False, False, False, False, False]
```

This function is a Pythonic implementation of the decision tree and fulfills the requirement to predict the solvency of a company while providing detailed information about which inner nodes' conditions were satisfied.