


Here is the Python function for the decision tree classifier based on the provided features and target variable:

```python
def predict(X: dict):
    """
    Predict whether a company is solvent (1) or insolvent (0) based on financial features.

    Parameters:
    X (dict): A dictionary containing the following keys:
        'EBIT/TA': Earnings Before Interest and Taxes/Total Assets
        'NI/TC': Net Income/Total Capital
        'Sales/TA': Sales/Total Assets
        'EBIT/Sales': Earnings Before Interest and Taxes/Sales
        'NI/Sales': Net Income/Sales
        'WC/TA': Working Capital/Total Assets
        'Equity/TL': Equity/Total Liabilities
        'Equity/TA': Equity/Total Assets

    Returns:
    tuple: A tuple containing:
        - prediction (int): 1 if the company is solvent, 0 if insolvent.
        - nodes (list): A list of truth values (1 or 0) for the conditions of the inner nodes.
    """
    # Initialize the list of nodes
    nodes = 2 * [None]
    
    # Inner node conditions
    nodes[0] = X["EBIT/TA"] <= 0.15
    nodes[1] = X["Equity/TL"] <= 1.2 if nodes[0] else X["NI/Sales"] <= 0.10

    # Decision tree logic
    if nodes[0]:  # EBIT/TA <= 0.15
        if nodes[1]:  # Equity/TL <= 1.2
            prediction = 0  # Not Solvent
        else:  # Equity/TL > 1.2
            prediction = 1  # Solvent
    else:  # EBIT/TA > 0.15
        if nodes[1]:  # NI/Sales <= 0.10
            prediction = 0  # Not Solvent
        else:  # NI/Sales > 0.10
            prediction = 1  # Solvent

    return prediction, nodes
```

### Explanation:
1. **Input**: The function takes a dictionary `X` where the keys are the feature names (e.g., `'EBIT/TA'`, `'Equity/TL'`, `'NI/Sales'`) and the values are the corresponding feature values.

2. **Nodes**: 
   - `nodes[0]` checks if `'EBIT/TA'` is less than or equal to `0.15`.
   - `nodes[1]` depends on the result of `nodes[0]`. If `nodes[0]` is true, it checks if `'Equity/TL'` is less than or equal to `1.2`. Otherwise, it checks if `'NI/Sales'` is less than or equal to `0.10`.

3. **Prediction**:
   - If `'EBIT/TA'` is less than or equal to `0.15` and `'Equity/TL'` is less than or equal to `1.2`, the company is classified as `Not Solvent` (0).
   - If `'EBIT/TA'` is less than or equal to `0.15` but `'Equity/TL'` is greater than `1.2`, the company is classified as `Solvent` (1).
   - If `'EBIT/TA'` is greater than `0.15` and `'NI/Sales'` is less than or equal to `0.10`, the company is classified as `Not Solvent` (0).
   - If `'EBIT/TA'` is greater than `0.15` and `'NI/Sales'` is greater than `0.10`, the company is classified as `Solvent` (1).

4. **Output**: The function returns:
   - The prediction (`1` for solvent, `0` for insolvent).
   - A list of truth values (`1` for true, `0` for false) for the inner node conditions.

### Example Usage:
```python
# Example input
X = {
    "EBIT/TA": 0.10,
    "NI/TC": 0.05,
    "Sales/TA": 0.80,
    "EBIT/Sales": 0.12,
    "NI/Sales": 0.15,
    "WC/TA": 0.20,
    "Equity/TL": 1.5,
    "Equity/TA": 0.6
}

# Make prediction
prediction, nodes = predict(X)

# Output
print("Prediction:", prediction)  # 1 (Solvent)
print("Nodes:", nodes)  # [True, False]
```