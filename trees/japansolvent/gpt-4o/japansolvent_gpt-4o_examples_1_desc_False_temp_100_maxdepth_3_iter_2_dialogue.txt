


Here is the Python implementation of your decision tree classifier for classifying whether a company is solvent or not, using the given feature names and thresholds. The function `predict` takes a dictionary `X` as input, where the keys are the feature names, and returns a prediction as well as a list representing the truth values of the inner nodes.

```python
def predict(X: dict):
    # Initialize the nodes list to store the truth values of the inner nodes
    nodes = 3 * [None]
    
    # Decision tree logic
    nodes[0] = X["Equity/TL"] <= 1.5
    nodes[1] = X["NI/Sales"] <= 0.05
    nodes[2] = X["EBIT/TA"] <= 0.1
    
    # Branch logic to determine the prediction
    if nodes[0]:  # If Equity/Total Liabilities <= 1.5
        if nodes[1]:  # If Net Income/Sales <= 0.05
            prediction = 0  # Not solvent
        else:  # Net Income/Sales > 0.05
            prediction = 1  # Solvent
    else:  # Equity/Total Liabilities > 1.5
        if nodes[2]:  # If EBIT/Total Assets <= 0.1
            prediction = 0  # Not solvent
        else:  # EBIT/Total Assets > 0.1
            prediction = 1  # Solvent

    return prediction, nodes
```

### Explanation:
1. **Node truth values (`nodes`):**
   - `nodes[0]`: Checks if the company's `Equity/Total Liabilities` ratio is less than or equal to `1.5`. (This is the root node.)
   - `nodes[1]`: Checks if the company's `Net Income/Sales` ratio is less than or equal to `0.05`. (This is the second-level node in the left branch.)
   - `nodes[2]`: Checks if the company's `Earnings Before Interest and Taxes/Total Assets (EBIT/TA)` ratio is less than or equal to `0.1`. (This is the second-level node in the right branch.)

2. **Prediction:**
   - If `Equity/Total Liabilities` is high (> 1.5), the company is typically solvent unless the company's efficiency and return on assets (`EBIT/TA`) are very low.
   - If `Equity/Total Liabilities` is low (<= 1.5), the company's solvency depends on profitability (`NI/Sales`).

---

### Example Usage:

```python
# Example input: Financial ratios of a company
X = {
    "EBIT/TA": 0.12, 
    "NI/TC": 0.08, 
    "Sales/TA": 1.5, 
    "EBIT/Sales": 0.2,
    "NI/Sales": 0.04, 
    "WC/TA": 0.05, 
    "Equity/TL": 1.4, 
    "Equity/TA": 0.5
}

# Call the predict function
prediction, nodes = predict(X)

print("Prediction (1=solvent, 0=not solvent):", prediction)
print("Nodes truth values (inner nodes):", nodes)
```

### Example Output:
For the above input:
```plaintext
Prediction (1=solvent, 0=not solvent): 0
Nodes truth values (inner nodes): [True, True, None]
```

### How It Works:
1. `Equity/TL` is 1.4, which satisfies the first condition (`nodes[0]` is `True`).
2. `NI/Sales` is 0.04, which is less than or equal to 0.05 (`nodes[1]` is `True`).
3. Therefore, the company is classified as `Not Solvent` (`prediction = 0`).

Let me know if you need further clarifications or modifications!