


Below is the Python function that implements the formatted decision tree for classifying whether a company is solvent or not. The function takes a dictionary of features as input and returns a prediction (1 = solvent, 0 = insolvent) along with a list representing the truth values of the inner nodes:

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent (1) or not (0)
    based on the provided financial feature values.

    Parameters:
        X (dict): A dictionary containing the following keys:
            'EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales',
            'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA'

    Returns:
        tuple: A tuple containing:
            - prediction (int): 1 = solvent, 0 = insolvent
            - nodes (list): List of truth values (1 for True, 0 for False) for inner nodes
    """
    # List to store the truth values of the inner nodes
    nodes = 7 * [None]  # Adjust the number of nodes based on tree depth

    # Inner node conditions
    nodes[0] = X['NI/TC'] <= 0.15  # Root node
    nodes[1] = X['WC/TA'] <= -0.10 if nodes[0] else None
    nodes[2] = X['Equity/TL'] <= 0.50 if nodes[1] else None
    nodes[3] = X['Sales/TA'] <= 1.20 if nodes[0] and not nodes[1] else None
    nodes[4] = X['Equity/TA'] <= 0.40 if not nodes[0] else None
    nodes[5] = X['EBIT/TA'] <= 0.05 if not nodes[0] and nodes[4] else None
    nodes[6] = X['NI/Sales'] <= 0.08 if not nodes[0] and not nodes[4] else None

    # Decision tree logic
    if nodes[0]:  # NI/TC <= 0.15
        if nodes[1]:  # WC/TA <= -0.10
            if nodes[2]:  # Equity/TL <= 0.50
                prediction = 0  # Not solvent
            else:  # Equity/TL > 0.50
                prediction = 1  # Solvent
        else:  # WC/TA > -0.10
            if nodes[3]:  # Sales/TA <= 1.20
                prediction = 0  # Not solvent
            else:  # Sales/TA > 1.20
                prediction = 1  # Solvent
    else:  # NI/TC > 0.15
        if nodes[4]:  # Equity/TA <= 0.40
            if nodes[5]:  # EBIT/TA <= 0.05
                prediction = 0  # Not solvent
            else:  # EBIT/TA > 0.05
                prediction = 1  # Solvent
        else:  # Equity/TA > 0.40
            if nodes[6]:  # NI/Sales <= 0.08
                prediction = 0  # Not solvent
            else:  # NI/Sales > 0.08
                prediction = 1  # Solvent

    return prediction, nodes
```

### Example Usage:
Here's an example of how to use the function to make a prediction:

```python
# Example input features
X = {
    'EBIT/TA': 0.06,
    'NI/TC': 0.10,
    'Sales/TA': 1.30,
    'EBIT/Sales': 0.12,
    'NI/Sales': 0.09,
    'WC/TA': -0.05,
    'Equity/TL': 0.60,
    'Equity/TA': 0.50
}

# Get the prediction and inner node truth values
prediction, nodes = predict(X)

# Output the results
print(f"Prediction: {prediction} (1 = solvent, 0 = insolvent)")
print(f"Inner node truth values: {nodes}")
```

### Example Output:
If the given input `X` produces the following conditions:
- `NI/TC <= 0.15` → True
- `WC/TA > -0.10` → True
- `Sales/TA > 1.20` → True

The output will be:
```
Prediction: 1 (1 = solvent, 0 = insolvent)
Inner node truth values: [1, 0, None, 0, None, None, None]
```

This function ensures a depth of 4 and meaningful thresholds for each condition based on the features' importance provided in the example.