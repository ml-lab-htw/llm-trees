


Sure! Below is the Python implementation of the decision tree classifier for predicting whether a company is solvent (`1 = solvent`) or not (`0 = insolvent`). The function takes a dictionary `X` containing the features of a company and outputs a prediction along with a list representing the truth values of the inner nodes.

### Python Implementation

```python
def predict(X: dict):
    """
    Decision tree classifier for predicting whether a company is solvent (1) or not (0).

    Parameters:
        X (dict): A dictionary containing feature values with the exact keys:
            'EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA'

    Returns:
        tuple: 
            prediction (int): 1 if the company is solvent, 0 otherwise.
            nodes (list): Boolean values representing the truth values of the inner tree nodes.
    """

    # Initialize the list of node truth values (inner nodes of the tree)
    nodes = [None] * 3

    # Node 1: 'EBIT/TA' <= 0.10
    nodes[0] = X["EBIT/TA"] <= 0.10
    if nodes[0]:
        # Node 2: 'Equity/TA' <= 0.20
        nodes[1] = X["Equity/TA"] <= 0.20
        if nodes[1]:
            prediction = 0  # Not Solvent
        else:
            prediction = 1  # Solvent
    else:
        # Node 3: 'NI/TC' <= 0.05
        nodes[1] = X["NI/TC"] <= 0.05
        if nodes[1]:
            # Node 4: 'WC/TA' <= 0.15
            nodes[2] = X["WC/TA"] <= 0.15
            if nodes[2]:
                prediction = 0  # Not Solvent
            else:
                prediction = 1  # Solvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes
```

### Explanation of the Code
1. **Input Features (`X`):** The function expects a dictionary, `X`, where each key corresponds to one of the feature names: `'EBIT/TA'`, `'NI/TC'`, `'Sales/TA'`, `'EBIT/Sales'`, `'NI/Sales'`, `'WC/TA'`, `'Equity/TL'`, and `'Equity/TA'`.
2. **Inner Nodes:**
   - Node 1 checks whether `'EBIT/TA' <= 0.10`. This evaluates a company’s profitability relative to its assets.
   - Node 2 (inside the `EBIT/TA <= 0.10` branch) checks whether `'Equity/TA' <= 0.20` to assess solvency based on equity relative to total assets.
   - Node 3 (inside the `EBIT/TA > 0.10` branch) checks whether `'NI/TC' <= 0.05` to evaluate financial risk based on net income relative to total capital.
   - Node 4 (inside the `NI/TC <= 0.05` branch) checks `'WC/TA' <= 0.15`, which measures working capital relative to total assets.
3. **Leaf Predictions:**
   - If a path ends at a "Not Solvent" condition, the function returns `0`.
   - Otherwise, it returns `1`, indicating the company is solvent.
4. **Nodes List (`nodes`):** The nodes list stores the truth values of the decision conditions at the three inner nodes. This makes it easy to analyze the path taken by the decision tree.

### Example Usage
```python
# Example input feature values for a company
X = {
    "EBIT/TA": 0.08, 
    "NI/TC": 0.03, 
    "Sales/TA": 1.2, 
    "EBIT/Sales": 0.15, 
    "NI/Sales": 0.10, 
    "WC/TA": 0.10, 
    "Equity/TL": 1.5, 
    "Equity/TA": 0.25
}

# Make prediction
prediction, nodes = predict(X)

# Output the results
print("Prediction (1 = solvent, 0 = insolvent):", prediction)
print("Truth values of inner nodes:", nodes)
```

### Example Output
```plaintext
Prediction (1 = solvent, 0 = insolvent): 1
Truth values of inner nodes: [True, False, None]
```

In this example:
- Node 1 (`'EBIT/TA' <= 0.10`) evaluates to `True`.
- Node 2 (`'Equity/TA' <= 0.20`) evaluates to `False`.
- Node 3 is not evaluated (`None`) because the path doesn't reach that point.

---

Let me know if you’d like further explanations or additional depth!