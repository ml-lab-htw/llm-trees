Here is a decision tree of depth 5 using the provided features and the Target variable:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # Decision Tree Logic
    nodes[0] = X["EBIT/TA"] > 0.1
    nodes[1] = X["NI/TC"] > 0.05
    nodes[2] = X["Sales/TA"] > 0.8
    nodes[3] = X["Equity/TL"] > 1.0
    nodes[4] = X["WC/TA"] > 0.1
    
    if nodes[0]:
        if nodes[1]:
            if nodes[2]:
                if nodes[3]:
                    if nodes[4]:
                        prediction = 1 # Solvent
                    else:
                        prediction = 1 # Solvent
                else:
                    prediction = 0 # Insolvent
            else:
                if nodes[4]:
                    prediction = 1 # Solvent
                else:
                    prediction = 0 # Insolvent
        else:
            if nodes[3]:
                prediction = 1 # Solvent
            else:
                prediction = 0 # Insolvent
    else:
        if nodes[2]:
            prediction = 0 # Insolvent
        else:
            prediction = 0 # Insolvent
    
    return prediction, nodes
```

### Explanation of the Decision Tree:
1. **Node 0 (EBIT/TA > 0.1):** The first decision is based on the company's EBIT to Total Assets ratio. If it's greater than 0.1, the company is likely solvent.
2. **Node 1 (NI/TC > 0.05):** If the company passed the first test, the next condition checks if the Net Income to Total Capital ratio is greater than 0.05.
3. **Node 2 (Sales/TA > 0.8):** The third condition is based on the company's sales relative to total assets. If it's greater than 0.8, the company is likely solvent.
4. **Node 3 (Equity/TL > 1.0):** This node checks if the company's equity is greater than its total liabilities.
5. **Node 4 (WC/TA > 0.1):** Lastly, it checks if the Working Capital to Total Assets ratio is greater than 0.1.

### How to use:
- You pass a dictionary `X` containing the following keys:
  - `EBIT/TA`
  - `NI/TC`
  - `Sales/TA`
  - `Equity/TL`
  - `WC/TA`
  
The function will:
- Return a prediction (1 = solvent, 0 = insolvent).
- Return a list of boolean values indicating whether the conditions of the inner nodes were satisfied (1 for true, 0 for false).

### Example:

```python
X = {
    "EBIT/TA": 0.15,
    "NI/TC": 0.06,
    "Sales/TA": 0.85,
    "Equity/TL": 1.2,
    "WC/TA": 0.12
}

prediction, nodes = predict(X)
print("Prediction:", prediction)
print("Node conditions:", nodes)
```

This would output:

```
Prediction: 1
Node conditions: [True, True, True, True, True]
```
