


Given the provided features and the target variable encoding, I'll write a Python function that predicts whether a company is solvent or not based on the decision tree classifier outlined previously. This function will also return a list of truth values indicating whether the conditions at each inner node are satisfied.

Here's the implementation of the decision tree in Python:

```python
def predict(X: dict):
    # Initialize a list to store the truth values of the inner nodes
    nodes = 2 * [None]
    
    # Define the thresholds
    threshold_1 = 0.1
    threshold_2 = 1.0

    # Evaluate the conditions at each node
    nodes[0] = X["EBIT/TA"] > threshold_1
    if nodes[0]:
        nodes[1] = X["Equity/TL"] > threshold_2
        if nodes[1]:
            prediction = 1  # Solvent
        else:
            prediction = 0  # Not Solvent
    else:
        prediction = 0  # Not Solvent

    return prediction, nodes

# Example input
example_input = {
    'EBIT/TA': 0.15,
    'NI/TC': 0.05,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.2,
    'NI/Sales': 0.1,
    'WC/TA': 0.3,
    'Equity/TL': 1.2,
    'Equity/TA': 0.5
}

# Example usage
prediction, nodes = predict(example_input)
print(f'Prediction: {prediction}, Nodes: {nodes}')
```

In this code:
- `nodes` is a list to hold the truth values of the inner conditions.
- `nodes[0]` checks if `EBIT/TA` is greater than `0.1`.
- If `nodes[0]` is `True`, then `nodes[1]` checks if `Equity/TL` is greater than `1.0`.
- Based on these conditions, the function makes a prediction (`1` for solvent and `0` for not solvent) and outputs the result along with the truth values of the nodes.

You can test the function with different input values by modifying the `example_input` dictionary.