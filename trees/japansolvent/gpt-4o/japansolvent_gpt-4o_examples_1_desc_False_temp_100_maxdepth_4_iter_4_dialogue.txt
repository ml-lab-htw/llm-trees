


Below is the Python function implementation of the decision tree based on your previous description. This function predicts whether a company is solvent (1) or insolvent (0) and returns the boolean evaluation results of the inner nodes in addition to the final prediction.

```python
def predict(X: dict):
    """
    Predict whether a company is solvent or insolvent based on financial ratios.
    
    Args:
    X (dict): A dictionary containing the financial feature values for a company.
              Keys: 'EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 'WC/TA',
                    'Equity/TL', 'Equity/TA'
    
    Returns:
    tuple: (int, list) where the first element is the prediction 
                      (1 = solvent, 0 = insolvent)
                      and the second element is the list of truth values 
                      (1 = condition satisfied, 0 = condition not satisfied).
    """
    nodes = 7 * [None]  # Initialize a list to store the truth values for the inner nodes

    # Decision tree conditions
    nodes[0] = X['EBIT/TA'] <= 0.08
    nodes[1] = X['NI/TC'] <= 0.05
    nodes[2] = X['WC/TA'] <= -0.10
    nodes[3] = X['Equity/TL'] <= 1.50
    nodes[4] = X['EBIT/Sales'] <= 0.12
    nodes[5] = X['NI/Sales'] <= 0.03
    nodes[6] = X['Sales/TA'] <= 1.20

    # Decision tree structure
    if nodes[0]:  # EBIT/TA <= 0.08
        if nodes[1]:  # NI/TC <= 0.05
            if nodes[2]:  # WC/TA <= -0.10
                prediction = 0  # Not Solvent
            else:  # WC/TA > -0.10
                prediction = 1  # Solvent
        else:  # NI/TC > 0.05
            if nodes[3]:  # Equity/TL <= 1.50
                prediction = 0  # Not Solvent
            else:  # Equity/TL > 1.50
                prediction = 1  # Solvent
    else:  # EBIT/TA > 0.08
        if nodes[4]:  # EBIT/Sales <= 0.12
            if nodes[5]:  # NI/Sales <= 0.03
                prediction = 0  # Not Solvent
            else:  # NI/Sales > 0.03
                prediction = 1  # Solvent
        else:  # EBIT/Sales > 0.12
            if nodes[6]:  # Sales/TA <= 1.20
                prediction = 1  # Solvent
            else:  # Sales/TA > 1.20
                prediction = 0  # Not Solvent

    return prediction, nodes
```

### Explanation:
1. **Input Data Format (`X`)**:
   - The function takes a dictionary `X` where each key is one of the financial feature names, exactly as listed in the problem statement:
     - `'EBIT/TA'`
     - `'NI/TC'`
     - `'Sales/TA'`
     - `'EBIT/Sales'`
     - `'NI/Sales'`
     - `'WC/TA'`
     - `'Equity/TL'`
     - `'Equity/TA'`

2. **Inner Nodes**:
   - The `nodes` list stores the truth values (`True` or `False`, represented as `1` or `0`) of the conditions in the decision tree, evaluated sequentially. Each decision is based on one or more combinations of features and thresholds.

3. **Tree Evaluation**:
   - The decision tree has a maximum depth of 4.
   - Starting from the root condition, the logic evaluates whether each condition is satisfied (`True`) or not (`False`), moving down the tree until a terminal node (leaf) is reached.

4. **Output**:
   - **Prediction**: The final decision output is `1` (solvent) or `0` (insolvent).
   - **Inner Node Truth Values**: A list containing `1` if the condition of a node was satisfied, otherwise `0`.

### Example Usage:
```python
# Input feature values for a company
company_features = {
    'EBIT/TA': 0.09,
    'NI/TC': 0.04,
    'Sales/TA': 1.15,
    'EBIT/Sales': 0.10,
    'NI/Sales': 0.02,
    'WC/TA': -0.05,
    'Equity/TL': 1.60,
    'Equity/TA': 0.50
}

# Run the prediction
prediction, nodes = predict(company_features)

# Output
print("Prediction (1 = Solvent, 0 = Insolvent):", prediction)
print("Inner Node Evaluations:", nodes)
```

### Example Output:
Given hypothetical values for `company_features`:
```
Prediction (1 = Solvent, 0 = Insolvent): 1
Inner Node Evaluations: [False, True, False, False, True, True, True]
```