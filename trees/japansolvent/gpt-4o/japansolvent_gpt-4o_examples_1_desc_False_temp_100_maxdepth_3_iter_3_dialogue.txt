


Here is the Python function for the decision tree classifier based on the provided financial features. The function makes a prediction about whether a company is solvent (1 = solvent, 0 = insolvent) and returns a list of truth values for the inner nodes:

```python
def predict(X: dict):
    """
    Decision tree classifier for predicting if a company is solvent (1) or not solvent (0).

    Parameters:
    X (dict): A dictionary containing the following keys:
        'EBIT/TA': Earnings Before Interest and Taxes/Total Assets
        'NI/TC': Net Income/Total Capital
        'Sales/TA': Sales/Total Assets
        'EBIT/Sales': Earnings Before Interest and Taxes/Sales
        'NI/Sales': Net Income/Sales
        'WC/TA': Working Capital/Total Assets
        'Equity/TL': Equity/Total Liabilities
        'Equity/TA': Equity/Total Assets

    Returns:
    tuple: A tuple where the first element is the prediction (0 or 1), and the second element
           is a list of truth values for the conditions in the inner nodes.
    """
    nodes = 3 * [None]  # Initialize truth values for the three nodes
    
    # Node 0: Check `Equity/TL` <= 1.0
    nodes[0] = X["Equity/TL"] <= 1.0
    
    if nodes[0]:
        # Node 1: Check `NI/TC` <= 0.05
        nodes[1] = X["NI/TC"] <= 0.05
        if nodes[1]:
            # If Equity/TL <= 1.0 and NI/TC <= 0.05, classify as not solvent (0)
            prediction = 0
        else:
            # If Equity/TL <= 1.0 and NI/TC > 0.05, classify as solvent (1)
            prediction = 1
    else:
        # Node 2: Check `EBIT/TA` <= 0.08
        nodes[2] = X["EBIT/TA"] <= 0.08
        if nodes[2]:
            # If Equity/TL > 1.0 and EBIT/TA <= 0.08, classify as not solvent (0)
            prediction = 0
        else:
            # If Equity/TL > 1.0 and EBIT/TA > 0.08, classify as solvent (1)
            prediction = 1
    
    return prediction, nodes
```

### Explanation of the Decision Tree:
1. **Node 0**:
   - The first condition checks `Equity/TL` (Equity/Total Liabilities). If this ratio is less than or equal to 1.0, the company is less financially stable, and we proceed down the "not solvent" branch. Otherwise, we move to the branch for solvent companies.
   
2. **Node 1**:
   - For companies with `Equity/TL` ≤ 1.0, we next evaluate `NI/TC` (Net Income/Total Capital). A low ratio (≤ 0.05) indicates poor profitability, so the company is classified as **not solvent**. Otherwise, it is classified as **solvent**.

3. **Node 2**:
   - For companies with `Equity/TL` > 1.0, we evaluate `EBIT/TA` (Earnings Before Interest and Taxes/Total Assets), which measures how efficiently the company generates earnings from its assets. If this ratio is ≤ 0.08, it's classified as **not solvent**. Otherwise, it's classified as **solvent**.

### Example Usage:

```python
# Example company features
company_features = {
    "EBIT/TA": 0.10,
    "NI/TC": 0.02,
    "Sales/TA": 0.5,
    "EBIT/Sales": 0.15,
    "NI/Sales": 0.03,
    "WC/TA": 0.2,
    "Equity/TL": 0.8,
    "Equity/TA": 0.5
}

# Prediction
prediction, nodes = predict(company_features)
print("Prediction:", prediction)  # Output: 0 (Not Solvent)
print("Nodes:", nodes)  # Output: [True, True, None]
```

The `nodes` list shows the truth values of the conditions for each split. For example:
- `nodes[0] == True` means `Equity/TL` ≤ 1.0 was satisfied.
- `nodes[1] == True` means `NI/TC` ≤ 0.05 was satisfied.
- `nodes[2] == None` because it was not evaluated.

This function provides both the classification result and a breakdown of the decision path, which can be helpful for debugging or interpreting the model’s decision process.