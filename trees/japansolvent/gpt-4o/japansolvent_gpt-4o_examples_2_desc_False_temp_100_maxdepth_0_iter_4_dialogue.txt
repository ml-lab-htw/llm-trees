


Given the exact keys for the features and the structure of the previous examples, I'll write a Python function that represents the decision tree for classifying whether a company is solvent or not. This function will return a single prediction and a list representing the truth values of the inner nodes.

```python
def predict(X: dict):
    nodes = 4 * [None]
    nodes[0] = X["Equity/TL"] <= 1.5
    nodes[1] = X["EBIT/TA"] <= 0.06
    nodes[2] = X["NI/TC"] <= 0.03

    # Decision logic based on the nodes
    if nodes[0]:
        if nodes[1]:
            # Node 0 is True and Node 1 is True
            prediction = 0  # Not Solvent
        else:
            # Node 0 is True and Node 1 is False
            prediction = 1  # Solvent
    else:
        if nodes[2]:
            # Node 0 is False and Node 2 is True
            prediction = 0  # Not Solvent
        else:
            # Node 0 is False and Node 2 is False
            prediction = 1  # Solvent

    return prediction, nodes

# Example usage:
# features = {
#     'EBIT/TA': 0.05,
#     'NI/TC': 0.02,
#     'Sales/TA': 0.8,
#     'EBIT/Sales': 0.1,
#     'NI/Sales': 0.08,
#     'WC/TA': 0.2,
#     'Equity/TL': 1.4,
#     'Equity/TA': 0.7
# }
# prediction, nodes = predict(features)
# print(f"Prediction: {prediction}, Nodes: {nodes}")
```

### Explanation:
This tree uses three inner nodes to make a classification:
1. **Equity/Total Liabilities**: If this ratio is less than or equal to 1.5, it goes down one path; otherwise, it goes down another.
2. **Earnings Before Interest and Taxes/Total Assets**: If this is less than or equal to 0.06, and the first node's condition is true, the company is classified as not solvent.
3. **Net Income/Total Capital**: This node is considered if the first node's condition is false. If this ratio is less than or equal to 0.03, the company is classified as not solvent.

The function uses these conditions to determine the solvency classification and returns both the prediction and the list of node conditions (truth values).
