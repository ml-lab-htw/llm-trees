


Here is the Python function for the decision tree classifier based on the features and target variable you provided. The function will return a single prediction (1 = solvent, 0 = insolvent) and a list representing the truth values of the inner nodes.

```python
def predict(X: dict):
    """
    Predict whether a company is solvent (1) or insolvent (0) based on financial ratios.

    Parameters:
    X (dict): A dictionary containing the following keys:
        - 'EBIT/TA': Earnings Before Interest and Taxes/Total Assets
        - 'NI/TC': Net Income/Total Capital
        - 'Sales/TA': Sales/Total Assets
        - 'EBIT/Sales': Earnings Before Interest and Taxes/Sales
        - 'NI/Sales': Net Income/Sales
        - 'WC/TA': Working Capital/Total Assets
        - 'Equity/TL': Equity/Total Liabilities
        - 'Equity/TA': Equity/Total Assets

    Returns:
    tuple: A tuple containing:
        - prediction (int): 1 if the company is solvent, 0 if insolvent
        - nodes (list): A list of truth values (1 or 0) for the inner nodes
    """
    # Initialize the list of nodes
    nodes = 2 * [None]
    
    # Decision tree logic
    nodes[0] = X["EBIT/TA"] <= 0.10  # First split: EBIT/TA threshold
    nodes[1] = X["NI/TC"] <= 0.05    # Second split: NI/TC threshold
    
    if nodes[0]:  # If EBIT/TA <= 0.10
        prediction = 0  # Insolvent
    else:  # If EBIT/TA > 0.10
        if nodes[1]:  # If NI/TC <= 0.05
            prediction = 0  # Insolvent
        else:  # If NI/TC > 0.05
            prediction = 1  # Solvent

    return prediction, nodes
```

### Explanation of the Function:
1. **Input**: The function takes a dictionary `X` as input, where the keys are the feature names (e.g., `'EBIT/TA'`, `'NI/TC'`, etc.), and the values are the corresponding feature values for a company.
2. **Nodes**: The `nodes` list stores the truth values (1 for True, 0 for False) of the conditions at each inner node of the decision tree.
   - `nodes[0]` corresponds to the condition `EBIT/TA <= 0.10`.
   - `nodes[1]` corresponds to the condition `NI/TC <= 0.05`.
3. **Decision Tree Logic**:
   - If `EBIT/TA <= 0.10`, the company is classified as **insolvent** (prediction = 0).
   - If `EBIT/TA > 0.10`, the next condition (`NI/TC <= 0.05`) is evaluated:
     - If `NI/TC <= 0.05`, the company is classified as **insolvent** (prediction = 0).
     - If `NI/TC > 0.05`, the company is classified as **solvent** (prediction = 1).
4. **Output**: The function returns:
   - `prediction`: The predicted class (1 = solvent, 0 = insolvent).
   - `nodes`: A list of truth values for the inner nodes.

### Example Usage:
```python
# Example input
X = {
    "EBIT/TA": 0.12,
    "NI/TC": 0.04,
    "Sales/TA": 0.8,
    "EBIT/Sales": 0.15,
    "NI/Sales": 0.1,
    "WC/TA": 0.2,
    "Equity/TL": 1.5,
    "Equity/TA": 0.6
}

# Make a prediction
prediction, nodes = predict(X)

# Output the results
print("Prediction:", prediction)  # Output: 0 (insolvent) or 1 (solvent)
print("Nodes:", nodes)  # Output: [0 or 1, 0 or 1]
```

This function is simple, interpretable, and adheres to the constraints of a decision tree with a maximum depth of 2.