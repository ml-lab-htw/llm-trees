


Sure! Here is the function constructed to classify whether a company is solvent (1) or not solvent (0) based on the provided financial ratios:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Evaluate the conditions for each node
    nodes[0] = X["Equity/TL"] <= 0.6
    nodes[1] = X["EBIT/TA"] <= 0.08
    nodes[2] = X["NI/TC"] <= 0.1

    # Decision tree logic based on the nodes
    if nodes[0]:
        prediction = 0  # Not Solvent
    else:
        if nodes[1]:
            prediction = 0  # Not Solvent
        else:
            if nodes[2]:
                prediction = 0  # Not Solvent
            else:
                prediction = 1  # Solvent
                
    return prediction, nodes
```

Example usage of the function:

```python
# Example feature values
example_features = {
    "EBIT/TA": 0.1,
    "NI/TC": 0.12,
    "Sales/TA": 0.3,
    "EBIT/Sales": 0.2,
    "NI/Sales": 0.1,
    "WC/TA": 0.15,
    "Equity/TL": 0.7,
    "Equity/TA": 0.5
}

# Get prediction and node truth values
prediction, nodes = predict(example_features)
print(f"Prediction: {'Solvent' if prediction == 1 else 'Not Solvent'}")
print(f"Node conditions: {nodes}")
```

Here the decision tree logic checks the conditions in sequence:
1. If the ratio of Equity to Total Liabilities (Equity/TL) is less than or equal to 0.6, the company is classified as not solvent (0).
2. If the Equity/TL ratio is greater than 0.6, it then checks if Earnings Before Interest and Taxes to Total Assets (EBIT/TA) is less than or equal to 0.08. If true, the company is again classified as not solvent (0).
3. If EBIT/TA is greater than 0.08, it then checks if Net Income to Total Capital (NI/TC) is less than or equal to 0.1. If true, the company is classified as not solvent (0).
4. If NI/TC is greater than 0.1, the company is classified as solvent (1).

The function returns the prediction (1 or 0) and a list of boolean values indicating if the conditions at each node were satisfied.