


Sure! Here is the Python function to perform the task using the given features and target variable:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.1
    nodes[1] = X["Equity/TL"] <= 0.4 if not nodes[0] else None
    
    if nodes[0]:
        prediction = 0  # Insolvent
    else:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent

    return prediction, nodes

# Example usage:
X = {
    'EBIT/TA': 0.12,
    'NI/TC': 0.05,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.1,
    'NI/Sales': 0.03,
    'WC/TA': 0.2,
    'Equity/TL': 0.45,
    'Equity/TA': 0.35
}

prediction, nodes = predict(X)
print(f"Prediction: {'Solvent' if prediction == 1 else 'Insolvent'}")
print(f"Nodes evaluation: {nodes}")
```

In this function:

- `nodes[0]` evaluates the condition `X["EBIT/TA"] <= 0.1`.
- `nodes[1]` evaluates the condition `X["Equity/TL"] <= 0.4` only if the first condition (`nodes[0]`) is not satisfied.

The function returns:
- `prediction`: `1` if the company is solvent, `0` if the company is insolvent.
- `nodes`: a list of truth values representing whether each condition in the decision tree was satisfied.

You can test the function with different feature sets to see how it classifies companies as either solvent or insolvent.