Here is a decision tree with a maximum depth of 2 based on the Features and target variable (company solvency). The decision tree will use the most important features to predict whether the company is solvent or insolvent:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] > 0.1  # Inner node 1: EBIT/TA > 0.1
    nodes[1] = X["Equity/TL"] > 0.5  # Inner node 2: Equity/TL > 0.5

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Solvent
        else:
            prediction = 0  # Insolvent
    else:
        prediction = 0  # Insolvent

    return prediction, nodes
```

### Explanation:
- **Node 1 (`nodes[0]`)**: The decision starts by checking whether the company's **EBIT/TA** ratio is greater than 0.1. If this condition is true, the company is more likely to be solvent, but we need to check further. If false, the company is predicted as insolvent.
- **Node 2 (`nodes[1]`)**: If the EBIT/TA ratio is greater than 0.1, the next check is whether the **Equity/TL** ratio is greater than 0.5. This indicates whether the company has a strong equity position relative to its liabilities. If this condition is satisfied, the company is predicted as solvent, otherwise insolvent.

The function returns:
1. **`prediction`:** The predicted class (1 = solvent, 0 = insolvent).
2. **`nodes`:** A list of truth values for the inner nodes - `1` means the condition for the node was satisfied, `0` means it was not satisfied.

### Example usage:

```python
company_data = {
    "EBIT/TA": 0.15,
    "NI/TC": 0.05,
    "Sales/TA": 1.2,
    "EBIT/Sales": 0.1,
    "NI/Sales": 0.05,
    "WC/TA": 0.2,
    "Equity/TL": 0.6,
    "Equity/TA": 0.4
}

prediction, node_values = predict(company_data)
print(f"Prediction: {prediction}, Node Values: {node_values}")
```

This would print:
```
Prediction: 1, Node Values: [True, True]
```

This means the company is predicted to be solvent (`1`) and both node conditions were satisfied.
