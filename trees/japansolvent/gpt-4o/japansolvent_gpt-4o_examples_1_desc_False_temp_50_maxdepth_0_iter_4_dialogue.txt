


Below is the Python function for the decision tree classifier based on the specified features (`['EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA']`) and the target variable (`company is solvent`, where `1 = solvent` and `0 = insolvent`). The decision tree has a maximum depth of 2, and it returns both the prediction and a list of truth values for the inner nodes.

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent (1) or insolvent (0) based on financial ratios.

    Args:
        X (dict): A dictionary containing the following keys:
            - 'EBIT/TA': Earnings Before Interest and Taxes / Total Assets
            - 'NI/TC': Net Income / Total Capital
            - 'Sales/TA': Sales / Total Assets
            - 'EBIT/Sales': Earnings Before Interest and Taxes / Sales
            - 'NI/Sales': Net Income / Sales
            - 'WC/TA': Working Capital / Total Assets
            - 'Equity/TL': Equity / Total Liabilities
            - 'Equity/TA': Equity / Total Assets

    Returns:
        tuple: A tuple containing:
            - prediction (int): 1 if the company is solvent, 0 if it is insolvent.
            - nodes (list): A list of truth values (1 for True, 0 for False) for the inner nodes.
    """
    nodes = 2 * [None]  # Initialize a list to store the truth values of the inner nodes

    # Node 0: EBIT/TA <= 0.10
    nodes[0] = X["EBIT/TA"] <= 0.10

    if nodes[0]:  # If EBIT/TA <= 0.10
        # Node 1: Equity/TL <= 0.50
        nodes[1] = X["Equity/TL"] <= 0.50
        if nodes[1]:  # If Equity/TL <= 0.50
            prediction = 0  # Insolvent
        else:  # If Equity/TL > 0.50
            prediction = 1  # Solvent
    else:  # If EBIT/TA > 0.10
        # Node 1: NI/TC <= 0.05
        nodes[1] = X["NI/TC"] <= 0.05
        if nodes[1]:  # If NI/TC <= 0.05
            prediction = 0  # Insolvent
        else:  # If NI/TC > 0.05
            prediction = 1  # Solvent

    # Convert True/False to 1/0 for the nodes list
    nodes = [int(node) for node in nodes]

    return prediction, nodes
```

### Explanation of the Function:
1. **Input**: The function takes a dictionary `X` where the keys are the feature names (`'EBIT/TA'`, `'NI/TC'`, etc.) and the values are their corresponding numerical values.

2. **Nodes**: The `nodes` list stores the truth values (1 for True, 0 for False) of the inner nodes of the decision tree:
   - `nodes[0]` corresponds to the condition `EBIT/TA <= 0.10`.
   - `nodes[1]` corresponds to either `Equity/TL <= 0.50` (if `nodes[0]` is True) or `NI/TC <= 0.05` (if `nodes[0]` is False).

3. **Prediction Logic**:
   - If `EBIT/TA <= 0.10` (`nodes[0] = 1`), the next split is based on `Equity/TL`:
     - If `Equity/TL <= 0.50` (`nodes[1] = 1`), the company is classified as **insolvent** (`prediction = 0`).
     - Otherwise, the company is classified as **solvent** (`prediction = 1`).
   - If `EBIT/TA > 0.10` (`nodes[0] = 0`), the next split is based on `NI/TC`:
     - If `NI/TC <= 0.05` (`nodes[1] = 1`), the company is classified as **insolvent** (`prediction = 0`).
     - Otherwise, the company is classified as **solvent** (`prediction = 1`).

4. **Output**: The function returns:
   - `prediction`: The predicted class (`1 = solvent`, `0 = insolvent`).
   - `nodes`: A list of truth values for the inner nodes (`1` for True, `0` for False).

---

### Example Usage:
```python
# Example input
X = {
    "EBIT/TA": 0.08,
    "NI/TC": 0.06,
    "Sales/TA": 1.5,
    "EBIT/Sales": 0.2,
    "NI/Sales": 0.1,
    "WC/TA": 0.1,
    "Equity/TL": 0.4,
    "Equity/TA": 0.6
}

# Call the function
prediction, nodes = predict(X)

# Output
print(f"Prediction: {prediction}")  # Prediction: 0 (Insolvent)
print(f"Nodes: {nodes}")  # Nodes: [1, 1]
```