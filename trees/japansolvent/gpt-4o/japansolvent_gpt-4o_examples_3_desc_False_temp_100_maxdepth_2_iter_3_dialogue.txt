


Given the required formatting and thresholds from the provided examples, I will create a function that uses our financial features to classify a company's solvency.

Let's consider the key features and thresholds from our previous decision tree:
- EBIT/TA: Earnings Before Interest and Taxes/Total Assets
- Equity/TL: Equity/Total Liabilities

Here is the Python function that implements the decision tree with a maximum depth of 2:

```python
def predict(X: dict):
    # Initialize the nodes
    nodes = 2 * [None]

    # Check the first condition at the root node
    nodes[0] = X['EBIT/TA'] <= 0.15
    
    # Check the second condition only if the first condition is False
    if not nodes[0]:
        nodes[1] = X['Equity/TL'] <= 0.5
    
    # Determine prediction based on the conditions
    if nodes[0]:
        prediction = 0  # Not Solvent
    else:
        if nodes[1]:
            prediction = 0  # Not Solvent
        else:
            prediction = 1  # Solvent
    
    return prediction, nodes

# Example usage:
data_point = {
    'EBIT/TA': 0.2,
    'NI/TC': 0.1,
    'Sales/TA': 0.3,
    'EBIT/Sales': 0.4,
    'NI/Sales': 0.05,
    'WC/TA': 0.1,
    'Equity/TL': 0.6,
    'Equity/TA': 0.5
}

prediction, nodes = predict(data_point)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

### Explanation:

1. **nodes[0]**: Checks if `EBIT/TA` is less than or equal to 0.15. If this condition is true, the company is predicted as Not Solvent (0).
2. **nodes[1]**: Is evaluated only if the first condition (nodes[0]) is false. It checks if `Equity/TL` is less than or equal to 0.5. If this condition is true, the company is predicted as Not Solvent (0). Otherwise, the company is predicted as Solvent (1).

### Example Output:
For the given `data_point`, the function will output:
```
Prediction: 1, Nodes: [False, False]
```

This means the company is predicted to be solvent (`1`), and during the decision-making process, the root condition (`nodes[0]`) evaluated to `False`, and the following condition (`nodes[1]`) also evaluated to `False`.