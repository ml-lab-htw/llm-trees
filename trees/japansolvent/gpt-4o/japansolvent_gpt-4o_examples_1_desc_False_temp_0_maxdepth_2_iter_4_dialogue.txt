


Here is the Python function for the decision tree classifier based on the features and target variable you provided. The function adheres to the structure and formatting of your example:

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent (1) or insolvent (0) based on financial ratios.

    Parameters:
    X (dict): A dictionary containing the following keys:
        - 'EBIT/TA': Earnings Before Interest and Taxes/Total Assets
        - 'NI/TC': Net Income/Total Capital
        - 'Sales/TA': Sales/Total Assets
        - 'EBIT/Sales': Earnings Before Interest and Taxes/Sales
        - 'NI/Sales': Net Income/Sales
        - 'WC/TA': Working Capital/Total Assets
        - 'Equity/TL': Equity/Total Liabilities
        - 'Equity/TA': Equity/Total Assets

    Returns:
    tuple: A tuple containing:
        - prediction (int): 1 if the company is solvent, 0 if insolvent
        - nodes (list): A list of truth values (1 if the condition is satisfied, 0 otherwise) for the inner nodes
    """
    nodes = 2 * [None]
    
    # Node 0: Check if 'EBIT/TA' <= 0.10
    nodes[0] = X['EBIT/TA'] <= 0.10
    
    # Node 1: Check if 'NI/TC' <= 0.05 (only evaluated if Node 0 is False)
    if not nodes[0]:
        nodes[1] = X['NI/TC'] <= 0.05
    else:
        nodes[1] = None  # Node 1 is not evaluated if Node 0 is True
    
    # Decision tree logic
    if nodes[0]:  # If 'EBIT/TA' <= 0.10
        prediction = 0  # Insolvent
    else:  # If 'EBIT/TA' > 0.10
        if nodes[1]:  # If 'NI/TC' <= 0.05
            prediction = 0  # Insolvent
        else:  # If 'NI/TC' > 0.05
            prediction = 1  # Solvent

    return prediction, nodes
```

### Explanation of the Code:
1. **Input**: The function takes a dictionary `X` as input, where the keys are the feature names (e.g., `'EBIT/TA'`, `'NI/TC'`, etc.), and the values are the corresponding feature values for a company.
2. **Nodes**: A list `nodes` is used to store the truth values of the inner nodes. Each entry in the list corresponds to whether the condition at that node is satisfied (`1` for True, `0` for False).
3. **Node 0**: The first condition checks if `'EBIT/TA'` is less than or equal to `0.10`. If this condition is satisfied, the company is classified as **insolvent** (`0`), and the second condition is not evaluated.
4. **Node 1**: If the first condition is not satisfied, the second condition checks if `'NI/TC'` is less than or equal to `0.05`. Based on this, the company is classified as either **insolvent** (`0`) or **solvent** (`1`).
5. **Output**: The function returns a tuple containing:
   - The prediction (`1` for solvent, `0` for insolvent).
   - The list of truth values for the inner nodes.

### Example Usage:
```python
# Example input
X = {
    'EBIT/TA': 0.12,
    'NI/TC': 0.04,
    'Sales/TA': 0.8,
    'EBIT/Sales': 0.15,
    'NI/Sales': 0.1,
    'WC/TA': 0.2,
    'Equity/TL': 1.5,
    'Equity/TA': 0.6
}

# Make a prediction
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 0 (Insolvent) or 1 (Solvent)
print("Nodes:", nodes)  # Output: [False, True] or similar based on the input
```

This function is simple, interpretable, and adheres to the decision tree structure with a maximum depth of 2. You can adjust the thresholds (`0.10` for `'EBIT/TA'` and `0.05` for `'NI/TC'`) based on your dataset or domain knowledge.