


Below is the implementation of the requested decision tree classifier as a Python function. The function uses the input feature keys exactly as specified, initializes an array for the truth values of the inner nodes, and returns both the prediction (0 for insolvent, 1 for solvent) and the truth values of the inner nodes.

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent (1) or insolvent (0) based on the provided features
    and returns the truth values of the decision tree's inner nodes.

    Arguments:
    X -- A dictionary containing the features:
         ['EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA']

    Returns:
    prediction -- 0 or 1 (0: Insolvent, 1: Solvent)
    nodes -- List representing the truth values of the decision tree's inner nodes.
    """

    # Initialize the truth values for the inner nodes
    nodes = 7 * [None]  # Since there are up to 7 inner nodes in the tree

    # Decision tree logic
    nodes[0] = X["Equity/TL"] <= 1.2
    if nodes[0]:
        nodes[1] = X["NI/TC"] <= 0.05
        if nodes[1]:
            nodes[2] = X["WC/TA"] <= 0.10
            if nodes[2]:
                prediction = 0  # Insolvent
            else:  # nodes[2] = False
                prediction = 1  # Solvent
        else:  # nodes[1] = False
            nodes[3] = X["Sales/TA"] <= 1.5
            if nodes[3]:
                prediction = 1  # Solvent
            else:  # nodes[3] = False
                prediction = 0  # Insolvent
    else:  # nodes[0] = False
        nodes[4] = X["EBIT/TA"] <= 0.08
        if nodes[4]:
            nodes[5] = X["Equity/TA"] <= 0.3
            if nodes[5]:
                prediction = 0  # Insolvent
            else:  # nodes[5] = False
                prediction = 1  # Solvent
        else:  # nodes[4] = False
            nodes[6] = X["EBIT/Sales"] <= 0.15
            if nodes[6]:
                prediction = 0  # Insolvent
            else:  # nodes[6] = False
                prediction = 1  # Solvent

    return prediction, nodes
```

---

### Explanation of the Logic:
- **Nodes Structure:**
  - Each condition in the tree corresponds to a node in the `nodes` list.
  - For example, `nodes[0] = X["Equity/TL"] <= 1.2` checks the first condition and stores its truth value (1 if the condition is satisfied, otherwise 0).

- **Feature Thresholds:**
  - The thresholds for each feature (e.g., `Equity/TL <= 1.2`, `NI/TC <= 0.05`, etc.) are derived from the decision tree in the earlier response.

- **Predictions:**
  - If a leaf node is reached, the `prediction` variable is set to `0` or `1` based on the classification (0 = insolvent, 1 = solvent).

- **Flexibility:**
  - The function assumes `X` is a dictionary where feature names match the exact keys given. This ensures no mismatch between input features and feature conditions.

---

### Example Usage:

```python
# Input data: A company's financial feature values
company_data = {
    "EBIT/TA": 0.09,
    "NI/TC": 0.04,
    "Sales/TA": 1.3,
    "EBIT/Sales": 0.2,
    "NI/Sales": 0.08,
    "WC/TA": 0.15,
    "Equity/TL": 1.1,
    "Equity/TA": 0.4
}

# Call the prediction function
prediction, nodes = predict(company_data)

print("Prediction (1 = Solvent, 0 = Insolvent):", prediction)
print("Truth values of nodes:", nodes)
```

---

### Example Output:

For the provided `company_data`:
```
Prediction (1 = Solvent, 0 = Insolvent): 1
Truth values of nodes: [True, True, False, None, None, None, None]
```

This output indicates the company is predicted to be solvent (`1 = Solvent`) and shows which conditions along the tree path were satisfied.