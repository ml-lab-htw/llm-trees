


Let's format the decision tree you provided into a function that takes a dictionary of features and returns a prediction along with a list of truth values for the inner nodes. The decision tree will classify whether a company is solvent (`1`) or not solvent (`0`).

Here is the decision tree:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Convert feature keys to match exact spelling
    nodes[0] = X["Equity/TL"] <= 0.40
    nodes[1] = X["NI/TC"] <= 0.05
    nodes[2] = X["WC/TA"] <= 0.10
    
    if nodes[0]:
        prediction = 0  # not solvent
    else:
        if nodes[1]:
            prediction = 0  # not solvent
        else:
            if nodes[2]:
                prediction = 0  # not solvent
            else:
                prediction = 1  # solvent

    return prediction, nodes
```

By applying this function, we can classify a company as solvent or not solvent based on the specified financial ratios and derive the truth values of the conditions at each node of the decision tree.

### Example Usage:

```python
# Assuming the dictionary contains the exact feature names as specified
features = {
    'EBIT/TA': 0.15,
    'NI/TC': 0.08,
    'Sales/TA': 0.5,
    'EBIT/Sales': 0.2,
    'NI/Sales': 0.1,
    'WC/TA': 0.12,
    'Equity/TL': 0.45,
    'Equity/TA': 0.4
}

prediction, nodes = predict(features)
print(f"Prediction: {prediction}")  # Output: Prediction: 1
print(f"Nodes: {nodes}")  # Output: Nodes: [False, False, False]
```

In this example, the company is classified as solvent (`1`) because none of the conditions for being not solvent are met. The node list `[False, False, False]` represents that none of the thresholds were crossed leading it to be classified as solvent.