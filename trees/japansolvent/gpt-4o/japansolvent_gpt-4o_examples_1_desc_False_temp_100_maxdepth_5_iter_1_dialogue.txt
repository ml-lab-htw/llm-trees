


Here is the implementation of your decision tree function formatted as a Python function based on your request:

```python
def predict(X: dict):
    """
    Predict whether a company is solvent (1) or insolvent (0) based on financial features.

    Parameters:
        X (dict): A dictionary containing the following keys:
            - 'EBIT/TA': Earnings Before Interest and Taxes/Total Assets
            - 'NI/TC': Net Income/Total Capital
            - 'Sales/TA': Sales/Total Assets
            - 'EBIT/Sales': Earnings Before Interest and Taxes/Sales
            - 'NI/Sales': Net Income/Sales
            - 'WC/TA': Working Capital/Total Assets
            - 'Equity/TL': Equity/Total Liabilities
            - 'Equity/TA': Equity/Total Assets

    Returns:
        tuple: A tuple containing:
            - prediction (int): 1 if the company is solvent, 0 if insolvent.
            - nodes (list): A list of truth values (1 or 0) indicating whether each node's condition is satisfied.
    """

    # Initialize a list to store the truth values of inner nodes
    nodes = [None] * 5

    # Decision tree with a maximum depth of 5
    nodes[0] = X["Equity/TL"] <= 1.2
    if nodes[0]:  # Equity/TL <= 1.2
        nodes[1] = X["WC/TA"] <= -0.15
        if nodes[1]:  # WC/TA <= -0.15
            nodes[2] = X["EBIT/TA"] <= 0.05
            if nodes[2]:  # EBIT/TA <= 0.05
                prediction = 0  # Insolvent
            else:  # EBIT/TA > 0.05
                prediction = 1  # Solvent
        else:  # WC/TA > -0.15
            nodes[3] = X["NI/Sales"] <= 0.03
            if nodes[3]:  # NI/Sales <= 0.03
                prediction = 0  # Insolvent
            else:  # NI/Sales > 0.03
                prediction = 1  # Solvent
    else:  # Equity/TL > 1.2
        nodes[4] = X["EBIT/Sales"] <= 0.10
        if nodes[4]:  # EBIT/Sales <= 0.10
            prediction = 0  # Insolvent
        else:  # EBIT/Sales > 0.10
            nodes[3] = X["Sales/TA"] <= 0.8
            if nodes[3]:  # Sales/TA <= 0.8
                prediction = 0  # Insolvent
            else:  # Sales/TA > 0.8
                prediction = 1  # Solvent

    # Transform truth values into binary (1 for True, 0 for False)
    nodes = [1 if condition else 0 for condition in nodes]

    return prediction, nodes
```

### Example Usage:

```python
# Example input data for a company
example_data = {
    "EBIT/TA": 0.06,
    "NI/TC": 0.1,
    "Sales/TA": 1.0,
    "EBIT/Sales": 0.12,
    "NI/Sales": 0.05,
    "WC/TA": -0.1,
    "Equity/TL": 1.3,
    "Equity/TA": 0.5,
}

# Make a prediction
prediction, nodes = predict(example_data)

# Output the result
print("Prediction (1 = Solvent, 0 = Insolvent):", prediction)
print("Decision Path Truth Values:", nodes)
```

### Explanation:
1. **Nodes**: For each condition in the decision tree, the corresponding index in the `nodes` list is set to `1` if the condition is true and `0` otherwise.
2. **Prediction**: The function navigates the decision tree and returns the prediction along with the list of truth values representing the decision path.

This implementation is designed with meaningful threshold values based on a logical financial analysis, and you can adapt thresholds further based on domain knowledge or data distributions. For this example, the thresholds and logic attempt to balance interpretability and solvency modeling.