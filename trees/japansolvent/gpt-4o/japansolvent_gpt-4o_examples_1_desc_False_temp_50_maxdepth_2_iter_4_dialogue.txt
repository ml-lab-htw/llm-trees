


Here is the Python function for your decision tree that classifies whether a company is solvent (1) or insolvent (0). The function follows the structure you described, uses meaningful thresholds for the splits, and returns both the prediction and a list of truth values for the inner nodes.

```python
def predict(X: dict):
    """
    Predict whether a company is solvent (1) or insolvent (0) based on financial ratios.

    Parameters:
    X (dict): A dictionary containing the following keys:
        - 'EBIT/TA': Earnings Before Interest and Taxes / Total Assets
        - 'NI/TC': Net Income / Total Capital
        - 'WC/TA': Working Capital / Total Assets
        - 'Equity/TL': Equity / Total Liabilities

    Returns:
    tuple: (prediction, nodes), where:
        - prediction (int): 1 if solvent, 0 if insolvent
        - nodes (list): Truth values for the inner nodes
    """
    # Initialize a list to store the truth values for the inner nodes
    nodes = 2 * [None]

    # Decision tree logic
    nodes[0] = X["WC/TA"] <= 0.15  # Node 0: Working Capital / Total Assets <= 0.15
    if nodes[0]:  # If WC/TA <= 0.15
        nodes[1] = X["NI/TC"] <= 0.05  # Node 1: Net Income / Total Capital <= 0.05
        if nodes[1]:  # If NI/TC <= 0.05
            prediction = 0  # Insolvent
        else:  # If NI/TC > 0.05
            prediction = 1  # Solvent
    else:  # If WC/TA > 0.15
        nodes[1] = X["Equity/TL"] <= 0.50  # Node 1: Equity / Total Liabilities <= 0.50
        if nodes[1]:  # If Equity/TL <= 0.50
            prediction = 0  # Insolvent
        else:  # If Equity/TL > 0.50
            prediction = 1  # Solvent

    return prediction, nodes
```

### Explanation of the Decision Tree:
1. **Node 0**: The first split is based on `WC/TA` (Working Capital / Total Assets):
   - If `WC/TA` ≤ 0.15, the company might have liquidity issues, so we move to **Node 1** and check `NI/TC` (Net Income / Total Capital).
   - If `WC/TA` > 0.15, the company is likely solvent, but we further check **Node 1**, which evaluates `Equity/TL` (Equity / Total Liabilities).

2. **Node 1**: 
   - For companies with low `WC/TA` (≤ 0.15), we check `NI/TC`:
     - If `NI/TC` ≤ 0.05, the company is classified as **insolvent**.
     - If `NI/TC` > 0.05, the company is classified as **solvent**.
   - For companies with high `WC/TA` (> 0.15), we check `Equity/TL`:
     - If `Equity/TL` ≤ 0.50, the company is classified as **insolvent**.
     - If `Equity/TL` > 0.50, the company is classified as **solvent**.

### Example Usage:
```python
# Example input
X = {
    "EBIT/TA": 0.12,
    "NI/TC": 0.04,
    "Sales/TA": 1.5,
    "EBIT/Sales": 0.1,
    "NI/Sales": 0.05,
    "WC/TA": 0.10,
    "Equity/TL": 0.60,
    "Equity/TA": 0.50
}

# Predict
prediction, nodes = predict(X)

# Output
print("Prediction:", prediction)  # 0 = Insolvent, 1 = Solvent
print("Nodes:", nodes)  # Truth values for the inner nodes
```

### Example Output:
For the given input:
- `WC/TA` = 0.10 (≤ 0.15, so `nodes[0] = True`)
- `NI/TC` = 0.04 (≤ 0.05, so `nodes[1] = True`)
- Prediction: `0` (Insolvent)

Output:
```
Prediction: 0
Nodes: [True, True]
```