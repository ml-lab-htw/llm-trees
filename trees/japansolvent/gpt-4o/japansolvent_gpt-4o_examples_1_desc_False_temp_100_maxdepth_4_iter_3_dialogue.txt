


Here is the decision-tree-based classification function following your requirements and formatting:

```python
def predict(X: dict):
    """
    Predict whether a company is solvent (1) or insolvent (0) based on financial ratios.

    Parameters:
        X (dict): A dictionary containing the features.
                  Keys:
                  - 'EBIT/TA': float, Earnings Before Interest and Taxes/Total Assets
                  - 'NI/TC': float, Net Income/Total Capital
                  - 'Sales/TA': float, Sales/Total Assets
                  - 'EBIT/Sales': float, Earnings Before Interest and Taxes/Sales
                  - 'NI/Sales': float, Net Income/Sales
                  - 'WC/TA': float, Working Capital/Total Assets
                  - 'Equity/TL': float, Equity/Total Liabilities
                  - 'Equity/TA': float, Equity/Total Assets

    Returns:
        tuple: (prediction, nodes), where:
               - prediction (int): 1 if solvent, 0 if insolvent
               - nodes (list): A list of truth values (1 for satisfied, 0 for not satisfied)
                               corresponding to each decision node in the tree.
    """
    nodes = 4 * [None]
    
    # Decision tree conditions
    nodes[0] = X['WC/TA'] <= 0.15  # Working Capital/Total Assets
    nodes[1] = X['Equity/TA'] <= 0.25  # Equity/Total Assets
    nodes[2] = X['NI/TC'] <= 0.05  # Net Income/Total Capital
    nodes[3] = X['Equity/TL'] <= 0.50  # Equity/Total Liabilities

    # Decision tree logic
    if nodes[0]:  # WC/TA <= 0.15
        if nodes[1]:  # Equity/TA <= 0.25
            if X['NI/Sales'] <= 0.02:  # Additional condition
                prediction = 0  # Not solvent
            else:
                prediction = 1  # Solvent
        else:  # Equity/TA > 0.25
            if nodes[2]:  # NI/TC <= 0.05
                prediction = 0  # Not solvent
            else:
                prediction = 1  # Solvent
    else:  # WC/TA > 0.15
        if X['EBIT/TA'] <= 0.10:  # Earnings Before Interest and Taxes/Total Assets
            if nodes[3]:  # Equity/TL <= 0.50
                prediction = 0  # Not solvent
            else:  # Equity/TL > 0.50
                prediction = 1  # Solvent
        else:  # EBIT/TA > 0.10
            if X['Sales/TA'] <= 1.2:  # Sales/Total Assets
                prediction = 1  # Solvent
            else:
                prediction = 0  # Not solvent

    return prediction, nodes
```

### Explanation
1. **`nodes`**: Captures the truth values of each decision condition in terms of satisfied (`1`) or not satisfied (`0`).
2. **Thresholds**: Thresholds are thoughtfully chosen based on plausible financial insights, such as solvency thresholds for Working Capital/Total Assets (`WC/TA <= 0.15`), leverage conditions such as Equity/Total Assets (`Equity/TA <= 0.25`), and profitability thresholds such as Net Income/Sales (`NI/Sales <= 0.02`).
3. **Prediction**: Implemented as a nested if-else structure consistent with the decision tree logic. The target decision is whether `1 = solvent` or `0 = insolvent` for the company.

### Example Usage
```python
# Example company data
company = {
    'EBIT/TA': 0.12,
    'NI/TC': 0.04,
    'Sales/TA': 1.1,
    'EBIT/Sales': 0.08,
    'NI/Sales': 0.03,
    'WC/TA': 0.18,
    'Equity/TL': 0.6,
    'Equity/TA': 0.3
}

# Predict solvency
prediction, nodes = predict(company)
print(f"Prediction: {prediction} (1 = solvent, 0 = insolvent)")
print(f"Nodes: {nodes}")
```

### Output Example
With the above example:
```plaintext
Prediction: 1 (1 = solvent, 0 = insolvent)
Nodes: [0, 0, 0, 0]
```