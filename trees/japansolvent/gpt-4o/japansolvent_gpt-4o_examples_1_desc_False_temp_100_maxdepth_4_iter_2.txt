Based on the Features and the target variable (company solvency), here's a decision tree with a maximum depth of 4 and up to 15 inner nodes formatted as a Python function. This decision tree is designed without training on actual data and follows the structure you requested:

### Decision Tree:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Node 0: Check EBIT/TA (Earnings Before Interest and Taxes/Total Assets)
    nodes[0] = X["EBIT/TA"] > 0.1
    
    if nodes[0]:  # EBIT/TA > 0.1
        # Node 1: Check WC/TA (Working Capital/Total Assets)
        nodes[1] = X["WC/TA"] > 0.05
        
        if nodes[1]:  # WC/TA > 0.05
            # Node 2: Check Equity/TA (Equity/Total Assets)
            nodes[2] = X["Equity/TA"] > 0.4
            
            if nodes[2]:  # Equity/TA > 0.4
                # Node 3: Check NI/TC (Net Income/Total Capital)
                nodes[3] = X["NI/TC"] > -0.05
                if nodes[3]:  # NI/TC > -0.05
                    prediction = 1  # Solvent
                else:  # NI/TC <= -0.05
                    prediction = 0  # Insolvent
            else:  # Equity/TA <= 0.4
                # Node 3: Check EBIT/Sales (Earnings Before Interest and Taxes/Sales)
                nodes[3] = X["EBIT/Sales"] > 0.07
                if nodes[3]:  # EBIT/Sales > 0.07
                    prediction = 1  # Solvent
                else:  # EBIT/Sales <= 0.07
                    prediction = 0  # Insolvent
        else:  # WC/TA <= 0.05
            # Node 2: Check Sales/TA (Sales/Total Assets)
            nodes[2] = X["Sales/TA"] > 0.5
            
            if nodes[2]:  # Sales/TA > 0.5
                # Node 3: Check NI/Sales (Net Income/Sales)
                nodes[3] = X["NI/Sales"] > 0.02
                if nodes[3]:  # NI/Sales > 0.02
                    prediction = 1  # Solvent
                else:  # NI/Sales <= 0.02
                    prediction = 0  # Insolvent
            else:  # Sales/TA <= 0.5
                prediction = 0  # Insolvent
    else:  # EBIT/TA <= 0.1
        # Node 1: Check Equity/TL (Equity/Total Liabilities)
        nodes[1] = X["Equity/TL"] > 0.6
        
        if nodes[1]:  # Equity/TL > 0.6
            # Node 2: Check WC/TA (Working Capital/Total Assets)
            nodes[2] = X["WC/TA"] > 0.1
            
            if nodes[2]:  # WC/TA > 0.1
                prediction = 1  # Solvent
            else:  # WC/TA <= 0.1
                prediction = 0  # Insolvent
        else:  # Equity/TL <= 0.6
            prediction = 0  # Insolvent
    
    return prediction, nodes
```

### Explanation:
- **Node 0** checks the ratio of EBIT/TA. If the ratio is greater than 0.1, the company is more likely to be solvent.
- **Node 1** checks WC/TA, which is a measure of liquidity. Higher liquidity (WC/TA > 0.05) correlates with solvency.
- **Node 2** examines either Equity/TA or Sales/TA depending on the previous nodes. These are indicators of financial stability and operational efficiency.
- **Node 3** checks either NI/TC, EBIT/Sales, or NI/Sales, which are profitability measures, to make a final decision.

The `nodes` list records whether each condition is satisfied (`True` or `False`), represented as `1` or `0` in the output. The decision tree returns a prediction (1 = solvent, 0 = insolvent) along with the list of truth values for the inner nodes.
