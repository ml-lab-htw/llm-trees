


Let's create a function to predict whether a company is solvent with the given decision tree. The function will take a dictionary `X` representing the features of a company and will return the predicted class ("solvent" or "not solvent") and a list of truth values for each node in the decision tree.

Here is the function:

```python
def predict(X: dict):
    nodes = 2 * [None]  # Create a list with placeholders for node truth values
    
    # Evaluate the conditions for the nodes
    nodes[0] = X["EBIT/TA"] <= 0.10
    nodes[1] = X["NI/TC"] <= 0.05 if not nodes[0] else True

    # Determine the prediction based on the tree structure
    if nodes[0]:
        prediction = 0  # Not solvent
    else:
        if nodes[1]:
            prediction = 0  # Not solvent
        else:
            prediction = 1  # Solvent
    
    return prediction, nodes

# Example usage:
X_example = {
    'EBIT/TA': 0.15,
    'NI/TC': 0.06,
    'Sales/TA': 1.2,
    'EBIT/Sales': 0.12,
    'NI/Sales': 0.08,
    'WC/TA': 0.2,
    'Equity/TL': 1.5,
    'Equity/TA': 0.7
}

prediction, nodes = predict(X_example)
print("Prediction:", "solvent" if prediction == 1 else "not solvent")
print("Nodes:", nodes)
```

### Explanation:
1. **Root Node**:
   - The root node splits on `"EBIT/TA"`.
   - If `"EBIT/TA" <= 0.10`, the company is classified as "not solvent".
   - If `"EBIT/TA" > 0.10`, the decision moves to the next level.

2. **Second Level**:
   - This node splits on `"NI/TC"`.
   - If `"NI/TC" <= 0.05`, the company is classified as "not solvent".
   - If `"NI/TC" > 0.05`, the company is classified as "solvent".

The function then returns a prediction (`1` for "solvent" and `0` for "not solvent") and a list `nodes` containing the truth values for each internal node condition. This setup ensures that we can trace the decision path in the decision tree by examining the `nodes` list.

Feel free to adjust the threshold values based on your specific dataset and requirements.