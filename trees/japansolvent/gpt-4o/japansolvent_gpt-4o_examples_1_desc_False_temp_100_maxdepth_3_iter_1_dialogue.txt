


Here is the Python function implementing the decision tree for classifying whether a company is solvent or not. It includes a prediction and a list of truth values for the inner nodes:

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent (1) or insolvent (0) based on financial features.

    Parameters:
    - X (dict): A dictionary with the following keys:
        'EBIT/TA': Earnings Before Interest and Taxes / Total Assets
        'NI/TC': Net Income / Total Capital
        'Sales/TA': Sales / Total Assets
        'EBIT/Sales': Earnings Before Interest and Taxes / Sales
        'NI/Sales': Net Income / Sales
        'WC/TA': Working Capital / Total Assets
        'Equity/TL': Equity / Total Liabilities
        'Equity/TA': Equity / Total Assets

    Returns:
    - prediction (int): 1 if the company is solvent, 0 if insolvent.
    - nodes (list): A list of truth values (1 = condition satisfied, 0 = condition not satisfied)
                    for the inner nodes of the decision tree.
    """

    # Initialize the nodes list with 0/1 values based on conditions
    nodes = 3 * [None]  # Maximum depth of 3

    # Node 0: Split on 'EBIT/TA'
    nodes[0] = X['EBIT/TA'] <= 0.08

    # Node 1: Split on 'NI/TC' (if Node 0 condition is satisfied)
    if nodes[0]:  # X['EBIT/TA'] <= 0.08
        nodes[1] = X['NI/TC'] <= 0.05
        if nodes[1]:  # X['NI/TC'] <= 0.05
            prediction = 0  # Not solvent
        else:  # X['NI/TC'] > 0.05
            prediction = 1  # Solvent

    # Node 2: Split on 'Sales/TA' (if Node 0 condition is not satisfied)
    else:  # X['EBIT/TA'] > 0.08
        nodes[2] = X['Sales/TA'] <= 0.5
        if nodes[2]:  # X['Sales/TA'] <= 0.5
            prediction = 0  # Not solvent
        else:  # X['Sales/TA'] > 0.5
            prediction = 1  # Solvent

    return prediction, nodes
```

### Explanation:

1. **Input**:
   - The function accepts a dictionary `X` with keys representing financial features (e.g., `'EBIT/TA'`, `'NI/TC'`, etc.). These values are used to make splits in the decision tree.

2. **Nodes**:
   - `nodes[0]`: This is the root node of the decision tree. It evaluates whether `'EBIT/TA' <= 0.08`.
   - `nodes[1]`: This is the first child of the root node, triggered if `'EBIT/TA' <= 0.08`. It evaluates whether `'NI/TC' <= 0.05`.
   - `nodes[2]`: This is the second child of the root node, triggered if `'EBIT/TA' > 0.08`. It evaluates whether `'Sales/TA' <= 0.5`.

3. **Conditions (Thresholds)**:
   - `'EBIT/TA' <= 0.08`: Companies with low earnings relative to their assets are less likely to be solvent.
   - `'NI/TC' <= 0.05`: Companies with low net income relative to total capital are less likely to be solvent.
   - `'Sales/TA' <= 0.5`: Companies with low sales relative to assets are less likely to be solvent.

4. **Output**:
   - `prediction`: Returns `1` if the company is solvent, `0` if insolvent.
   - `nodes`: A list of truth values (1/0) indicating whether each node's condition was satisfied.

### Example Usage:
```python
# Input feature values for a company
company_features = {
    'EBIT/TA': 0.07,
    'NI/TC': 0.06,
    'Sales/TA': 0.7,
    'EBIT/Sales': 0.2,
    'NI/Sales': 0.1,
    'WC/TA': 0.1,
    'Equity/TL': 2.0,
    'Equity/TA': 0.5
}

# Make a prediction
prediction, nodes = predict(company_features)

# Output
print("Prediction (1 = Solvent, 0 = Insolvent):", prediction)
print("Truth values for decision nodes:", nodes)
```

### Example Output:
For the input above:
```plaintext
Prediction (1 = Solvent, 0 = Insolvent): 1
Truth values for decision nodes: [1, 0, None]
```

This output indicates:
- `nodes[0]` = 1: The condition `'EBIT/TA' <= 0.08` is satisfied.
- `nodes[1]` = 0: The condition `'NI/TC' <= 0.05` is not satisfied.
- `nodes[2]` = None: This node was not evaluated because `'EBIT/TA' <= 0.08` was satisfied, and the evaluation proceeded to Node 1. 

