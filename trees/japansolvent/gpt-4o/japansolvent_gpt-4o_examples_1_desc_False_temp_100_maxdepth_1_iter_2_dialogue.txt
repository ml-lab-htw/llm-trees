


Below is the Python function that implements a depth-1 decision tree for determining whether a company is solvent, based on the features and target variable definitions you provided. I have chosen `Equity/TL` ("Equity/Total Liabilities") as the most important feature with a threshold of `1.0`, as this is a meaningful indicator of solvency.

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent or not using a depth-1 decision tree.
    
    Args:
    X (dict): Input dictionary containing the company features:
        - 'EBIT/TA': Earnings Before Interest and Taxes / Total Assets
        - 'NI/TC': Net Income / Total Capital
        - 'Sales/TA': Sales / Total Assets
        - 'EBIT/Sales': Earnings Before Interest and Taxes / Sales
        - 'NI/Sales': Net Income / Sales
        - 'WC/TA': Working Capital / Total Assets
        - 'Equity/TL': Equity / Total Liabilities
        - 'Equity/TA': Equity / Total Assets
    
    Returns:
    tuple: 
        - prediction (int): 1 if company is solvent, 0 if insolvent
        - nodes (list): Truth values of inner nodes, where 1 indicates 
                        the condition is satisfied and 0 otherwise
    """
    nodes = 1 * [None]
    nodes[0] = X["Equity/TL"] <= 1.0
    
    if nodes[0]:
        prediction = 0  # Insolvent
    else:
        prediction = 1  # Solvent
    return prediction, nodes
```

### Example Usage:
```python
# Example input
X = {
    "EBIT/TA": 0.12, 
    "NI/TC": 0.05, 
    "Sales/TA": 1.5, 
    "EBIT/Sales": 0.1, 
    "NI/Sales": 0.04, 
    "WC/TA": 0.2, 
    "Equity/TL": 1.2,  # Chosen feature
    "Equity/TA": 0.6
}

# Run prediction
prediction, nodes = predict(X)
print("Prediction:", prediction)  # Output: 1 (Solvent)
print("Node values:", nodes)      # Output: [0]
```

### Output Explanation:
- If `Equity/TL > 1.0`, the company is predicted to be **solvent** (`1`).
- If `Equity/TL <= 1.0`, the company is predicted to be **insolvent** (`0`).
- The `nodes` list contains a single boolean representing whether the split condition `Equity/TL <= 1.0` was satisfied (`1`) or not (`0`).

This implementation adheres to your instructions for encoding, naming, and ensuring a depth-1 tree with meaningful thresholds.