


Here is the Python function for your decision tree based on the given features and the target variable. It implements a depth-1 decision tree using the feature `NI/TC` (Net Income/Total Capital):

```python
def predict(X: dict):
    """
    Predict whether a company is solvent (target: 1 = solvent, 0 = insolvent)
    based on financial ratios.

    Args:
        X (dict): Features of the company. Keys must match:
            ['EBIT/TA', 'NI/TC', 'Sales/TA', 'EBIT/Sales', 
             'NI/Sales', 'WC/TA', 'Equity/TL', 'Equity/TA']

    Returns:
        prediction (int): 1 if the company is solvent, 0 otherwise.
        nodes (list of int): Truth values of inner nodes (1 if condition is satisfied, 0 otherwise).
    """
    nodes = 1 * [None]
    # Decision rule
    nodes[0] = X["NI/TC"] <= 0.05  # Is Net Income/Total Capital <= 0.05?

    # Apply rules to make a prediction
    if nodes[0]:  # Condition is true: NI/TC <= 0.05
        prediction = 0  # Insolvent
    else:  # Condition is false: NI/TC > 0.05
        prediction = 1  # Solvent

    return prediction, nodes
```

### Example Usage:

```python
# Input feature values for a company
features = {
    "EBIT/TA": 0.15,
    "NI/TC": 0.04,
    "Sales/TA": 0.7,
    "EBIT/Sales": 0.2,
    "NI/Sales": 0.15,
    "WC/TA": 0.1,
    "Equity/TL": 1.8,
    "Equity/TA": 0.45
}

# Make prediction
prediction, nodes = predict(features)

# Output
print("Prediction:", prediction)  # 0 = Insolvent, 1 = Solvent
print("Node truth values:", nodes)  # Which nodes' conditions were satisfied
```

### Example Explanation:

- If `"NI/TC"` (Net Income/Total Capital) is `0.04` in the above example, the condition in `nodes[0]` (`X["NI/TC"] <= 0.05`) evaluates to `True`, so `nodes = [1]`.
- Based on the tree, the company is classified as **Insolvent** (prediction = 0).

This function strictly adheres to a depth-1 tree and follows your requirements. Let me know if you need further adjustments!