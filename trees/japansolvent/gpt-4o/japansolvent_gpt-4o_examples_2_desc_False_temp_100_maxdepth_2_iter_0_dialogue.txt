


Based on your provided instructions and examples, here is a Python function implementing a decision tree classifier to predict whether a company is solvent (1) or not solvent (0). The decision tree has a maximum depth of 2 and uses the 'Equity/Total Liabilities' and 'Net Income/Sales' features as decision nodes.

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Check the first condition
    nodes[0] = X["Equity/TL"] <= 1.50
    
    if nodes[0]:
        # If the first condition is satisfied, predict 'not solvent'
        prediction = 0
    else:
        # Check the second condition
        nodes[1] = X["NI/Sales"] <= 0.10
        
        if nodes[1]:
            # If the second condition is also satisfied, predict 'not solvent'
            prediction = 0
        else:
            # Otherwise, predict 'solvent'
            prediction = 1

    return prediction, nodes

# Example usage:
example_input = {
    "EBIT/TA": 0.2,
    "NI/TC": 0.1,
    "Sales/TA": 0.5,
    "EBIT/Sales": 0.1,
    "NI/Sales": 0.08,
    "WC/TA": 0.3,
    "Equity/TL": 1.8,
    "Equity/TA": 0.5
}

prediction, nodes = predict(example_input)
print("Prediction:", prediction)  # Output: 0 or 1 depending on the values
print("Nodes:", nodes)  # Output: [1 or 0, 1 or 0]
```

### Explanation:
1. **First Decision Node**: 
   - The first `nodes[0]` checks if `Equity/TL` (Equity/Total Liabilities) is less than or equal to 1.50.
   - If true (`Equity/TL` ≤ 1.50), it means the company has more liabilities compared to equity, which is generally a red flag, so the company is classified as `not solvent` (0).

2. **Second Decision Node**:
   - If the first condition is false (`Equity/TL` > 1.50), the function checks `NI/Sales` (Net Income/Sales) to see if it's less than or equal to 0.10 with `nodes[1]`.
   - If `NI/Sales` is ≤ 0.10, indicating low profitability relative to sales, the company is classified as `not solvent` (0).
   - Otherwise, the company is classified as `solvent` (1).

This function works by evaluating the conditions in sequence and determining the nodes' truth values, which helps in tracing the decision-making process step-by-step.