


Here is the Python function implementing a decision tree that classifies whether a company is solvent (1) or insolvent (0). The function uses the given features and outputs both a prediction and a list of truth values for the inner nodes:

```python
def predict(X: dict):
    """
    Predict whether a company is solvent (1) or insolvent (0) based on input features. 

    Parameters:
        X (dict): A dictionary containing feature keys and their corresponding values.

    Returns:
        tuple: (prediction, nodes), where:
            - prediction (int): Predicted target value (1 = solvent, 0 = insolvent).
            - nodes (list): A list of truth values (1 for true, 0 for false) for each inner node in the decision tree.
    """
    nodes = 4 * [None]
    
    # Node 0: EBIT/TA <= 0.05
    nodes[0] = X["EBIT/TA"] <= 0.05
    
    # Node 1: WC/TA <= -0.10
    if nodes[0]:
        nodes[1] = X["WC/TA"] <= -0.10
    
        # Node 2: Equity/TL <= 1.00
        if nodes[1]:
            nodes[2] = X["Equity/TL"] <= 1.00
            
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        
        else:
            prediction = 1  # Solvent
    
    else:
        # Node 3: NI/Sales <= 0.02
        nodes[1] = X["NI/Sales"] <= 0.02
        
        if nodes[1]:
            nodes[2] = X["Sales/TA"] <= 0.90
            
            if nodes[2]:
                prediction = 0  # Insolvent
            else:
                prediction = 1  # Solvent
        
        else:
            prediction = 1  # Solvent
    
    return prediction, [int(node) if node is not None else 0 for node in nodes]
```

---

### Explanation of Decision Tree:
1. **Node 0: Check EBIT/TA (Earnings Before Interest and Taxes / Total Assets)**
   - If `EBIT/TA <= 0.05`, companies with very low EBIT relative to their assets tend to be insolvent.
   - If `EBIT/TA > 0.05`, the company is likely solvent.
   
2. **Node 1: Check WC/TA (Working Capital / Total Assets)**
   - Among low-EBIT companies (`EBIT/TA <= 0.05`), check if `WC/TA <= -0.10`. Companies with highly negative WC/TA are likely insolvent.
   
3. **Node 2: Check Equity/TL (Equity / Total Liabilities)**
   - If WC/TA is too low (`WC/TA <= -0.10`), check if `Equity/TL <= 1.00`. If they have low equity (relative to their liabilities), they are likely insolvent. Otherwise, they might be solvent.
   
4. **Node 3: Check NI/Sales (Net Income / Sales)**
   - Among higher-EBIT companies (`EBIT/TA > 0.05`), check if `NI/Sales <= 0.02`. Low net income margin may indicate insolvency.
   - If NI/Sales is low, further check if `Sales/TA <= 0.90`. Lower sales efficiency correlates with insolvency.

---

### Example Usage:
Let's say the input features are:
```python
features = {
    "EBIT/TA": 0.03,
    "NI/TC": 0.15,
    "Sales/TA": 0.85,
    "EBIT/Sales": 0.08,
    "NI/Sales": 0.01,
    "WC/TA": -0.05,
    "Equity/TL": 1.2,
    "Equity/TA": 0.6,
}
```

Call the function:
```python
prediction, nodes = predict(features)
print("Prediction:", prediction)  # Output: Prediction: 1 (solvent)
print("Nodes:", nodes)  # Output: List of truth values for the conditions
```

Output:
```
Prediction: 1
Nodes: [1, 0, 0, 0]
```

### Explanation of Output:
- Node 0: `EBIT/TA <= 0.05` is `True`.
- Node 1: `WC/TA <= -0.10` is `False` (so Node 2 is skipped).
- Prediction: Company is classified as **solvent (1)**. 

This decision tree evaluates the features step-by-step and returns the prediction with interpretability. Let me know if you need further customization!