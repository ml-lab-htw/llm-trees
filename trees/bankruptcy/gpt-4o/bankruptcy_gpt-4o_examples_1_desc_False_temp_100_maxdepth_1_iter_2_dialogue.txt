


Here is the Python function implementing a decision tree with a maximum depth of 1, based on the provided features and the logic I described earlier:

```python
def predict(X: dict):
    # Initialize the list to store inner node truth values
    nodes = [None]
    
    # First decision node: Working Capital/Total Assets (WC/TA)
    nodes[0] = X['WC/TA'] <= 0.05
    
    # Decision based on the inner node
    if nodes[0]:
        prediction = 1  # company went bankrupt
    else:
        prediction = 0  # company did not go bankrupt
    
    # Return the prediction and the list of inner node truth values
    return prediction, nodes
```

### Explanation:

- The decision tree has a single decision node with the condition `X['WC/TA'] <= 0.05`. This means that if the company's **Working Capital/Total Assets** ratio is less than or equal to 0.05, the company is classified as **bankrupt** (`prediction = 1`). Otherwise, the company is classified as **not bankrupt** (`prediction = 0`).
  
- The `nodes` list stores the boolean result of the decision node condition. If the condition is satisfied (i.e., `WC/TA <= 0.05`), the first element of `nodes` will be `True` (or `1`); otherwise, it will be `False` (or `0`).

- The function returns both the **predicted class** (whether the company went bankrupt or not) and the list of truth values from the decision nodes (`nodes`).

This function structure can easily accommodate additional nodes if the tree were to grow deeper.