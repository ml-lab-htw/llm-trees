


Let's create a Python function that implements the decision tree described earlier to classify whether a company went bankrupt or not. The function will use the specified feature keys and return both the prediction and the list of truth values corresponding to the inner nodes.

```python
def predict(X: dict):
    nodes = 4 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.05
    nodes[1] = X["RE/TA"] <= 0.1
    nodes[2] = X["WC/TA"] <= 0.2
    nodes[3] = X["BVE/BVL"] <= 0.5

    if nodes[0]:
        prediction = 1  # Bankrupt
    else:
        if nodes[1]:
            if nodes[2]:
                prediction = 1  # Bankrupt
            else:
                prediction = 0  # Not Bankrupt
        else:
            if nodes[3]:
                prediction = 1  # Bankrupt
            else:
                prediction = 0  # Not Bankrupt

    return prediction, nodes

# Example usage:
# Example feature vector
X = {
    'WC/TA': 0.15,
    'RE/TA': 0.08,
    'EBIT/TA': 0.06,
    'S/TA': 1.25,
    'BVE/BVL': 0.45
}

prediction, nodes = predict(X)
print(f"Prediction: {'Bankrupt' if prediction == 1 else 'Not Bankrupt'}")
print(f"Node conditions: {nodes}")
```

In this function, `X` is a dictionary containing the feature values for a particular company. The function checks the conditions of the nodes in the decision tree and stores the boolean outcomes in a list `nodes`, which is then used to make the final prediction. The function returns this prediction (0 for "Not Bankrupt" and 1 for "Bankrupt") as well as the list of boolean values for each inner node condition.