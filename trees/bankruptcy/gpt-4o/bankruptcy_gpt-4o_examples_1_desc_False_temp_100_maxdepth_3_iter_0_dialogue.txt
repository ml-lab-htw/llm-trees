


```python
def predict(X: dict):
    nodes = 5 * [None]

    # Root node: WC/TA <= 0.05
    nodes[0] = X["WC/TA"] <= 0.05

    if nodes[0]:
        # Node 2: EBIT/TA <= -0.02
        nodes[1] = X["EBIT/TA"] <= -0.02
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        # Node 3: RE/TA <= 0.10
        nodes[2] = X["RE/TA"] <= 0.10
        if nodes[2]:
            # Node 4: BVE/BVL <= 0.5
            nodes[3] = X["BVE/BVL"] <= 0.5
            if nodes[3]:
                prediction = 1  # Bankrupt
            else:
                prediction = 0  # Not Bankrupt
        else:
            # Node 5: S/TA <= 0.8
            nodes[4] = X["S/TA"] <= 0.8
            if nodes[4]:
                prediction = 0  # Not Bankrupt
            else:
                prediction = 1  # Bankrupt

    return prediction, nodes
```

### Explanation:
- **nodes[0]**: Checks if the company's **WC/TA** (Working Capital/Total Assets) is less than or equal to 0.05. Low liquidity increases the risk of bankruptcy.
- **nodes[1]**: For companies with low WC/TA, the next test is on **EBIT/TA** (Earnings Before Interest and Tax/Total Assets). If EBIT/TA is very negative (≤ -0.02), it suggests poor profitability, leading to a bankruptcy prediction.
- **nodes[2]**: For companies with better liquidity (WC/TA > 0.05), we check the **RE/TA** (Retained Earnings/Total Assets). If it's low (≤ 0.10), the company might not have much long-term financial stability.
- **nodes[3]**: For companies with low RE/TA, we check solvency through **BVE/BVL** (Book Value of Equity/Book Value of Liabilities). If BVE/BVL is low (≤ 0.5), it suggests high leverage, increasing bankruptcy risk.
- **nodes[4]**: For companies with higher retained earnings (RE/TA > 0.10), **S/TA** (Sales/Total Assets) is checked. If the company generates sales efficiently (S/TA ≤ 0.8), bankruptcy is less likely.

The function returns:
- **prediction**: `1` for bankrupt, `0` for not bankrupt.
- **nodes**: A list of boolean values representing whether each node condition was satisfied (`True` or `False`).