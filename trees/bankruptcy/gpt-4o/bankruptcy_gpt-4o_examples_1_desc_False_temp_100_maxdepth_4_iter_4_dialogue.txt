


```python
def predict(X: dict):
    nodes = 7 * [None]  # List to track truth values of each inner node condition
    
    # Node 0: Checking if EBIT/TA is less than or equal to 0.03
    nodes[0] = X["EBIT/TA"] <= 0.03
    
    if nodes[0]:  # EBIT/TA <= 0.03
        # Node 1: Checking if RE/TA is less than or equal to 0.02
        nodes[1] = X["RE/TA"] <= 0.02
        
        if nodes[1]:  # RE/TA <= 0.02
            # Node 2: Checking if WC/TA is less than or equal to -0.05
            nodes[2] = X["WC/TA"] <= -0.05
            
            if nodes[2]:  # WC/TA <= -0.05
                prediction = 1  # Bankrupt
            else:  # WC/TA > -0.05
                prediction = 0  # Non-Bankrupt
        else:  # RE/TA > 0.02
            # Node 3: Checking if EBIT/TA is less than or equal to -0.05
            nodes[3] = X["EBIT/TA"] <= -0.05
            
            if nodes[3]:  # EBIT/TA <= -0.05
                prediction = 1  # Bankrupt
            else:  # EBIT/TA > -0.05
                prediction = 0  # Non-Bankrupt
    else:  # EBIT/TA > 0.03
        # Node 4: Checking if Sales/Total Assets (S/TA) is less than or equal to 0.50
        nodes[4] = X["S/TA"] <= 0.50
        
        if nodes[4]:  # S/TA <= 0.50
            # Node 5: Checking if BVE/BVL is less than or equal to 0.80
            nodes[5] = X["BVE/BVL"] <= 0.80
            
            if nodes[5]:  # BVE/BVL <= 0.80
                prediction = 1  # Bankrupt
            else:  # BVE/BVL > 0.80
                prediction = 0  # Non-Bankrupt
        else:  # S/TA > 0.50
            prediction = 0  # Non-Bankrupt

    return prediction, nodes
```

### Explanation of the Function:
- **Input**: The function `predict` takes a dictionary `X` as input, where the keys are the feature names (e.g., "WC/TA", "RE/TA", etc.) and the values are the corresponding feature values for a given company.
- **Nodes**: The list `nodes` tracks which conditions are satisfied at each step of the decision tree. It contains `1` if the condition is satisfied and `0` if not.
- **Decision Logic**: The decision tree works by checking the conditions in a nested structure. Based on the values of the features, it traverses the tree, comparing the feature values to predefined thresholds to make a bankruptcy prediction (0 for non-bankrupt and 1 for bankrupt).
- **Return**: The function returns two things:
  1. **`prediction`**: The final classification (0 or 1) based on the decision tree.
  2. **`nodes`**: A list of boolean values representing whether each inner node condition was satisfied or not.

### Example Usage:

```python
example_input = {
    "WC/TA": 0.05,
    "RE/TA": 0.01,
    "EBIT/TA": 0.02,
    "S/TA": 0.55,
    "BVE/BVL": 1.0
}

prediction, nodes = predict(example_input)
print(f"Prediction: {prediction}")  # Output: Prediction: 0 (Non-Bankrupt)
print(f"Nodes: {nodes}")  # Output: Nodes: [True, False, None, None, None, None, None]
```

This function is a hardcoded decision tree based on typical financial indicators without actual training data, but it reflects common thresholds for bankruptcy risk.