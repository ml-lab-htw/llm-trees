


Here's the Python function that implements the decision tree based on the provided features and the encoding/mapping details:

```python
def predict(X: dict):
    # Initialize a list to hold the truth values of the inner nodes
    nodes = 2 * [None]
    
    # Test conditions for the inner nodes
    nodes[0] = X["EBIT/TA"] <= 0.05  # Earnings Before Interest and Tax / Total Assets
    nodes[1] = X["RE/TA"] <= -0.10  # Retained Earnings / Total Assets

    # Decision-making process based on the conditions
    if nodes[0]:  # If EBIT/TA <= 0.05 (low profitability)
        if nodes[1]:  # If RE/TA <= -0.10 (very low retained earnings)
            prediction = 1  # Bankrupt (yes)
        else:  # If RE/TA > -0.10
            prediction = 0  # Not Bankrupt (no)
    else:  # If EBIT/TA > 0.05 (higher profitability)
        if X["S/TA"] <= 1.20:  # If Sales/Total Assets <= 1.20
            prediction = 0  # Not Bankrupt (no)
        else:  # If Sales/Total Assets > 1.20
            prediction = 0  # Not Bankrupt (no)

    # Return the prediction and the truth values of the inner nodes
    return prediction, nodes
```
