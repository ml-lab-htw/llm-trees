Here's a decision tree with a maximum depth of 2 using the Features:

### Features:
- **WC/TA**: Working Capital/Total Assets
- **RE/TA**: Retained Earnings/Total Assets
- **EBIT/TA**: Earnings Before Interest and Tax/Total Assets
- **S/TA**: Sales/Total Assets
- **BVE/BVL**: Book Value of Equity/Book Value of Liabilities

### Target variable:
- **target**: company went bankrupt or not (0 = no, 1 = yes)

### Decision Tree:

```python
def predict(X: dict):
    # Initialize a list of nodes (inner nodes in the decision tree)
    nodes = 2 * [None]
    
    # Inner nodes conditions
    nodes[0] = X["WC/TA"] <= 0.05  # Node based on Working Capital/Total Assets
    nodes[1] = X["RE/TA"] <= 0.1   # Node based on Retained Earnings/Total Assets
    
    # Decision Tree Logic
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Predict bankrupt
        else:
            prediction = 0  # Predict not bankrupt
    else:
        prediction = 0  # Predict not bankrupt
    
    return prediction, nodes
```

### Explanation:
- **Node 1 (`WC/TA <= 0.05`)**: This is the first condition in the decision tree. If the company's working capital relative to total assets is less than or equal to 5%, it moves to the second node. Otherwise, it directly predicts the company is not bankrupt.
  
- **Node 2 (`RE/TA <= 0.1`)**: If the previous condition was true (i.e., `WC/TA <= 0.05`), the tree checks retained earnings relative to total assets. If this ratio is less than or equal to 10%, it predicts bankruptcy. Otherwise, it predicts the company is not bankrupt.

This simple decision tree structure uses two important financial ratios to classify whether a company is bankrupt or not.
