


Below is a Python function that implements the decision tree with a maximum depth of 2 for classifying whether a company went bankrupt or not based on the given features:

```python
def predict(X: dict):
    nodes = 2 * [None]
    # Check the condition of the first node
    nodes[0] = X["WC/TA"] <= 0.2
    
    if nodes[0]:
        # If the first condition is true, predict "Bankrupt"
        prediction = 1
    else:
        # Otherwise, check the condition of the second node
        nodes[1] = X["EBIT/TA"] <= 0.15
        
        if nodes[1]:
            # If the second condition is true, predict "Bankrupt"
            prediction = 1
        else:
            # If the second condition is false, predict "Not Bankrupt"
            prediction = 0
    
    return prediction, nodes

# Example usage:
features = {
    'WC/TA': 0.25,
    'RE/TA': 0.3,
    'EBIT/TA': 0.1,
    'S/TA': 0.5,
    'BVE/BVL': 1.2
}

prediction, nodes = predict(features)
print("Prediction:", "Bankrupt" if prediction == 1 else "Not Bankrupt")
print("Nodes:", nodes)
```

### Explanation:
1. The function `predict` takes a dictionary `X` where the keys are the feature names and the values are the corresponding feature values.
2. An array `nodes` of size 2 is initialized to store the truth values of the inner nodes.
3. The conditions for the two nodes are checked:
   - The first node checks if `WC/TA` is less than or equal to 0.2.
   - If the first condition is true, the company is predicted to be "Bankrupt" (class 1).
   - If the first condition is false, the second node checks if `EBIT/TA` is less than or equal to 0.15.
     - If the second condition is true, the company is predicted to be "Bankrupt" (class 1).
     - If the second condition is false, the company is predicted to be "Not Bankrupt" (class 0).
4. The function returns the prediction and the list of truth values for the inner nodes.

### Output:
- `prediction` is either 1 (Bankrupt) or 0 (Not Bankrupt).
- `nodes` is a list of boolean values indicating whether each inner node condition was satisfied (1 for True, 0 for False).