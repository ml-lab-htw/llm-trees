


Below is the Python function that implements the decision tree based on the features you provided, following the structure you requested:

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First node: EBIT/TA <= 0.05
    nodes[0] = X["EBIT/TA"] <= 0.05
    
    if nodes[0]:
        # If EBIT/TA <= 0.05, predict bankrupt (1)
        prediction = 1
    else:
        # Second node: BVE/BVL <= 0.30
        nodes[1] = X["BVE/BVL"] <= 0.30
        
        if nodes[1]:
            # If BVE/BVL <= 0.30, predict bankrupt (1)
            prediction = 1
        else:
            # If BVE/BVL > 0.30, predict not bankrupt (0)
            prediction = 0
    
    return prediction, nodes
```

### Explanation:
- **`nodes[0]`:** Checks whether the feature **EBIT/TA** is less than or equal to 0.05.
- **`nodes[1]`:** If the first condition is false (i.e., **EBIT/TA** is greater than 0.05), we then check whether **BVE/BVL** is less than or equal to 0.30.
- The function returns two outputs:
  1. **`prediction`:** The predicted class (1 = bankrupt, 0 = not bankrupt).
  2. **`nodes`:** A list of boolean values indicating whether the condition at each node was satisfied (1 = True, 0 = False).

### Example usage:

```python
X = {
    "WC/TA": 0.1,
    "RE/TA": 0.05,
    "EBIT/TA": 0.08,
    "S/TA": 0.6,
    "BVE/BVL": 0.25
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction}, Node decisions: {nodes}")
```

This function will return a classification of whether the company went bankrupt or not, along with the truth values of the inner node conditions.