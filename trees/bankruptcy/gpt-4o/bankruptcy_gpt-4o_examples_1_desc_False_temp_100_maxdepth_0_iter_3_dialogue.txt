


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node 1: Check if EBIT/TA <= 0.05
    nodes[0] = X["EBIT/TA"] <= 0.05
    
    if nodes[0]:
        # Node 2: Check if WC/TA <= 0.10
        nodes[1] = X["WC/TA"] <= 0.10
        
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

### Explanation:

- **Node 1**: We check if **EBIT/TA** is less than or equal to 0.05. Companies with low profitability are more likely to be distressed.
- **Node 2**: If the company fails the profitability test (EBIT/TA â‰¤ 0.05), we further check its liquidity via **WC/TA**. If **WC/TA** is less than or equal to 0.10, this indicates poor liquidity, and we classify the company as **Bankrupt (1)**. Otherwise, it is classified as **Not Bankrupt (0)**.

- If **EBIT/TA** is greater than 0.05, the company is making enough earnings relative to its assets, and we classify it as **Not Bankrupt (0)** without needing to check further.

The function returns:
1. **prediction**: Whether the company is bankrupt (1) or not (0).
2. **nodes**: A list where each entry represents whether the condition at an inner node was satisfied (`True` or `False`), corresponding to the decision tree's internal logic.

