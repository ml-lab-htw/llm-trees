


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First split: Earnings Before Interest and Tax/Total Assets (EBIT/TA)
    nodes[0] = X["EBIT/TA"] <= 0.05

    if nodes[0]:
        # Second split: Retained Earnings/Total Assets (RE/TA)
        nodes[1] = X["RE/TA"] <= 0.10
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        # Second split: Sales/Total Assets (S/TA)
        nodes[1] = X["S/TA"] <= 0.50
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt

    return prediction, nodes
```

### Explanation:
- **Nodes List**: The list `nodes` keeps track of the conditions at each decision node:
  - `nodes[0]`: Whether the condition at the first split (`EBIT/TA <= 0.05`) is satisfied.
  - `nodes[1]`: Whether the condition at the second split (either `RE/TA <= 0.10` or `S/TA <= 0.50`, depending on the path) is satisfied.
  
- **Decision Logic**:
  - If `EBIT/TA <= 0.05` is true, the tree checks `RE/TA <= 0.10`. If this is also true, the company is likely to go bankrupt (prediction = 1). Otherwise, it's predicted to not go bankrupt (prediction = 0).
  - If `EBIT/TA > 0.05`, the tree checks `S/TA <= 0.50`. If this is true, the company is predicted to go bankrupt (prediction = 1). Otherwise, it's predicted to not go bankrupt (prediction = 0).

This function takes a dictionary `X` with feature values and returns a prediction (`0` for not bankrupt, `1` for bankrupt) along with the list of boolean conditions that were checked (`nodes`).