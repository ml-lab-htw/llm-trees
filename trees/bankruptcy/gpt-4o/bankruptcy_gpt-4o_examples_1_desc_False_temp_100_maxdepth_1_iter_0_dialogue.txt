


```python
def predict(X: dict):
    nodes = [None]  # We have only one node since the tree's depth is 1
    
    # The root node is based on the condition: EBIT/TA <= 0.05
    nodes[0] = X["EBIT/TA"] <= 0.05
    
    # If EBIT/TA is less than or equal to 0.05, predict bankruptcy (1)
    if nodes[0]:
        prediction = 1  # Company went bankrupt
    # Otherwise, predict the company did not go bankrupt (0)
    else:
        prediction = 0  # Company did not go bankrupt
    
    return prediction, nodes
```

### Explanation:
- This function accepts a dictionary `X` where the keys are the feature names (e.g., `"EBIT/TA"`) and the values are the feature values for a specific company.
- The decision tree has a depth of 1 with a single decision node based on the feature **EBIT/TA** (Earnings Before Interest and Tax / Total Assets).
- The root node checks whether the value of **EBIT/TA** is less than or equal to 0.05.
  - If **EBIT/TA** is less than or equal to 0.05, the function predicts that the company went bankrupt (i.e., returns `1`).
  - If **EBIT/TA** is greater than 0.05, the function predicts that the company did not go bankrupt (i.e., returns `0`).
- The function also returns a list `nodes` where each entry represents the truth value of the decision node. In this case, we only have one node, so the list has one entry. If the condition is satisfied (i.e., **EBIT/TA** <= 0.05), it will be `True`; otherwise, it will be `False`.