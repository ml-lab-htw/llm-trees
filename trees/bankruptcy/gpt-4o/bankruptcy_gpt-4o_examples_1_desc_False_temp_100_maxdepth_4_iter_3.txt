Based on the Features provided (`WC/TA`, `RE/TA`, `EBIT/TA`, `S/TA`, `BVE/BVL`), and the target variable (`company went bankrupt or not`), here is a decision tree with depth 4 (maximum depth), which can have between 4 and 15 inner nodes.

I will create a decision tree structure with a series of if-else conditions, where each node checks the value of a feature and makes a decision based on it.

The decision tree will be represented as a Python function `predict()`, which takes as input a dictionary `X` containing the feature values, and it will return the prediction (0 for no bankruptcy, 1 for bankruptcy) along with a list of truth values corresponding to the conditions of the inner nodes.

### Decision Tree:
```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Inner nodes
    nodes[0] = X["WC/TA"] <= 0.1
    nodes[1] = X["RE/TA"] <= -0.2
    nodes[2] = X["EBIT/TA"] <= 0.05
    nodes[3] = X["BVE/BVL"] <= 0.5

    # Decision logic
    if nodes[0]:  # WC/TA <= 0.1
        if nodes[1]:  # RE/TA <= -0.2
            if nodes[2]:  # EBIT/TA <= 0.05
                if nodes[3]:  # BVE/BVL <= 0.5
                    prediction = 1  # High risk of bankruptcy
                else:
                    prediction = 0  # Low risk of bankruptcy
            else:
                if nodes[3]:
                    prediction = 1  # High risk of bankruptcy
                else:
                    prediction = 0  # Low risk of bankruptcy
        else:
            if nodes[2]:
                prediction = 1  # High risk of bankruptcy
            else:
                prediction = 0  # Low risk of bankruptcy
    else:
        if nodes[2]:  # EBIT/TA <= 0.05
            if nodes[3]:
                prediction = 1  # High risk of bankruptcy
            else:
                prediction = 0  # Low risk of bankruptcy
        else:
            prediction = 0  # Low risk of bankruptcy

    return prediction, nodes
```

### Explanation of the Decision Tree:
1. **Node 0**: The first split is based on the `WC/TA` (Working Capital/Total Assets) ratio. If it's less than or equal to 0.1, the company might be at a higher risk of bankruptcy due to limited working capital. Otherwise, the risk is lower.
   
2. **Node 1**: If `WC/TA` is low, we check the `RE/TA` (Retained Earnings/Total Assets). If it's below -0.2, the company has accumulated significant losses, which increases bankruptcy risk.

3. **Node 2**: We then check `EBIT/TA` (Earnings Before Interest and Taxes/Total Assets). If it's low (<= 0.05), this indicates poor profitability, which increases bankruptcy risk.

4. **Node 3**: Finally, we look at `BVE/BVL` (Book Value of Equity/Book Value of Liabilities). If it's less than or equal to 0.5, the company has relatively low equity compared to its liabilities, which could indicate financial distress.

### Example Usage:
```python
# Input features
X = {
    "WC/TA": 0.05,
    "RE/TA": -0.3,
    "EBIT/TA": 0.02,
    "S/TA": 0.7,
    "BVE/BVL": 0.4
}

# Prediction and inner node conditions
prediction, nodes = predict(X)

print("Prediction:", prediction)  # 1 (high risk of bankruptcy)
print("Nodes:", nodes)  # [True, True, True, True]
```

In this example, the company would be predicted to have a higher risk of bankruptcy (prediction = 1), and all inner node conditions are satisfied (`[True, True, True, True]`).
