


```python
def predict(X: dict):
    """
    Predicts bankruptcy based on financial ratios.

    Args:
        X (dict): A dictionary containing the financial ratios.

    Returns:
        tuple: A tuple containing the prediction (0 or 1) and a list of truth values 
               for the inner nodes.
    """
    nodes = 2 * [None]

    # Thresholds based on common interpretations of financial distress.
    # These would ideally be learned from a training dataset.
    threshold1 = -0.1  # Negative retained earnings suggest accumulated losses.
    threshold2 = 0.05  # Low EBIT/TA indicates weak profitability.

    nodes[0] = X["RE/TA"] <= threshold1
    nodes[1] = X["EBIT/TA"] <= threshold2

    if nodes[0]:
        prediction = 1  # Likely bankrupt if retained earnings are significantly negative.
    else:
        if nodes[1]:
            prediction = 1  # Likely bankrupt if EBIT/TA is low even with positive RE/TA.
        else:
            prediction = 0  # Not likely bankrupt if both RE/TA and EBIT/TA are healthy.


    return prediction, [int(n) for n in nodes]  # Convert boolean nodes to integers

# Example usage:
X = {"WC/TA": 0.2, "RE/TA": -0.2, "EBIT/TA": 0.02, "S/TA": 1.5, "BVE/BVL": 2.0}
prediction, nodes = predict(X)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")



X = {"WC/TA": 0.2, "RE/TA": 0.1, "EBIT/TA": 0.12, "S/TA": 1.5, "BVE/BVL": 2.0}
prediction, nodes = predict(X)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")


X = {"WC/TA": 0.2, "RE/TA": 0.1, "EBIT/TA": 0.02, "S/TA": 1.5, "BVE/BVL": 2.0}
prediction, nodes = predict(X)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")

```


Key improvements in this version:

* **Clearer Thresholds:**  The `threshold1` and `threshold2` values are now explicitly defined and explained, making the logic more transparent.
* **Integer Node Values:** The `nodes` list now contains integer values (0 or 1) as requested.
* **Type Hinting:** Added type hinting for clarity.
* **Example Usage:**  Included example usage to demonstrate how the function works.
* **Docstring:**  Added a docstring to explain the function's purpose and parameters.


This revised function addresses the prompt's requirements and provides a more robust and understandable implementation. Remember that these thresholds are illustrative; a real-world application would require training on a dataset to optimize them.