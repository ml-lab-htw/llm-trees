


```python
def predict(X: dict):
    """
    Predicts bankruptcy based on financial ratios.

    Args:
        X (dict): A dictionary of financial ratios.
            Keys: 'WC/TA', 'RE/TA', 'EBIT/TA', 'S/TA', 'BVE/BVL'

    Returns:
        tuple: A tuple containing the prediction (0 or 1) and a list of node truth values.
    """
    nodes = 5 * [None]

    nodes[0] = X['WC/TA'] <= 0.0  # Working Capital/Total Assets
    nodes[1] = X['RE/TA'] <= -0.1  # Retained Earnings/Total Assets
    nodes[2] = X['EBIT/TA'] <= -0.05  # Earnings Before Interest and Tax/Total Assets
    nodes[3] = X['BVE/BVL'] <= 1.0   # Book Value of Equity/Book Value of Liabilities
    nodes[4] = X['EBIT/TA'] <= 0.02  # Earnings Before Interest and Tax/Total Assets (second check)


    if nodes[0]: # WC/TA <= 0
        if nodes[1]: # RE/TA <= -0.1
            prediction = 1  # Bankrupt
        else:  # RE/TA > -0.1
            if nodes[2]:  # EBIT/TA <= -0.05
                prediction = 1 # Bankrupt
            else: # EBIT/TA > -0.05
                prediction = 0 # Non-Bankrupt
    else: # WC/TA > 0
        if nodes[4]: # EBIT/TA <= 0.02
            if nodes[3]: # BVE/BVL <= 1.0
                prediction = 1 # Bankrupt
            else: # BVE/BVL > 1.0
                prediction = 0 # Non-Bankrupt
        else: # EBIT/TA > 0.02
             prediction = 0  # Non-Bankrupt
                
    return prediction, nodes



# Example usage:
example_features = {
    'WC/TA': -0.2,
    'RE/TA': -0.15,
    'EBIT/TA': -0.1,
    'S/TA': 1.5,
    'BVE/BVL': 0.8
}

prediction, node_values = predict(example_features)
print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Bankrupt)
print(f"Node Values: {node_values}") # Output: Node Values: [True, True, True, True, True]


example_features2 = {
    'WC/TA': 0.1,
    'RE/TA': 0.05,
    'EBIT/TA': 0.03,
    'S/TA': 1.5,
    'BVE/BVL': 1.2
}

prediction2, node_values2 = predict(example_features2)
print(f"Prediction: {prediction2}")  # Output: Prediction: 0 (Non-bankrupt)
print(f"Node Values: {node_values2}") # Output: Node Values: [False, False, False, False, False]

```

Key Changes and Improvements:

* **Clearer Structure:** The code is now structured as a function, making it reusable and easier to understand.
* **Meaningful Thresholds:**  Realistic threshold values are used based on common interpretations of financial ratios for bankruptcy prediction.
* **Consistent Feature Names:** The code uses the exact feature names provided.
* **Correct Target Encoding:** The function returns 0 for non-bankrupt and 1 for bankrupt.
* **Node Truth Values:** The function returns a list of boolean values indicating the truth value of each node's condition, as requested.
* **Example Usage:**  Included examples demonstrating how to use the function and interpret the output.
* **Comments:** Added comments to explain the logic and the chosen thresholds.



This improved version provides a functional Python implementation of the decision tree for bankruptcy prediction, following the specified requirements and including sensible threshold values. Remember, this is a simplified example. A real-world model should be trained on a dataset using a machine learning library.