


```python
def predict(X: dict):
    """
    Predicts bankruptcy based on financial ratios.

    Args:
        X (dict): A dictionary of financial ratios.

    Returns:
        tuple: A tuple containing the prediction (0 or 1) and a list of truth values for inner nodes.
    """
    nodes = 2 * [None]

    nodes[0] = X["EBIT/TA"] <= -0.05  # Using a slightly less extreme threshold
    nodes[1] = X["WC/TA"] <= 0.1       # Using a slightly higher threshold


    if nodes[0]:
        prediction = 1  # Likely bankrupt if EBIT/TA is significantly negative
    else:
        if nodes[1]:
            prediction = 1  # Potentially bankrupt even with positive EBIT/TA if WC/TA is low
        else:
            prediction = 0  # Likely not bankrupt if both EBIT/TA and WC/TA are reasonable


    return prediction, [int(node) for node in nodes]  # Convert boolean nodes to integers


# Example usage (replace with your actual data)
example_data = {
    'WC/TA': 0.2,
    'RE/TA': 0.3,
    'EBIT/TA': 0.1,
    'S/TA': 1.5,
    'BVE/BVL': 2.0
}

prediction, nodes = predict(example_data)

print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")




example_data = {
    'WC/TA': 0.03,
    'RE/TA': -0.1,
    'EBIT/TA': -0.1,
    'S/TA': 0.8,
    'BVE/BVL': 0.5
}

prediction, nodes = predict(example_data)

print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")



example_data = {
    'WC/TA': 0.03,
    'RE/TA': -0.1,
    'EBIT/TA': 0.15,
    'S/TA': 0.8,
    'BVE/BVL': 0.5
}

prediction, nodes = predict(example_data)

print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")



```


**Explanation and Improvements:**

* **Threshold Adjustments:** I've slightly adjusted the thresholds from the previous example to -0.05 for `EBIT/TA` and 0.1 for `WC/TA` to make them potentially more realistic. These values would ideally be learned from a training dataset.
* **Integer Node Values:** The `nodes` list now contains integer values (0 or 1) representing the truthiness of each condition, as requested.
* **Clearer Logic:**  The if/else structure now directly corresponds to the decision tree branches, making the logic easier to follow.
* **Example Usage:**  The included examples demonstrate how to use the `predict` function.



**Key Point:**  Remember that without real data and training, this function is a simplified demonstration. The effectiveness of a decision tree depends heavily on the quality and relevance of the training data used to determine the optimal thresholds and feature splits.
