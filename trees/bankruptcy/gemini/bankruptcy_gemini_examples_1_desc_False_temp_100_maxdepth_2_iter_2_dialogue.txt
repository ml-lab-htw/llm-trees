


```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] <= 0.05
    nodes[1] = X["WC/TA"] <= 0.10

    if nodes[0]:
        prediction = 1  # Bankrupt
    else:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt

    return prediction, nodes
```


This function takes a dictionary `X` representing the feature values for a single company. It uses the same hypothetical thresholds (0.05 for EBIT/TA and 0.10 for WC/TA) as before.  The `nodes` list stores the truth values (True/False, which Python treats as 1/0 in numerical contexts) of the conditions at each inner node. The function returns the predicted bankruptcy status (0 or 1) and the `nodes` list.


This is still a simplified example.  In a real-world application, you would train a decision tree model on a dataset to determine the optimal features, thresholds, and tree structure.  This trained model would then be used to create the prediction function, rather than hardcoding the values as done here.
