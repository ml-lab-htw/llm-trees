


```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["EBIT/TA"] <= -0.10
    nodes[1] = X["WC/TA"] <= 0.05

    if nodes[0]:
        prediction = 1  # Bankrupt
    else:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Non-Bankrupt

    return prediction, nodes
```


This function takes a dictionary `X` representing the feature values for a single company.  The keys of the dictionary should match the provided feature names exactly (e.g., "WC/TA", "EBIT/TA"). It then evaluates the conditions based on the hardcoded thresholds (-0.10 and 0.05) and returns the predicted bankruptcy status (0 or 1) along with the list `nodes` indicating which branches were taken.


Remember, this function is based on the hypothetical example tree.  To create a more robust and accurate prediction function, you would need to train a decision tree model on real-world bankruptcy data. This would allow the algorithm to learn the optimal features to use and the best splitting thresholds.
