


```python
def predict(X: dict):
    """
    Predicts bankruptcy based on financial ratios.

    Args:
        X (dict): A dictionary containing the following features:
            'WC/TA': Working Capital/Total Assets
            'RE/TA': Retained Earnings/Total Assets
            'EBIT/TA': Earnings Before Interest and Tax/Total Assets
            'S/TA': Sales/Total Assets
            'BVE/BVL': Book Value of Equity/Book Value of Liabilities

    Returns:
        tuple: A tuple containing the prediction (0 for no bankruptcy, 1 for bankruptcy)
               and a list of truth values for the inner nodes.
    """
    nodes = 2 * [None]
    nodes[0] = X['WC/TA'] <= 0.10
    nodes[1] = X['RE/TA'] <= 0.05

    if nodes[0]:
        prediction = 1  # Bankrupt if low working capital
    else:
        if nodes[1]:
            prediction = 1 # Bankrupt if low retained earnings even if decent working capital
        else:
            prediction = 0  # Not Bankrupt

    return prediction, nodes


# Example usage:
X = {'WC/TA': 0.05, 'RE/TA': 0.02, 'EBIT/TA': 0.15, 'S/TA': 1.2, 'BVE/BVL': 0.8}
prediction, nodes = predict(X)
print(f"Prediction: {prediction}")  # Output: Prediction: 1
print(f"Nodes: {nodes}")          # Output: Nodes: [True, True]



X = {'WC/TA': 0.25, 'RE/TA': 0.12, 'EBIT/TA': 0.15, 'S/TA': 1.2, 'BVE/BVL': 0.8}
prediction, nodes = predict(X)
print(f"Prediction: {prediction}")  # Output: Prediction: 0
print(f"Nodes: {nodes}")          # Output: Nodes: [False, False]



X = {'WC/TA': 0.15, 'RE/TA': 0.02, 'EBIT/TA': 0.15, 'S/TA': 1.2, 'BVE/BVL': 0.8}
prediction, nodes = predict(X)
print(f"Prediction: {prediction}")  # Output: Prediction: 1
print(f"Nodes: {nodes}")          # Output: Nodes: [False, True]
```


This updated code implements the decision tree logic as a Python function, returning both the prediction and the truth values for the inner nodes. It uses the specified feature keys and assigns reasonable thresholds (0.10 for `WC/TA` and 0.05 for `RE/TA`) for demonstrating the functionality. Remember, these thresholds would be ideally learned from a training dataset in a real-world scenario. The example usage demonstrates how to call the function and interpret the outputs.