


```python
def predict(X: dict):
    nodes = 3 * [None]  # Initialize list for truth values of inner nodes

    nodes[0] = X['EBIT/TA'] <= 0.05
    nodes[1] = X['RE/TA'] <= -0.10
    nodes[2] = X['WC/TA'] <= 0.10

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt (Low EBIT/TA and Low RE/TA)
        else:
            prediction = 0  # Non-Bankrupt (Low EBIT/TA but Okay RE/TA)
    else:  # EBIT/TA > 0.05
        if nodes[2]:
            prediction = 1  # Bankrupt (Good EBIT/TA but Low WC/TA)
        else:
            prediction = 0  # Non-Bankrupt (Good EBIT/TA and Good WC/TA)

    return prediction, nodes

```


This function takes a dictionary `X` representing the feature values for a single company. The keys of the dictionary should correspond to the feature names provided (e.g., 'WC/TA', 'RE/TA', etc.). The function returns the predicted bankruptcy status (0 or 1) and a list `nodes` containing the truth values (True/False or 1/0) of the conditions at each inner node of the decision tree.  This allows you to trace the path the function took to arrive at its prediction.  The thresholds used in the decision tree are the same as the previous example, representing a plausible (though hypothetical) relationship between the financial ratios and bankruptcy risk. Remember, this tree is not trained and serves as a demonstration.  For accurate predictions, you'll need to train a decision tree on real data.
