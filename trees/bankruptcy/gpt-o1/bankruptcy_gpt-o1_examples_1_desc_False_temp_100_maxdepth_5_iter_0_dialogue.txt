


Certainly! Below is the Python function that represents the decision tree you provided. This function takes a dictionary `X` containing the features, and returns the prediction (`0` for "Not Bankrupt", `1` for "Bankrupt") and a list `nodes` representing the truth values of the inner nodes.

```python
def predict(X: dict):
    # Initialize nodes list
    nodes = [None]*4
    
    # Evaluate conditions and store truth values
    nodes[0] = int(X['BVE/BVL'] <= 0.50)
    nodes[1] = int(X['EBIT/TA'] <= 0.00)
    nodes[2] = int(X['RE/TA'] <= 0.20)
    nodes[3] = int(X['WC/TA'] <= 0.10)
    
    # Follow the decision tree logic
    if nodes[0]:
        prediction = 1  # Bankrupt
    else:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            if nodes[2]:
                if nodes[3]:
                    prediction = 1  # Bankrupt
                else:
                    prediction = 0  # Not Bankrupt
            else:
                prediction = 0  # Not Bankrupt
                
    return prediction, nodes
```
