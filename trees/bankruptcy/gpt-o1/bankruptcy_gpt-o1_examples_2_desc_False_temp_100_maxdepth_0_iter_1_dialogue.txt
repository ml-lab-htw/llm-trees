


Here is the Python function that implements the decision tree classifier based on the features you provided. The function returns a single prediction (0 = Not Bankrupt, 1 = Bankrupt) and a list representing the truth values of the inner nodes. Each entry in the list is 1 if the condition of the corresponding inner node is satisfied, and 0 otherwise.

```python
def predict(X: dict):
    nodes = [None] * 3  # Initialize a list to store node conditions

    # Node 0: Check if 'EBIT/TA' <= 0.05
    nodes[0] = 1 if X['EBIT/TA'] <= 0.05 else 0

    if nodes[0]:
        # Node 1: 'EBIT/TA' <= 0.05 and check if 'RE/TA' <= 0.30
        nodes[1] = 1 if X['RE/TA'] <= 0.30 else 0
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        # Node 2: 'EBIT/TA' > 0.05 and check if 'WC/TA' <= -0.15
        nodes[2] = 1 if X['WC/TA'] <= -0.15 else 0
        if nodes[2]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt

    return prediction, nodes
```

**Explanation:**

- **Nodes List:**
  - `nodes[0]`: Condition `X['EBIT/TA'] <= 0.05`
  - `nodes[1]`: Condition `X['RE/TA'] <= 0.30` (only evaluated if `nodes[0]` is `1`)
  - `nodes[2]`: Condition `X['WC/TA'] <= -0.15` (only evaluated if `nodes[0]` is `0`)

- **Prediction Logic:**
  - If `nodes[0]` is `1` (i.e., `EBIT/TA` ≤ 0.05):
    - If `nodes[1]` is `1` (i.e., `RE/TA` ≤ 0.30), predict **1 (Bankrupt)**
    - Else, predict **0 (Not Bankrupt)**
  - Else (i.e., `EBIT/TA` > 0.05):
    - If `nodes[2]` is `1` (i.e., `WC/TA` ≤ -0.15), predict **1 (Bankrupt)**
    - Else, predict **0 (Not Bankrupt)**

**Usage Example:**

```python
# Example input data
X = {
    'WC/TA': -0.10,
    'RE/TA': 0.25,
    'EBIT/TA': 0.04,
    'S/TA': 1.5,
    'BVE/BVL': 0.8
}

# Get prediction and nodes
prediction, nodes = predict(X)

print(f"Prediction: {'Bankrupt' if prediction == 1 else 'Not Bankrupt'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: Bankrupt
Nodes: [1, 1, None]
```

In this example:

- `nodes[0]` is `1` because `EBIT/TA` (0.04) ≤ 0.05
- `nodes[1]` is `1` because `RE/TA` (0.25) ≤ 0.30
- `nodes[2]` is `None` because it was not evaluated (since `nodes[0]` is `1`)

**Note:** The keys in the input dictionary `X` must exactly match the feature keys provided:

- `'WC/TA'`
- `'RE/TA'`
- `'EBIT/TA'`
- `'S/TA'`
- `'BVE/BVL'`

Make sure to provide all required features for the function to work correctly.