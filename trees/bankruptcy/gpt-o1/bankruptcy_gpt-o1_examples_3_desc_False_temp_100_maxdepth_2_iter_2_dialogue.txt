


Here is the decision tree formatted as a Python function:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X['EBIT/TA'] <= 0.05
    nodes[1] = X['BVE/BVL'] <= 0.80
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        prediction = 0      # Not Bankrupt

    nodes = [int(node) for node in nodes]
    return prediction, nodes
```

This function takes a dictionary `X` with the following keys:
- `'WC/TA'`: Working Capital/Total Assets
- `'RE/TA'`: Retained Earnings/Total Assets
- `'EBIT/TA'`: Earnings Before Interest and Tax/Total Assets
- `'S/TA'`: Sales/Total Assets
- `'BVE/BVL'`: Book Value of Equity/Book Value of Liabilities

It returns:
- `prediction`: 0 if the company did **not** go bankrupt, 1 if the company **did** go bankrupt.
- `nodes`: A list of integers where each entry is 1 if the corresponding condition is satisfied, and 0 otherwise.

**Usage Example:**

```python
# Example input where the company has low EBIT/TA and low BVE/BVL
X_example = {
    'WC/TA': 0.1,
    'RE/TA': 0.05,
    'EBIT/TA': 0.04,
    'S/TA': 0.5,
    'BVE/BVL': 0.75
}

prediction, nodes = predict(X_example)
print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Bankrupt)
print(f"Nodes: {nodes}")            # Output: Nodes: [1, 1]
```

**Explanation:**

- The first node checks if `EBIT/TA` is less than or equal to 0.05.
  - If yes (`nodes[0] = 1`), proceed to the second node.
  - If no (`nodes[0] = 0`), predict **Not Bankrupt** (`prediction = 0`).
- The second node (only evaluated if the first condition is true) checks if `BVE/BVL` is less than or equal to 0.80.
  - If yes (`nodes[1] = 1`), predict **Bankrupt** (`prediction = 1`).
  - If no (`nodes[1] = 0`), predict **Not Bankrupt** (`prediction = 0`).

**Note:** Make sure to provide all required features in the input dictionary with the exact keys as specified.
