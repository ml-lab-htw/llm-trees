


```python
def predict(X: dict):
    nodes = 1 * [None]
    nodes[0] = X['EBIT/TA'] <= 0.05

    if nodes[0]:
        prediction = 1  # Company went bankrupt (1 = yes)
    else:
        prediction = 0  # Company did not go bankrupt (0 = no)
    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - **'EBIT/TA'**: Earnings Before Interest and Tax / Total Assets

- **Threshold:**
  - A threshold value of **0.05** (or 5%) is used to split the data.
    - If **EBIT/TA â‰¤ 0.05**, the company is predicted to have gone bankrupt.
    - If **EBIT/TA > 0.05**, the company is predicted **not** to have gone bankrupt.

- **Function Structure:**
  - The function `predict` takes a dictionary `X` containing feature values.
  - `nodes` is a list that records whether each condition in the decision tree is satisfied (`1`) or not (`0`).
    - For a maximum depth of 1 tree, there is only one condition to check.
  - The function returns:
    - `prediction`: The predicted class (0 = no bankruptcy, 1 = bankruptcy).
    - `nodes`: A list indicating which conditions were satisfied.

**Usage Example:**

```python
# Example input feature dictionary
X_example = {
    'WC/TA': 0.10,
    'RE/TA': 0.15,
    'EBIT/TA': 0.03,
    'S/TA': 0.20,
    'BVE/BVL': 1.5
}

# Get prediction and node conditions
prediction, nodes = predict(X_example)

print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Company went bankrupt)
print(f"Nodes: {nodes}")            # Output: Nodes: [True]
```

**Note:**

- Ensure that the input dictionary `X` contains all the required features with the exact keys:
  - `'WC/TA'`, `'RE/TA'`, `'EBIT/TA'`, `'S/TA'`, `'BVE/BVL'`
- The threshold value **0.05** is based on the example and should ideally be determined through data analysis for optimal accuracy.