


Based on the provided format and the decision tree I created earlier, here's the Python function that implements the bankruptcy prediction model:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= -0.05
    nodes[1] = X["WC/TA"] <= 0.20
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list 'nodes' to store the boolean results of the two conditions
3. First checks if Retained Earnings/Total Assets is <= -0.05
4. For companies with poor retained earnings, checks if Working Capital/Total Assets is <= 0.20
5. Returns both the prediction (0 for not bankrupt, 1 for bankrupt) and the list of node conditions

The thresholds (-0.05 for RE/TA and 0.20 for WC/TA) are based on typical values in financial literature where:
- RE/TA <= -0.05 indicates significant accumulated losses
- WC/TA <= 0.20 indicates potential liquidity problems

Companies are predicted to go bankrupt (1) only if they have both poor retained earnings and low working capital. Otherwise, they are predicted to survive (0).