


Here's the Python function that implements the bankruptcy prediction decision tree:

```python
def predict(X: dict):
    nodes = 4 * [None]
    nodes[0] = X["RE/TA"] <= -0.05
    nodes[1] = X["WC/TA"] <= 0.10
    nodes[2] = X["EBIT/TA"] <= 0.02
    nodes[3] = X["BVE/BVL"] <= 0.30

    if nodes[0]:  # RE/TA <= -0.05
        if nodes[1]:  # WC/TA <= 0.10
            prediction = 1  # Bankrupt
        else:  # WC/TA > 0.10
            if nodes[2]:  # EBIT/TA <= 0.02
                prediction = 1  # Bankrupt
            else:  # EBIT/TA > 0.02
                prediction = 0  # Not Bankrupt
    else:  # RE/TA > -0.05
        if nodes[2]:  # EBIT/TA <= 0.02
            if nodes[3]:  # BVE/BVL <= 0.30
                prediction = 1  # Bankrupt
            else:  # BVE/BVL > 0.30
                prediction = 0  # Not Bankrupt
        else:  # EBIT/TA > 0.02
            prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This decision tree uses realistic thresholds for financial ratios:
- RE/TA <= -0.05 indicates accumulated losses
- WC/TA <= 0.10 indicates low liquidity
- EBIT/TA <= 0.02 indicates poor operating performance
- BVE/BVL <= 0.30 indicates high leverage

The function returns:
- prediction: 1 for bankruptcy, 0 for no bankruptcy
- nodes: list of boolean values indicating which conditions were met

The tree prioritizes the most important financial indicators for bankruptcy prediction, starting with retained earnings and working capital