


Based on the provided feature names and target encoding, here's the decision tree prediction function:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= 0.12
    nodes[1] = X["WC/TA"] <= -0.05
    
    if nodes[0]:  # Low retained earnings
        if nodes[1]:  # Negative working capital
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not bankrupt
    else:  # Healthy retained earnings
        prediction = 0  # Not bankrupt
        
    return prediction, nodes
```

This function implements the decision tree we discussed earlier, with:
1. A primary split on Retained Earnings/Total Assets (RE/TA) at 0.12
2. A secondary split on Working Capital/Total Assets (WC/TA) at -0.05
3. The prediction returns 1 for bankruptcy and 0 for non-bankruptcy
4. The nodes list contains boolean values indicating whether each condition was met

The thresholds (0.12 and -0.05) are realistic values for these financial ratios, where:
- RE/TA <= 0.12 indicates relatively low retained earnings
- WC/TA <= -0.05 indicates negative working capital, suggesting liquidity problems