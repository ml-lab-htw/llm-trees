


I'll create a decision tree function based on the previously defined tree structure, using the exact feature keys provided and the binary target encoding (0 = not bankrupt, 1 = bankrupt).

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= 0.13
    nodes[1] = X["WC/TA"] <= 0.08
    
    if nodes[0]:  # RE/TA <= 0.13
        if nodes[1]:  # WC/TA <= 0.08
            prediction = 1  # Bankrupt
        else:  # WC/TA > 0.08
            prediction = 0  # Not Bankrupt
    else:  # RE/TA > 0.13
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

The thresholds I've chosen (0.13 for RE/TA and 0.08 for WC/TA) are based on common financial benchmarks:
- RE/TA threshold of 0.13 indicates that retained earnings represent 13% of total assets, which is a reasonable cutoff point for distinguishing between financially healthy and potentially troubled companies
- WC/TA threshold of 0.08 suggests that working capital is 8% of total assets, which is a critical level for liquidity

The decision tree first checks if the company has sufficient retained earnings relative to its assets. If this ratio is low (â‰¤0.13), it then looks at the working capital ratio. Companies with both low retained earnings and low working capital are classified as bankrupt (1), while companies with either higher retained earnings or sufficient working capital are classified as not bankrupt (0).