


Based on the provided features and target encoding, here's the decision tree implemented as a Python function:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # First level: Check Retained Earnings ratio
    nodes[0] = X["RE/TA"] <= 0.04
    
    # Second level: Check EBIT ratio and Working Capital ratio
    nodes[1] = X["EBIT/TA"] <= -0.05
    nodes[2] = X["WC/TA"] <= -0.10
    
    # Third level: Additional checks for companies with better retained earnings
    nodes[3] = X["WC/TA"] <= 0.15
    nodes[4] = X["EBIT/TA"] <= 0.03
    
    # Decision logic
    if nodes[0]:  # RE/TA <= 0.04
        if nodes[1]:  # EBIT/TA <= -0.05
            prediction = 1  # Bankrupt
        else:  # EBIT/TA > -0.05
            if nodes[2]:  # WC/TA <= -0.10
                prediction = 1  # Bankrupt
            else:  # WC/TA > -0.10
                prediction = 0  # Not Bankrupt
    else:  # RE/TA > 0.04
        if nodes[3]:  # WC/TA <= 0.15
            if nodes[4]:  # EBIT/TA <= 0.03
                prediction = 1  # Bankrupt
            else:  # EBIT/TA > 0.03
                prediction = 0  # Not Bankrupt
        else:  # WC/TA > 0.15
            prediction = 0  # Not Bankrupt
    
    return prediction, nodes
```

This implementation:
- Uses the exact feature names provided
- Returns both the prediction (0 = not bankrupt, 1 = bankrupt) and the list of node conditions
- Uses realistic threshold values based on financial ratios
- Has a maximum depth of 5