


Based on your examples and the bankruptcy prediction problem, I'll create a Python function that implements the decision tree I described earlier. I'll use meaningful thresholds for the financial ratios:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= -0.05
    nodes[1] = X["WC/TA"] <= -0.10
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Non-Bankrupt
    else:
        prediction = 0  # Non-Bankrupt

    return prediction, nodes
```

This implementation:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list 'nodes' to store the boolean results of the conditions
3. First checks if Retained Earnings/Total Assets is less than or equal to -0.05
4. If true, then checks if Working Capital/Total Assets is less than or equal to -0.10
5. Returns both the prediction (0 for non-bankrupt, 1 for bankrupt) and the list of node conditions

The thresholds (-0.05 and -0.10) are chosen based on typical values in bankruptcy prediction literature, where:
- Negative retained earnings indicate accumulated losses
- Negative working capital indicates liquidity problems

The prediction logic follows that:
- Companies with both negative retained earnings and negative working capital are predicted as bankrupt (1)
- Companies with either positive retained earnings or positive working capital are predicted as non-bankrupt (0)