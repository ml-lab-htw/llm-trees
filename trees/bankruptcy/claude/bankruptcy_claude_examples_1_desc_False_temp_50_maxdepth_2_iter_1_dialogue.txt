


I'll create a decision tree function based on the bankruptcy prediction model I proposed earlier, using the exact feature names you provided and the correct target encoding.

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= -0.15
    nodes[1] = X["WC/TA"] <= -0.10
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list 'nodes' to store the boolean results of the decision nodes
3. Evaluates two conditions:
   - First node: Is Retained Earnings/Total Assets <= -0.15?
   - Second node: Is Working Capital/Total Assets <= -0.10?
4. Returns:
   - prediction: 1 for Bankrupt, 0 for Not Bankrupt
   - nodes: list of boolean values representing the conditions at each node

The thresholds (-0.15 and -0.10) are chosen based on typical values in bankruptcy prediction literature, where negative values in these ratios often indicate financial distress.