


Based on the financial features and their typical ranges, I'll create a decision tree function that predicts bankruptcy (1) or non-bankruptcy (0) and returns the node conditions:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["WC/TA"] <= 0.1    # Working Capital ratio threshold
    nodes[1] = X["RE/TA"] <= -0.15  # Retained Earnings ratio threshold
    
    if nodes[0]:  # If Working Capital ratio is low (poor liquidity)
        if nodes[1]:  # If Retained Earnings ratio is very negative
            prediction = 1  # Predict bankruptcy
        else:
            prediction = 0  # Predict non-bankruptcy
    else:  # If Working Capital ratio is healthy
        prediction = 0  # Predict non-bankruptcy

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list to store the truth values of the two decision nodes
3. Evaluates whether:
   - Working Capital/Total Assets is <= 0.1 (indicating poor liquidity)
   - Retained Earnings/Total Assets is <= -0.15 (indicating significant accumulated losses)
4. Makes predictions based on these conditions
5. Returns both the prediction (0 for non-bankruptcy, 1 for bankruptcy) and the list of node conditions

The thresholds (0.1 and -0.15) are based on typical financial ratio benchmarks where:
- WC/TA <= 0.1 indicates potential liquidity problems
- RE/TA <= -0.15 indicates significant accumulated losses