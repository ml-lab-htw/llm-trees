


Here's the Python function that implements the bankruptcy prediction decision tree I described earlier, using the exact feature names provided and appropriate threshold values:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= -0.05  # First split on Retained Earnings ratio
    nodes[1] = X["WC/TA"] <= -0.10  # Second split on Working Capital ratio
    
    if nodes[0]:  # Poor retained earnings
        if nodes[1]:  # Poor working capital
            prediction = 1  # Bankrupt
        else:  # Better working capital
            prediction = 0  # Not bankrupt
    else:  # Better retained earnings
        prediction = 0  # Not bankrupt

    return prediction, nodes
```

The threshold values I chose (-0.05 for RE/TA and -0.10 for WC/TA) are reasonable values based on financial literature and typical bankruptcy prediction models:
- RE/TA <= -0.05 indicates significant accumulated losses relative to assets
- WC/TA <= -0.10 indicates serious liquidity problems

The function takes a dictionary X with the feature names as keys and returns:
1. A prediction (0 = not bankrupt, 1 = bankrupt)
2. A list of boolean values representing the conditions at each node