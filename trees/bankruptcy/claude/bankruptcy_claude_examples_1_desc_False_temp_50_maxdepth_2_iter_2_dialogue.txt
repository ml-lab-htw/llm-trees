


I'll create a decision tree function based on the previously defined tree structure, using the exact feature keys and target encoding you provided:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= 0.10
    nodes[1] = X["WC/TA"] <= -0.05
    
    if nodes[0]:  # RE/TA <= 0.10
        if nodes[1]:  # WC/TA <= -0.05
            prediction = 1  # Bankrupt
        else:  # WC/TA > -0.05
            prediction = 0  # Not Bankrupt
    else:  # RE/TA > 0.10
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the feature values
2. Creates a list 'nodes' to store the boolean results of the decision nodes
3. Evaluates whether RE/TA (Retained Earnings/Total Assets) is <= 0.10
4. For companies with low retained earnings (RE/TA <= 0.10), it then checks if WC/TA (Working Capital/Total Assets) is <= -0.05
5. Returns:
   - prediction: 1 for bankrupt, 0 for not bankrupt
   - nodes: list of boolean values representing the conditions at each node

The thresholds (0.10 and -0.05) are chosen based on typical financial ratios where:
- RE/TA <= 0.10 indicates low profitability retention
- WC/TA <= -0.05 indicates significant liquidity problems