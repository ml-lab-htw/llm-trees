


Based on the decision tree I created earlier, I'll format it as a Python function following your examples. I'll use the exact feature keys you provided and the binary encoding for the target variable (0 = not bankrupt, 1 = bankrupt).

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= 0.15
    nodes[1] = X["WC/TA"] <= -0.10
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list of 2 nodes (as we have a depth-2 tree)
3. First checks if RE/TA (Retained Earnings/Total Assets) is <= 0.15
4. If true, then checks if WC/TA (Working Capital/Total Assets) is <= -0.10
5. Returns both the prediction (0 = not bankrupt, 1 = bankrupt) and the list of node conditions

The thresholds (0.15 and -0.10) are chosen based on typical financial ratio benchmarks:
- RE/TA <= 0.15 indicates relatively low retained earnings
- WC/TA <= -0.10 indicates significant negative working capital