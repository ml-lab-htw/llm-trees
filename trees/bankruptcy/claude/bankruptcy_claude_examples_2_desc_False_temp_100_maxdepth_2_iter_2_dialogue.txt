


Based on your requirements, I'll convert the bankruptcy decision tree into a Python function that returns both the prediction and the node conditions. I'll use the exact feature keys you provided and the binary encoding for the target (0 = not bankrupt, 1 = bankrupt).

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= 0.10
    nodes[1] = X["WC/TA"] <= -0.05
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list 'nodes' to store the boolean results of each condition
3. Evaluates two conditions:
   - First node: Retained Earnings/Total Assets <= 0.10
   - Second node: Working Capital/Total Assets <= -0.05
4. Returns both:
   - The prediction (0 = not bankrupt, 1 = bankrupt)
   - The list of node conditions (True/False values)

The thresholds (0.10 and -0.05) are based on typical warning levels in financial analysis:
- RE/TA <= 0.10 indicates low retained earnings relative to assets
- WC/TA <= -0.05 indicates negative working capital position

Note that this follows the same structure as your example functions, with two decision nodes and returns both the prediction and the node conditions.