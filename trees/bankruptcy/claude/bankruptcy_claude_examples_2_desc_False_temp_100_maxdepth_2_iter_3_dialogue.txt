


Based on the examples and the provided features, I'll create a prediction function for the bankruptcy decision tree with depth 2. I'll use the same tree structure I proposed earlier but format it according to the specified requirements:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= -0.25
    nodes[1] = X["WC/TA"] <= -0.10
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list of 2 nodes (as it's a depth-2 tree)
3. First checks if RE/TA (Retained Earnings/Total Assets) is <= -0.25
4. For companies with low retained earnings (RE/TA <= -0.25), it then checks if WC/TA (Working Capital/Total Assets) is <= -0.10
5. Returns:
   - prediction: 1 for Bankrupt, 0 for Not Bankrupt
   - nodes: list of boolean values representing the conditions at each node

The thresholds (-0.25 and -0.10) are reasonable values based on financial literature, where negative retained earnings and negative working capital are strong indicators of financial distress.