


Based on the provided features and target encoding, here's the decision tree formatted as a Python function:

```python
def predict(X: dict):
    nodes = 4 * [None]  # Initialize list for storing node conditions
    
    # Define decision nodes with realistic thresholds
    nodes[0] = X["RE/TA"] <= -0.15
    nodes[1] = X["WC/TA"] <= -0.10
    nodes[2] = X["EBIT/TA"] <= 0.01
    nodes[3] = X["BVE/BVL"] <= 0.30
    
    # Tree logic
    if nodes[0]:  # RE/TA <= -0.15
        if nodes[1]:  # WC/TA <= -0.10
            prediction = 1  # Bankrupt
        else:  # WC/TA > -0.10
            if nodes[2]:  # EBIT/TA <= 0.01
                prediction = 1  # Bankrupt
            else:  # EBIT/TA > 0.01
                prediction = 0  # Not Bankrupt
    else:  # RE/TA > -0.15
        if nodes[3]:  # BVE/BVL <= 0.30
            if nodes[2]:  # EBIT/TA <= 0.01
                prediction = 1  # Bankrupt
            else:  # EBIT/TA > 0.01
                prediction = 0  # Not Bankrupt
        else:  # BVE/BVL > 0.30
            prediction = 0  # Not Bankrupt
    
    return prediction, nodes
```

The thresholds are chosen based on financial knowledge:
- RE/TA: -0.15 (negative retained earnings is a bad sign)
- WC/TA: -0.10 (negative working capital is concerning)
- EBIT/TA: 0.01 (very low profitability is risky)
- BVE/BVL: 0.30 (low equity to liability ratio indicates high