


Based on the decision tree I provided earlier and the specific requirements you've given, here's the Python function that implements the decision tree classifier for predicting company bankruptcy:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["RE/TA"] <= 0.0
    nodes[1] = X["WC/TA"] <= -0.1
    nodes[2] = X["EBIT/TA"] <= 0.02
    nodes[3] = X["EBIT/TA"] <= 0.05
    nodes[4] = X["BVE/BVL"] <= 0.5

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            if nodes[2]:
                prediction = 1  # Bankrupt
            else:
                prediction = 0  # Not Bankrupt
    else:
        if nodes[3]:
            if nodes[4]:
                prediction = 1  # Bankrupt
            else:
                prediction = 0  # Not Bankrupt
        else:
            prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This function takes a dictionary `X` containing the financial ratios as input. It returns a tuple containing:
1. The prediction (0 for not bankrupt, 1 for bankrupt)
2. A list of boolean values representing the truth values of the inner nodes

The thresholds used in the decision tree are based on financial intuition:
- A company with negative or zero retained earnings (RE/TA <= 0.0) is at higher risk of bankruptcy.
- Negative working capital (WC/TA <= -0.1) is a strong indicator of financial distress.
- Low profitability (EBIT/TA <= 0.02 or <= 0.05) increases bankruptcy risk.
- Low equity compared to liabilities (BVE/BVL <= 0.5) indicates high leverage and increased risk.

These thresholds can be adjusted based on more specific industry knowledge or statistical analysis of historical data.