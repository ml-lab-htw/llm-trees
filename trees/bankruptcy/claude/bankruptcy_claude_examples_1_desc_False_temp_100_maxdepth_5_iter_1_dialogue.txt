


Based on the features and their typical financial ranges, here's the decision tree function:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # First level: Check retained earnings ratio
    nodes[0] = X["RE/TA"] <= -0.15
    
    # Second level: Check working capital ratio and EBIT ratio
    nodes[1] = X["WC/TA"] <= -0.10
    nodes[2] = X["EBIT/TA"] <= 0.02
    
    # Third level: Check equity to liabilities ratio
    nodes[3] = X["BVE/BVL"] <= 0.30
    
    # Decision logic
    if nodes[0]:  # RE/TA <= -0.15
        if nodes[1]:  # WC/TA <= -0.10
            prediction = 1  # Bankrupt
        else:  # WC/TA > -0.10
            if nodes[2]:  # EBIT/TA <= 0.02
                prediction = 1  # Bankrupt
            else:  # EBIT/TA > 0.02
                prediction = 0  # Not Bankrupt
    else:  # RE/TA > -0.15
        if nodes[2]:  # EBIT/TA <= 0.02
            if nodes[3]:  # BVE/BVL <= 0.30
                prediction = 1  # Bankrupt
            else:  # BVE/BVL > 0.30
                prediction = 0  # Not Bankrupt
        else:  # EBIT/TA > 0.02
            prediction = 0  # Not Bankrupt
            
    return prediction, nodes
```

The thresholds are chosen based on common financial ratios where:
- RE/TA <= -0.15 indicates significant accumulated losses
- WC/TA <= -0.10 indicates serious liquidity problems
- EBIT/TA <= 0.02 indicates very low profitability
- BVE/BVL <= 0