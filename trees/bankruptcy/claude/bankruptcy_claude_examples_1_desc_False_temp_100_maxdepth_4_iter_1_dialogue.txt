


Based on the provided format and feature names, here's the Python function implementing the bankruptcy prediction decision tree:

```python
def predict(X: dict):
    nodes = 4 * [None]
    nodes[0] = X["RE/TA"] <= -0.15
    nodes[1] = X["WC/TA"] <= -0.10
    nodes[2] = X["EBIT/TA"] <= 0.02
    nodes[3] = X["BVE/BVL"] <= 0.30

    if nodes[0]:  # RE/TA <= -0.15
        if nodes[1]:  # WC/TA <= -0.10
            prediction = 1  # Bankrupt
        else:  # WC/TA > -0.10
            if nodes[2]:  # EBIT/TA <= 0.02
                prediction = 1  # Bankrupt
            else:  # EBIT/TA > 0.02
                prediction = 0  # Not Bankrupt
    else:  # RE/TA > -0.15
        if nodes[2]:  # EBIT/TA <= 0.02
            if nodes[3]:  # BVE/BVL <= 0.30
                prediction = 1  # Bankrupt
            else:  # BVE/BVL > 0.30
                prediction = 0  # Not Bankrupt
        else:  # EBIT/TA > 0.02
            prediction = 0  # Not Bankrupt
            
    return prediction, nodes
```

This function:
1. Takes a dictionary X with the financial ratios as input
2. Creates a list of 4 nodes representing the decision points
3. Uses realistic threshold values for financial ratios
4. Returns both the prediction (0 = not bankrupt, 1 = bankrupt) and the list of boolean values for each node
5. Uses the exact feature names provided
6. Makes decisions based on common financial indicators of bankruptcy risk

The thresholds are set to reasonable values based on financial theory:
- RE/TA: -0.15 (negative retaine