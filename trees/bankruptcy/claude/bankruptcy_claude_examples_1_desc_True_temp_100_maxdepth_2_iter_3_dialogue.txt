


Based on the provided features and target encoding, I'll create a decision tree prediction function that uses 'RE/TA' and 'WC/TA' as the main splitting features, with meaningful thresholds for bankruptcy prediction.

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= 0.10  # Primary split on Retained Earnings ratio
    nodes[1] = X["WC/TA"] <= -0.05  # Secondary split on Working Capital ratio
    
    if nodes[0]:  # Low Retained Earnings
        if nodes[1]:  # Low Working Capital
            prediction = 1  # Bankrupt
        else:  # Better Working Capital
            prediction = 0  # Not Bankrupt
    else:  # Higher Retained Earnings
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

Explanation of thresholds:
- RE/TA <= 0.10: This threshold indicates that companies with retained earnings less than 10% of their total assets might be at risk
- WC/TA <= -0.05: A negative working capital ratio (less than -5% of total assets) indicates potential liquidity problems

The function returns:
1. prediction: 0 for non-bankrupt, 1 for bankrupt
2. nodes: list of boolean values indicating whether each condition was met

The decision logic follows:
- If RE/TA is low (≤0.10) and WC/TA is very low (≤-0.05), predict bankruptcy
- If RE/TA is low but WC/TA is better (>-0.05), predict non-bankruptcy
- If RE/TA is higher (>0.10), predict non-bankruptcy regardless of other factors