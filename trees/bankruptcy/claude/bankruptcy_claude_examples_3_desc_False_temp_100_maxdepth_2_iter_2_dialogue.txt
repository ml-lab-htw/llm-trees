


Based on the provided decision tree and the feature keys, here's the Python function that implements the bankruptcy prediction model:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= -0.15
    nodes[1] = X["WC/TA"] <= -0.10
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not Bankrupt
    else:
        prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This implementation:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list of 2 nodes to store the boolean values of the conditions
3. First checks if Retained Earnings/Total Assets (RE/TA) is <= -0.15
4. For companies with low RE/TA, checks if Working Capital/Total Assets (WC/TA) is <= -0.10
5. Returns:
   - The prediction (1 for bankrupt, 0 for not bankrupt)
   - The list of boolean values for the decision nodes

The thresholds (-0.15 and -0.10) are based on financial distress indicators where negative values in these ratios often signal financial trouble. Companies with both poor retained earnings and negative working capital are classified as bankrupt (1), while others are classified as not bankrupt (0).