


I'll create a Python function for the bankruptcy prediction decision tree based on the provided format and feature names. Here's the implementation:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["RE/TA"] <= -0.15
    nodes[1] = X["WC/TA"] <= -0.10
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Non-bankrupt
    else:
        prediction = 0  # Non-bankrupt

    return prediction, nodes
```

This implementation:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list 'nodes' to store the boolean results of the decision conditions
3. Evaluates whether:
   - RE/TA (Retained Earnings/Total Assets) is <= -0.15
   - WC/TA (Working Capital/Total Assets) is <= -0.10
4. Returns:
   - prediction: 1 for bankrupt, 0 for non-bankrupt
   - nodes: list of boolean values representing the conditions at each node

The threshold values (-0.15 and -0.10) are based on typical values in financial distress prediction, where:
- Strong negative retained earnings (RE/TA <= -0.15) indicates accumulated losses
- Negative working capital (WC/TA <= -0.10) indicates liquidity problems