


Based on the provided feature names and target encoding, here's the Python function implementing the bankruptcy prediction decision tree:

```python
def predict(X: dict):
    nodes = 4 * [None]
    nodes[0] = X["RE/TA"] <= 0.05
    nodes[1] = X["WC/TA"] <= -0.10
    nodes[2] = X["EBIT/TA"] <= 0.01
    nodes[3] = X["BVE/BVL"] <= 0.30
    
    if nodes[0]:  # RE/TA <= 0.05
        if nodes[1]:  # WC/TA <= -0.10
            prediction = 1  # Bankrupt
        else:  # WC/TA > -0.10
            if nodes[2]:  # EBIT/TA <= 0.01
                prediction = 1  # Bankrupt
            else:  # EBIT/TA > 0.01
                prediction = 0  # Not Bankrupt
    else:  # RE/TA > 0.05
        if nodes[3]:  # BVE/BVL <= 0.30
            prediction = 1  # Bankrupt
        else:  # BVE/BVL > 0.30
            prediction = 0  # Not Bankrupt

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the financial ratios as input
2. Creates a list to store the truth values of the inner nodes
3. Evaluates each condition and stores the result (True/False) in the nodes list
4. Uses these conditions to navigate through the decision tree
5. Returns both the prediction (0 = not bankrupt, 1 = bankrupt) and the list of node truth values

The thresholds are chosen based on typical financial ratio values:
- RE/TA: 0.05 (5% retained earnings to total assets)
- WC/TA: -0.10 (-10% working capital to total assets)
- EBIT/TA: 0.01 (1% earnings to total assets)