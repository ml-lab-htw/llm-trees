


Based on the provided features and the bankruptcy classification task (0 = not bankrupt, 1 = bankrupt), I'll create a decision tree prediction function that uses the exact feature keys and returns both the prediction and the node conditions:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["RE/TA"] <= 0.10
    nodes[1] = X["WC/TA"] <= -0.05
    nodes[2] = X["EBIT/TA"] <= 0.03
    
    if nodes[0]:  # Low retained earnings
        if nodes[1]:  # Negative working capital
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not bankrupt
    else:  # Higher retained earnings
        if nodes[2]:  # Low EBIT
            prediction = 1  # Bankrupt
        else:
            prediction = 0  # Not bankrupt
    
    return prediction, nodes
```

This implementation:
- Uses the exact feature keys as provided
- Has sensible thresholds based on financial ratios
- Returns both the prediction (0 = not bankrupt, 1 = bankrupt) and the list of node conditions
- Has a maximum depth of 3
- Uses the most important financial ratios for bankruptcy prediction
- Makes logical business sense where companies with low retained earnings and negative working capital, or low profitability despite good retained earnings, are classified as bankrupt

The thresholds are set based on common financial benchmarks:
- RE/TA: 0.10 (10% threshold for retained earnings)
- WC/TA: -0.05 (-5% threshold for working capital)
- EBIT/TA: 0.03 (3% threshold for operating profit)