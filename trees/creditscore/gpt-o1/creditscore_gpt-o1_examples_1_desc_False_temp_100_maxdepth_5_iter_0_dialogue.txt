


```python
def predict(X: dict):
    nodes = [None] * 6  # Initialize a list to store truth values of the nodes
    
    # Node 0: Derogatory.reports > 0
    nodes[0] = X['Derogatory.reports'] > 0
    if nodes[0]:
        # If the applicant has more than 0 derogatory reports, Reject
        prediction = 0
    else:
        # Node 1: Income.per.dependent <= 4.0
        nodes[1] = X['Income.per.dependent'] <= 4.0
        if nodes[1]:
            # If income per dependent is less than or equal to 4.0, Reject
            prediction = 0
        else:
            # Node 2: Own.home == 1 (Yes)
            nodes[2] = X['Own.home'] == 1
            if nodes[2]:
                # If owning a home, Accept
                prediction = 1
            else:
                # Node 3: Self.employed == 1 (Yes)
                nodes[3] = X['Self.employed'] == 1
                if nodes[3]:
                    # If self-employed, Accept
                    prediction = 1
                else:
                    # Node 4: Age > 30
                    nodes[4] = X['Age'] > 30
                    if nodes[4]:
                        # If age is greater than 30, Accept
                        prediction = 1
                    else:
                        # Node 5: Monthly.credit.card.exp <= 1000
                        nodes[5] = X['Monthly.credit.card.exp'] <= 1000
                        if nodes[5]:
                            # If monthly credit card expenses are less than or equal to $1000, Accept
                            prediction = 1
                        else:
                            # Otherwise, Reject
                            prediction = 0
    # Convert truth values to integers (1 for True, 0 for False, None remains None)
    nodes = [int(node) if node is not None else None for node in nodes]
    
    return prediction, nodes
```

**Explanation:**

- **Initialize nodes:** We start by initializing a list `nodes` with 6 elements (since we have a maximum depth of 5, resulting in 6 nodes including the root).
  
- **Node 0:** Check if `'Derogatory.reports' > 0`.
  - If **True**, the applicant has derogatory reports, so we **Reject** (prediction = 0).
  - If **False**, proceed to **Node 1**.

- **Node 1:** Check if `'Income.per.dependent' <= 4.0`.
  - If **True**, the income per dependent is low, so we **Reject**.
  - If **False**, proceed to **Node 2**.

- **Node 2:** Check if `'Own.home' == 1` (owns a home).
  - If **True**, owning a home is a positive indicator, so we **Accept** (prediction = 1).
  - If **False**, proceed to **Node 3**.

- **Node 3:** Check if `'Self.employed' == 1` (self-employed).
  - If **True**, being self-employed is a positive indicator, so we **Accept**.
  - If **False**, proceed to **Node 4**.

- **Node 4:** Check if `'Age' > 30`.
  - If **True**, being older than 30 is a positive indicator, so we **Accept**.
  - If **False**, proceed to **Node 5**.

- **Node 5:** Check if `'Monthly.credit.card.exp' <= 1000`.
  - If **True**, lower expenses are positive, so we **Accept**.
  - If **False**, expenses are high, so we **Reject**.

- **Convert Truth Values:** Before returning, we convert the boolean values in `nodes` to integers (`1` for `True`, `0` for `False`). Nodes that were not evaluated remain `None`.

- **Return:** The function returns the `prediction` (0 = Reject, 1 = Accept) and the list of `nodes`.

**Example Usage:**

```python
# Example applicant data
applicant = {
    'Age': 28,
    'Income.per.dependent': 5.0,
    'Monthly.credit.card.exp': 900,
    'Own.home': 0,
    'Self.employed': 0,
    'Derogatory.reports': 0
}

# Get prediction and nodes
prediction, nodes = predict(applicant)

print(f"Prediction: {'Accept' if prediction == 1 else 'Reject'}")
print(f"Nodes: {nodes}")
```

**Output:**

```
Prediction: Accept
Nodes: [0, 0, 0, 0, 0, 1]
```

In this example:

- **Node 0:** `Derogatory.reports > 0` → `0 > 0` → `False` (nodes[0] = 0)
- **Node 1:** `Income.per.dependent <= 4.0` → `5.0 <= 4.0` → `False` (nodes[1] = 0)
- **Node 2:** `Own.home == 1` → `0 == 1` → `False` (nodes[2] = 0)
- **Node 3:** `Self.employed == 1` → `0 == 1` → `False` (nodes[3] = 0)
- **Node 4:** `Age > 30` → `28 > 30` → `False` (nodes[4] = 0)
- **Node 5:** `Monthly.credit.card.exp <= 1000` → `900 <= 1000` → `True` (nodes[5] = 1)

Since the last condition is satisfied, the application is **Accepted**.

**Notes:**

- **Thresholds:** The thresholds in the conditions are based on meaningful values provided in the dataset description.
  - **Income per dependent ≤ 4.0:** Applicants with income per dependent less than or equal to 4.0 are more likely to be rejected due to lower financial stability.
  - **Age > 30:** Applicants older than 30 may have more financial stability.
  - **Monthly credit card expenses ≤ $1000:** Lower expenses indicate better financial management.

- **Feature Encoding:** Make sure to encode the features correctly:
  - `'Own.home'` and `'Self.employed'` are binary encoded (`1` = Yes, `0` = No).
  - `'Derogatory.reports'` is a numerical value (0, 1, 2, etc.).

- **Function Flexibility:** The function can handle any applicant data provided in the correct format, using the exact feature keys as specified.

**Remember:** Always ensure the input dictionary `X` contains all the required keys with correctly formatted values to avoid any errors when evaluating the conditions.