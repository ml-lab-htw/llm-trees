


```python
def predict(X: dict):
    nodes = [None] * 4  # Initialize list for internal nodes

    # Node 0: Derogatory.reports > 2
    nodes[0] = int(X["Derogatory.reports"] > 2)
    if nodes[0]:
        # If number of derogatory reports > 2 -> Deny
        prediction = 0  # Deny
    else:
        # Node 1: Income.per.dependent <= 2.5
        nodes[1] = int(X["Income.per.dependent"] <= 2.5)
        if nodes[1]:
            # If income per dependent <= 2.5 -> Deny
            prediction = 0  # Deny
        else:
            # Node 2: Own.home == 1
            nodes[2] = int(X["Own.home"] == 1)
            if nodes[2]:
                # If owning a home == yes -> Accept
                prediction = 1  # Accept
            else:
                # Node 3: Monthly.credit.card.exp <= 500
                nodes[3] = int(X["Monthly.credit.card.exp"] <= 500)
                if nodes[3]:
                    # If monthly credit card expenses <= $500 -> Accept
                    prediction = 1  # Accept
                else:
                    # Else -> Deny
                    prediction = 0  # Deny

    # Replace None with 0 for nodes not evaluated
    nodes = [n if n is not None else 0 for n in nodes]

    return prediction, nodes
```

**Explanation:**

- **Feature Keys:** The exact feature keys provided are used in the function.

- **Nodes List:** A list `nodes` is created to store the truth values of the inner nodes. If a node condition is not evaluated (because the tree path didn't reach it), it remains `None` and is converted to `0` at the end.

- **Decision Logic:** The decision tree is translated into nested `if` statements following the structure:

    1. **Node 0:** Checks if `"Derogatory.reports" > 2`. If true (`nodes[0] = 1`), the application is denied (`prediction = 0`).
    2. **Node 1:** If `"Derogatory.reports" <= 2` (`nodes[0] = 0`), checks if `"Income.per.dependent" <= 2.5`. If true (`nodes[1] = 1`), the application is denied (`prediction = 0`).
    3. **Node 2:** If `"Income.per.dependent" > 2.5` (`nodes[1] = 0`), checks if `"Own.home" == 1` (owns a home). If true (`nodes[2] = 1`), the application is accepted (`prediction = 1`).
    4. **Node 3:** If `"Own.home" != 1` (`nodes[2] = 0`), checks if `"Monthly.credit.card.exp" <= 500`. If true (`nodes[3] = 1`), the application is accepted (`prediction = 1`); else denied (`prediction = 0`).

- **Thresholds:** Meaningful threshold values are used based on the given ranges and logical decision-making in the tree.

- **Return Value:** The function returns:

    - `prediction`: The final prediction (`0` for Deny, `1` for Accept).
    - `nodes`: A list of `0`s and `1`s representing the truth values of the inner nodes.

**Example Usage:**

```python
# Example input
X = {
    "Age": 30,
    "Income.per.dependent": 3.0,
    "Monthly.credit.card.exp": 400,
    "Own.home": 0,
    "Self.employed": 0,
    "Derogatory.reports": 1
}

# Make prediction
prediction, nodes = predict(X)

print(f"Prediction: {'Accept' if prediction == 1 else 'Deny'}")
print(f"Nodes: {nodes}")
```

This would output:

```
Prediction: Accept
Nodes: [0, 0, 0, 1]
```

- **Interpretation:**
    - `nodes[0] = 0`: `Derogatory.reports` is not greater than 2.
    - `nodes[1] = 0`: `Income.per.dependent` is not less than or equal to 2.5.
    - `nodes[2] = 0`: `Own.home` is not equal to 1 (does not own a home).
    - `nodes[3] = 1`: `Monthly.credit.card.exp` is less than or equal to 500.

**Note:** Make sure to replace the placeholders in the example with actual values from your dataset when using the function.