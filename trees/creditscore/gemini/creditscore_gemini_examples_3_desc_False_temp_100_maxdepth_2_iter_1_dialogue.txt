


```python
def predict(X: dict):
    nodes = 3 * [None] 
    nodes[0] = X['Derogatory.reports'] <= 1  
    nodes[1] = X['Income.per.dependent'] > 7 
    nodes[2] = X['Monthly.credit.card.exp'] <= 3000 

    if nodes[0]: 
        if nodes[1]:
            prediction = 1  
        else:
            if nodes[2]:
                prediction = 1 
            else:
                prediction = 0 
    else:
        prediction = 0 

    return prediction, nodes
```

**Explanation:**

1. **`predict(X: dict)`:**  The function takes a dictionary `X` as input, where the keys are the feature names (exactly as specified) and the values are the feature values for a single instance.
2. **`nodes = 3 * [None]`:** Initializes a list called `nodes` with three `None` values. This list will store the truth values (True/False) of each inner node condition. Since we have a depth of 2, there are at most 3 decision nodes in the tree. 
3. **`nodes[0] = X['Derogatory.reports'] <= 1`:** Evaluates the first split condition (root node).  If the number of derogatory reports is less than or equal to 1,  `nodes[0]` is set to `True`; otherwise, it's `False`.
4. **`nodes[1] = X['Income.per.dependent'] > 7`:**  This condition is evaluated only if `nodes[0]` is `True`. It checks if the 'Income.per.dependent' is greater than 7.
5. **`nodes[2] = X['Monthly.credit.card.exp'] <= 3000`:** This condition is evaluated only if `nodes[0]` is `True` and  `nodes[1]` is `False`. It checks if 'Monthly.credit.card.exp' is less than or equal to $3000.
6. **`if/else` blocks:** These blocks determine the prediction (0 or 1) based on the truth values in the `nodes` list, following the decision tree logic.
7. **`return prediction, nodes`:** The function returns the predicted class (0 or 1) and the list of truth values for the inner nodes.

**Example Usage:**

```python
instance = {'Age': 35, 
            'Income.per.dependent': 6, 
            'Monthly.credit.card.exp': 2500, 
            'Own.home': 1, 
            'Self.employed': 0, 
            'Derogatory.reports': 0} 

prediction, nodes = predict(instance)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")
```

This will output the prediction (0 for not accepted, 1 for accepted) and the truth values for each node in the decision tree, allowing you to understand the decision path for the given instance. 
