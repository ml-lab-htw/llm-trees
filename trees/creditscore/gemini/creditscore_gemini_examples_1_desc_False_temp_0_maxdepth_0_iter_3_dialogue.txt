


```python
def predict(X: dict):
    """
    Predicts credit application acceptance based on input features.

    Args:
        X (dict): A dictionary of input features.

    Returns:
        tuple: A tuple containing the prediction (0 or 1) and a list of 
               truth values for the inner nodes.
    """
    nodes = 4 * [None]  # Initialize list for truth values of inner nodes

    # Decision tree logic (following the structure outlined previously)
    nodes[0] = X["Derogatory.reports"] > 1
    if nodes[0]:
        prediction = 0  # Rejected
    else:
        nodes[1] = X["Income.per.dependent"] < 3
        if nodes[1]:
            nodes[2] = X["Own.home"] == 0  # Not owning a home
            if nodes[2]:
                prediction = 0 # Rejected
            else:
                nodes[3] = X["Monthly.credit.card.exp"] > (0.4 * X["Income.per.dependent"] * 1000)
                if nodes[3]:
                    prediction = 0 # Rejected
                else:
                    prediction = 1 # Accepted
        else: # Income.per.dependent >= 3
            nodes[3] = X["Monthly.credit.card.exp"] > (0.5 * X["Income.per.dependent"] * 1000)
            if nodes[3]:
                prediction = 0  # Rejected
            else:
                prediction = 1 # Accepted

    # Extend the nodes list to length 4 if it's shorter. This handles
    # cases where not all nodes are evaluated (e.g., if the first 
    # condition is True, the rest are skipped).
    while len(nodes) < 4:
        nodes.append(None)

    return prediction, nodes


# Example usage (replace with your actual feature values)
example_features = {
    'Age': 30,
    'Income.per.dependent': 4,
    'Monthly.credit.card.exp': 1500,
    'Own.home': 1,
    'Self.employed': 0,
    'Derogatory.reports': 0,
}

prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")



```


**Key Improvements:**

* **Correct Feature Names:** Uses the exact feature names provided.
* **Clear Thresholds:**  Includes specific numerical thresholds for income-to-debt ratio calculations.
* **Node Truth Values:**  Returns the `nodes` list, indicating the truth value of each condition checked.  `None` indicates a node that wasn't evaluated.
* **Handling Unevaluated Nodes:** Ensures that the `nodes` list always has a length of 4, even if some branches of the tree aren't evaluated.
* **Docstring:**  Includes a docstring explaining the function's purpose, arguments, and return value.
* **Example Usage:** Demonstrates how to use the function with sample data.



This improved function is more robust, accurate, and easier to understand and use. Remember that the specific thresholds and decision logic are illustrative; a real-world model would be trained on actual data.