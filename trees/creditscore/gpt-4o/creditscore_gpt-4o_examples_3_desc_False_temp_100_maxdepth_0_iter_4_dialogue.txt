


Given the feature details and your examples, let's create a Python function that evaluates a decision tree to predict whether a credit application is accepted or not based on the provided features. We'll structure the function to return both the prediction and the truth values of the decision nodes.

Here is the Python function following the specified format:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["Income.per.dependent"] > 5.0
    nodes[1] = X["Derogatory.reports"] <= 1
    nodes[2] = X["Monthly.credit.card.exp"] <= 500
    nodes[3] = X["Own.home"] == 1
    nodes[4] = X["Age"] <= 40

    if nodes[0]:
        if nodes[1]:
            if nodes[2]:
                if nodes[3]:
                    prediction = 1  # accepted
                else:
                    prediction = 0  # declined
            else:
                prediction = 0  # declined
        else:
            prediction = 0  # declined
    else:
        if X["Self.employed"] == 1:
            if nodes[4]:
                prediction = 1  # accepted
            else:
                prediction = 0  # declined
        else:
            prediction = 0  # declined

    return prediction, nodes

# Example usage:
features = {
    "Age": 30,
    "Income.per.dependent": 6.0,
    "Monthly.credit.card.exp": 400,
    "Own.home": 1,
    "Self.employed": 0,
    "Derogatory.reports": 0
}

print(predict(features))
```

### Explanation:
1. **Nodes Initialization**:
    - `nodes[0]`: Checks if `Income.per.dependent` is greater than 5.0.
    - `nodes[1]`: Checks if the `Derogatory.reports` is less than or equal to 1.
    - `nodes[2]`: Checks if `Monthly.credit.card.exp` is less than or equal to $500.
    - `nodes[3]`: Checks if the user owns a home (`Own.home` == 1).
    - `nodes[4]`: Checks if the `Age` is less than or equal to 40.

2. **Decision Flow**:
    - If `Income.per.dependent` > 5.0:
        - Check `Derogatory.reports` <= 1:
            - Check `Monthly.credit.card.exp` <= 500:
                - Owns a home:
                    - Prediction: Accepted
                - Does not own a home:
                    - Prediction: Declined
            - `Monthly.credit.card.exp` > 500:
                - Prediction: Declined
        - `Derogatory.reports` > 1:
            - Prediction: Declined
    - If `Income.per.dependent` <= 5.0:
        - If Self-employed:
            - `Age` <= 40:
                - Prediction: Accepted
            - `Age` > 40:
                - Prediction: Declined
        - If not self-employed:
            - Prediction: Declined

### Output:
When you pass the provided `features` dictionary to the `predict` function, it will return the prediction result (0 or 1) and the list of truth values for the inner nodes. For example, the output for the given features should be:

```python
(1, [True, True, True, True, True])
```

Note: Ensure to adjust the threshold values and logical conditions based on actual data and domain knowledge for more accurate predictions.