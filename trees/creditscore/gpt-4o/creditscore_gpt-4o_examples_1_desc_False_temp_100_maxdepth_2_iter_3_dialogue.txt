


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node 1: Is "Income.per.dependent" <= 4.5?
    nodes[0] = X["Income.per.dependent"] <= 4.5
    
    if nodes[0]:
        # Node 2: Is "Derogatory.reports" <= 2?
        nodes[1] = X["Derogatory.reports"] <= 2
        
        if nodes[1]:
            # If income <= 4.5 and derogatory reports <= 2, accept application
            prediction = 1
        else:
            # If income <= 4.5 and derogatory reports > 2, decline application
            prediction = 0
    else:
        # Node 2: Is "Own.home" == 1? (1 = yes, 0 = no)
        nodes[1] = X["Own.home"] == 1
        
        if nodes[1]:
            # If income > 4.5 and owns a home, accept application
            prediction = 1
        else:
            # If income > 4.5 and does not own a home, decline application
            prediction = 0

    return prediction, nodes
```

### Explanation of the function:
- The function `predict` takes in a dictionary `X` that contains the feature values for an individual applicant.
- The list `nodes` stores the truth values (1 or 0) for the conditions at each decision node in the tree.
- The first node (index 0) checks if the applicant's "Income.per.dependent" is less than or equal to 4.5.
- Depending on the result of the first condition, the second node (index 1) checks either the number of "Derogatory.reports" or whether the applicant "Own.home" is true (i.e., owns a home).
- The function returns both the `prediction` (1 = accepted, 0 = declined) and the list of truth values for the inner nodes.

### Example usage:
```python
X = {
    "Age": 35,
    "Income.per.dependent": 3.0,
    "Monthly.credit.card.exp": 500,
    "Own.home": 1,
    "Self.employed": 0,
    "Derogatory.reports": 1
}

prediction, nodes = predict(X)
print("Prediction:", prediction)
print("Nodes:", nodes)
```
