Below is the Python function implementing a decision tree of depth 3 for the new dataset, based on the features you provided:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Root node: check the number of derogatory reports
    nodes[0] = X['Derogatory.reports'] <= 1
    
    if nodes[0]:
        # Second level: check if the person owns a home
        nodes[1] = X['Own.home'] == 1
        
        if nodes[1]:
            # Third level: check monthly credit card expenses
            nodes[2] = X['Monthly.credit.card.exp'] <= 3000
            if nodes[2]:
                prediction = 1  # Likely to be accepted
            else:
                prediction = 0  # Likely to be rejected
        else:
            # Third level: check income per dependent
            nodes[2] = X['Income.per.dependent'] >= 5
            if nodes[2]:
                prediction = 1  # Likely to be accepted
            else:
                prediction = 0  # Likely to be rejected
    else:
        # Second level: check self-employment status
        nodes[1] = X['Self.employed'] == 1
        
        if nodes[1]:
            # Third level: check age
            nodes[2] = X['Age'] >= 40
            if nodes[2]:
                prediction = 1  # Likely to be accepted
            else:
                prediction = 0  # Likely to be rejected
        else:
            # Third level: check income per dependent
            nodes[2] = X['Income.per.dependent'] >= 6
            if nodes[2]:
                prediction = 1  # Likely to be accepted
            else:
                prediction = 0  # Likely to be rejected
    
    return prediction, nodes
```

### Explanation:

1. **Root Node (Depth 1)**: 
   - The decision tree first checks the number of derogatory reports (`Derogatory.reports <= 1`). This is a significant factor for credit approval decisions, as derogatory reports indicate unfavorable credit history.

2. **Second Level (Depth 2)**:
   - If the person has fewer than or equal to 1 derogatory report, the tree checks if they own a home (`Own.home == 1`), which is a sign of financial stability.
   - If the person has more derogatory reports, the tree checks if they are self-employed (`Self.employed == 1`), as being self-employed may affect credit applications differently.

3. **Third Level (Depth 3)**:
   - If the person owns a home, the tree further checks their monthly credit card expenses (`Monthly.credit.card.exp <= 3000`), as higher expenses may indicate financial strain.
   - If the person does not own a home, the tree checks their income per dependent (`Income.per.dependent >= 5`), as a higher income per dependent might indicate better financial capability.
   - If the person has more than 1 derogatory report but is self-employed, the tree checks if they are older than 40 years (`Age >= 40`), as older individuals may have more stable finances.
   - If the person is not self-employed, the tree checks their income per dependent (`Income.per.dependent >= 6`) for a final decision.

### How to Use:
- You can call this function by passing a dictionary representing a new applicant's features (e.g., age, income per dependent, etc.).
- The function will return a prediction (0 = rejected, 1 = accepted) and a list representing the truth values of the inner nodes (1 = condition satisfied, 0 = condition not satisfied).

### Example:
```python
applicant = {
    'Age': 35,
    'Income.per.dependent': 4.5,
    'Monthly.credit.card.exp': 2500,
    'Own.home': 1,
    'Self.employed': 0,
    'Derogatory.reports': 0
}

prediction, nodes = predict(applicant)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

This will output the prediction for the applicant and the truth values of the inner nodes.