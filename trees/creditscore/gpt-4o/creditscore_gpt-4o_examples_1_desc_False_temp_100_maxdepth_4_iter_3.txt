Here is a decision tree with a maximum depth of 4 based on the Features and target variable you provided:

Features:
- **Age**: age (years)
- **Income.per.dependent**: income per dependent (1.5 to 10)
- **Monthly.credit.card.exp**: monthly credit card expenses ($)
- **Own.home**: owning a home (1 = yes, 0 = no)
- **Self.employed**: self employed (1 = yes, 0 = no)
- **Derogatory.reports**: number of derogatory reports (0, 1, 2, 3, 4, 7)

Target variable:
- **target**: application for credit is accepted or not (0 = no, 1 = yes)

### Decision Tree Function:
```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Node 0: Is the income per dependent greater than 4.5?
    nodes[0] = X["Income.per.dependent"] > 4.5
    
    # Node 1: If income per dependent <= 4.5, check if monthly credit card expenses > 200
    if not nodes[0]:
        nodes[1] = X["Monthly.credit.card.exp"] > 200
    
    # Node 2: If income per dependent > 4.5, check if derogatory reports <= 1
    if nodes[0]:
        nodes[2] = X["Derogatory.reports"] <= 1
    
    # Node 3: If monthly credit card expenses <= 200, check if they own a home
    if not nodes[1]:
        nodes[3] = X["Own.home"] == 1

    # Decision logic based on nodes
    if nodes[0]:
        if nodes[2]:
            prediction = 1  # Application accepted
        else:
            prediction = 0  # Application denied
    else:
        if nodes[1]:
            prediction = 0  # Application denied
        else:
            if nodes[3]:
                prediction = 1  # Application accepted
            else:
                prediction = 0  # Application denied

    return prediction, nodes
```

### Explanation of the Decision Tree:
1. **Node 0**: The tree first checks if the **Income per dependent** is greater than 4.5.
   - If `Income.per.dependent > 4.5`, it moves to **Node 2**.
   - If `Income.per.dependent <= 4.5`, it moves to **Node 1**.
   
2. **Node 1**: If **Income per dependent** is less than or equal to 4.5, it checks if the **Monthly credit card expenses** are greater than 200.
   - If `Monthly.credit.card.exp > 200`, the prediction is 0 (application denied).
   - If `Monthly.credit.card.exp <= 200`, it moves to **Node 3**.
   
3. **Node 2**: If **Income per dependent** is greater than 4.5, the tree checks if the number of **Derogatory reports** is less than or equal to 1.
   - If `Derogatory.reports <= 1`, the prediction is 1 (application accepted).
   - If `Derogatory.reports > 1`, the prediction is 0 (application denied).
   
4. **Node 3**: If **Monthly credit card expenses** are less than or equal to 200, it checks if the applicant **Owns a home**.
   - If `Own.home == 1`, the prediction is 1 (application accepted).
   - If `Own.home == 0`, the prediction is 0 (application denied).

### Example Usage:
```python
X = {
    "Age": 35,
    "Income.per.dependent": 5.2,
    "Monthly.credit.card.exp": 150,
    "Own.home": 1,
    "Self.employed": 0,
    "Derogatory.reports": 0,
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

This function will return the prediction (either 0 or 1) and a list of boolean values representing which conditions were satisfied at each node of the decision tree.
