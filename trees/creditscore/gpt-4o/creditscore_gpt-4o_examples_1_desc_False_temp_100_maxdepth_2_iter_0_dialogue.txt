


```python
def predict(X: dict):
    """
    Decision tree function to classify whether an application for credit is accepted (1) or not accepted (0).
    
    Features:
        X: dict, with the following keys:
            - "Age": int, age in years
            - "Income.per.dependent": float, income per dependent (range: 1.5 to 10)
            - "Monthly.credit.card.exp": float, monthly credit card expenses in dollars
            - "Own.home": int, owning a home (1 = yes, 0 = no)
            - "Self.employed": int, self employed (1 = yes, 0 = no)
            - "Derogatory.reports": int, number of derogatory reports (0, 1, 2, 3, 4, 7)
            
    Returns:
        prediction: int, whether credit application is accepted (1) or not (0)
        nodes: list of truth values of the inner nodes (1 if the condition is true, 0 otherwise)
    """
    nodes = 2 * [None]
    
    # Node 0: Check Monthly.credit.card.exp <= 500
    nodes[0] = X["Monthly.credit.card.exp"] <= 500
    
    if nodes[0]:  # Monthly.credit.card.exp <= 500
        # Node 1: Check Derogatory.reports <= 1
        nodes[1] = X["Derogatory.reports"] <= 1
        
        if nodes[1]:  # Derogatory.reports <= 1
            prediction = 1  # Accepted
        else:  # Derogatory.reports > 1
            prediction = 0  # Not Accepted
    else:  # Monthly.credit.card.exp > 500
        # Node 1: Check Income.per.dependent <= 3.5
        nodes[1] = X["Income.per.dependent"] <= 3.5
        
        if nodes[1]:  # Income.per.dependent <= 3.5
            prediction = 0  # Not Accepted
        else:  # Income.per.dependent > 3.5
            prediction = 1  # Accepted

    return prediction, nodes
```

### Example Usage:
```python
# Test input
data = {
    "Age": 30,
    "Income.per.dependent": 4.0,
    "Monthly.credit.card.exp": 400,
    "Own.home": 1,
    "Self.employed": 0,
    "Derogatory.reports": 1
}

# Call the function
result, truth_values = predict(data)

# Print results
print("Prediction:", result)  # 1 (Accepted)
print("Truth values at nodes:", truth_values)  # [True, True]
``` 

In this function:
1. The first node checks whether **Monthly.credit.card.exp** is less than or equal to 500 (low spending vs. high spending behavior).
2. If the first condition is satisfied, the second node checks whether **Derogatory.reports** is less than or equal to 1 (indicating a strong credit history).
3. If the first condition is not satisfied, the second node checks whether **Income.per.dependent** is less than or equal to 3.5 (low income versus high income per dependent).

This function accurately represents a decision tree with a maximum depth of 2.