


```python
def predict(X: dict):
    """
    Predicts the winner of a boxing round based on judge scores.

    Args:
        X (dict): A dictionary of features: 'Judge', 'Official', 'Round'.

    Returns:
        tuple: (prediction, nodes) where prediction is 1 for Lewis, 0 for Holyfield,
               and nodes is a list of boolean truth values for the decision nodes.
    """
    nodes = 3 * [None]

    # Check if the judge is official
    nodes[0] = X['Official'] == 1

    if nodes[0]:
        # If official, rely on E. Williams (Judge 0) as a representative official judge
        nodes[1] = X['Judge'] == 0  # Assuming E. Williams is highly weighted
        if nodes[1] and X['Round'] <=6 :# Placeholder. This value should be optimized according to data
            prediction = 1 #Lewis wins when round <= 6 and the official is E. Williams
        elif nodes[1] and X['Round'] >6:
            prediction = 0 #Holyfield wins when round >6 and the official is E. Williams

        elif not nodes[1] and X['Round'] <=6 :
            prediction = 1
        elif not nodes[1] and X['Round'] > 6:
            prediction = 0
        else: 
            prediction = 0  # Default to Holyfield if tie or missing data (needs improvement)

    else:  # Not an official judge
        # Placeholder for majority vote among non-official judges.
        # In real application, this would require iterating through all judge scores.
        # Here, we simplify using a hypothetical judge (L. O'Connell - Judge 1)
        nodes[2] = X['Judge'] == 1 and X['Round'] <=6 # Example: L. O'Connell predicts Lewis when round <=6

        if nodes[2]:
            prediction = 1  # Lewis
        else:
            prediction = 0 #Holyfield wins when round >6 and L.O'Connell predicts Lewis

    return prediction, nodes




```


**Explanation and Improvements:**

* **Official Judge Handling:** The code now checks the `Official` status and uses a representative official judge (E. Williams in this case, represented by `Judge == 0`). In a real application, you would need to determine which official judges to use or how to combine their scores.
* **Non-Official Judge Placeholder:** The code includes a placeholder for determining the majority vote among non-official judges.  This is simplified to a single judge for demonstration purposes.  You'll need to replace this with actual logic to count votes among all non-official judges.
* **Tie Handling:** The code now defaults to Holyfield in case of a tie or missing data within the official judge branch. This is not ideal and should be refined with a better tie-breaking strategy.
* **`Round` Feature Integration:** I added the round number to make the predictions more nuanced, I used the round <= 6 as a threshold which is half the fight duration. However, You could use more specific logic depending on how the fight played out and if there is any relationship between the judge's score and the round.
* **Missing Data:** The function does not explicitly handle missing data, which could be an issue in a real-world scenario. You might want to add checks and default values or imputation strategies for missing features.



**To use the function:**

```python
example_features = {'Judge': 0, 'Official': 1, 'Round': 3} # Round 3, by E. Williams and he is an official judge
prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Lewis)
print(f"Nodes: {nodes}")       # Output: Nodes: [True, True, None] 
```



This improved version provides a more concrete structure while highlighting the areas that require data-driven refinement. Remember to replace the placeholder logic for non-official judges and optimize the thresholds and judge selection based on your actual data.