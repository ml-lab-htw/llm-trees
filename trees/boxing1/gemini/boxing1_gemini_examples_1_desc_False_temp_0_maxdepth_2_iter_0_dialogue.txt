


```python
def predict(X: dict):
    """
    Predicts the round winner based on judge scores.

    Args:
        X (dict): A dictionary containing the features: 'Judge', 'Official', 'Round'.

    Returns:
        tuple: A tuple containing the prediction (1 for Lewis, 0 for Holyfield) 
               and a list representing the truth values of the inner nodes.
    """
    nodes = 2 * [None]

    # Simplified logic based on official/unofficial status and a hypothetical majority vote.
    # In a real application, you would calculate these majorities from individual judge scores.

    nodes[0] = X['Official'] == 1  # Is the judge an official judge?

    if nodes[0]:  # Official Judge
        # Placeholder for majority vote among officials. Replace with actual calculation.
        # Assuming Judge 0 (E. Williams) and 1 (L. O'Connell) are consistently scoring for Lewis when official.
        nodes[1] = (X['Judge'] == 0 or X['Judge'] == 1)
        if nodes[1]: # Example: Majority of officials favor Lewis.
             prediction = 1 
        else:
             prediction = 0 # Example: Majority of officials favor Holyfield.

    else:  # Unofficial Judge
        # Placeholder for majority vote among unofficials. Replace with actual calculation.
        #  Assuming Judge 3 (HBO-Lederman) and Judge 4 (Sportsticker) favor Lewis when unofficial
        nodes[1] = (X['Judge'] == 3 or X['Judge'] == 4)
        if nodes[1]: # Example: Majority of unofficials favor Lewis.
            prediction = 1
        else:
             prediction = 0 # Example: Majority of unofficials favor Holyfield.



    return prediction, nodes



# Example usage:
example_features = {'Judge': 0, 'Official': 1, 'Round': 5}
prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")



example_features = {'Judge': 2, 'Official': 1, 'Round': 5} # S. Christodoulu scoring when official
prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")

example_features = {'Judge': 3, 'Official': 0, 'Round': 5} # HBO-Lederman scoring when NOT official
prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")

example_features = {'Judge': 7, 'Official': 0, 'Round': 5} # Associated Press scoring when NOT official
prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")


```



**Explanation and Improvements:**

1. **Majority Vote Placeholders:**  The current implementation uses placeholder logic for the majority vote (e.g. if X['Judge'] == 0 or X['Judge'] ==1).  In a real-world scenario, you would need to calculate the actual majority based on the individual judge scores for each round.  You'd likely have a separate data preprocessing step to determine these majorities before calling the `predict` function.
2. **Feature Encoding:**  The code uses the provided feature encoding (0-9 for 'Judge', 1/0 for 'Official', 1-12 for 'Round').
3. **Depth 2:** The decision tree structure adheres to the maximum depth of 2.
4. **`nodes` List:** The `nodes` list stores the truth values of the conditions at each inner node. This allows you to inspect the decision path.
5. **Return Tuple:** The function returns both the prediction and the `nodes` list as requested.


**To make this a fully functional solution, you would need to:**

* **Preprocess your data:** Create the "Official_Majority" and "Unofficial_Majority" features by calculating the majority votes for each round based on individual judge scores.  Handle cases where there's a tie.
* **Integrate the majority vote calculation:** Replace the placeholder logic in the `predict` function with the actual calculations using the preprocessed majority vote features.


This improved structure and explanation should help you implement a more complete and accurate solution for predicting round winners in your boxing dataset.