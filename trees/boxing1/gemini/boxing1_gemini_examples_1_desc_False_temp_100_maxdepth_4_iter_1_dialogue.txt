


```python
def predict(X: dict):
    nodes = 4 * [None]  # Initialize list for truth values of inner nodes

    nodes[0] = X["Official"] == 1  # Check if it's an official judge

    if nodes[0]:  # Branch for Official Judge = Yes
        nodes[1] = X["Round"] <= 4
        if nodes[1]:
            prediction = 1  # Lewis (Assumed strong start)
        else:
            nodes[2] = X["Round"] <= 8
            if nodes[2]:
                prediction = 0  # Holyfield (Hypothetical mid-round surge)
            else:
                prediction = 1  # Lewis (Hypothetical strong finish)
    else:  # Branch for Official Judge = No
        nodes[3] = X["Judge"] in (3, 4) # HBO-Lederman, Sportsticker
        if nodes[3]:
           prediction = 1  # Lewis (Hypothetical media bias)
        else:
           if X["Judge"] in (5,6): #Boxing Times, Sportsline
                prediction = 0 # Holyfield (Hypothetical media bias)
           else:
                prediction = 0.5 # Draw/Undecided -  Using 0.5 to represent a draw since the target variable doesn't have a draw class, you might want to modify how your evaluation handles it


    return prediction, nodes
```


**Explanation and Improvements:**

* **Nodes List:**  The `nodes` list now stores the truth values (True/False) of the conditions at each inner node.  This allows you to track the path taken through the tree.
* **Official Judge Branch:** The tree first checks if the judge is official.  If so, it uses round-based logic, as before.
* **Non-Official Judge Branch:**  If the judge is not official, it now checks the "Judge" feature.   The conditions use tuple membership checks (`in (3, 4)`) for more concise grouping.
* **Draw/Undecided:** Since the problem statement only defines 1 and 0 as target values (Lewis and Holyfield wins), I have used 0.5 to represent the "Draw" scenario for the remaining judges. This is a placeholder; if you want to explicitly model draws, you'll need to modify your target variable encoding.  This could involve using a three-class scheme (Lewis win, Holyfield win, Draw) or a probabilistic output (e.g., probability of Lewis winning).  In this hypothetical case, I just picked one outcome since there was no data and therefore no ground truth for such a scenario.
* **Thresholds:** I've tried to fill in sensible thresholds based on the hypothetical narrative described earlier. However, these are just placeholders; a real model would learn these thresholds from data.





