


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node 0: Check if the judge is official.
    nodes[0] = X["Official"] == 1  # 1 for Yes, 0 for No

    # Simplified Majority Vote (Placeholder Logic - Needs Data to Implement Properly)
    # In a real application, you'd access a dataset of judge scores for the round.
    # Here, we're using placeholder logic for demonstration due to lack of that data.

    if nodes[0]:  # Official Judges
        # Placeholder: Replace with actual majority calculation based on official judge scores.
        if sum(judge_score > 0.5 for judge_score in [0.6, 0.7, 0.8]) > 1.5:  # Example scores, adjust as needed
             prediction = 1  # Lewis wins
        else:
            prediction = 0  # Holyfield wins
    else:  # Unofficial Judges
        # Placeholder: Replace with actual majority calculation based on unofficial judge scores.
        if sum(judge_score > 0.5 for judge_score in [0.4, 0.3, 0.2]) > 1.5:  # Example scores, adjust as needed
             prediction = 1  # Lewis wins
        else:
             prediction = 0  # Holyfield wins


    return prediction, nodes

# Example usage (replace with real judge data when available)
example_features = {"Judge": 0, "Official": 1, "Round": 1}
prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")

example_features = {"Judge": 3, "Official": 0, "Round": 5}
prediction, nodes = predict(example_features)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")


```

**Explanation and Improvements:**

1. **Official Judge Node:**  The first node (`nodes[0]`) checks if the judge is official using `X["Official"] == 1`.

2. **Majority Vote Logic (Placeholders):** The current code has placeholder logic for the majority vote.  Because we don't have the actual judge scores for each round, I've used example scores within the `sum()` functions.  **Crucially, you'll need to replace these with code that accesses your dataset and calculates the actual majority based on official/unofficial judge scores for the given round.**

3. **Data Handling:**  In a real scenario, you would likely have a data structure (e.g., a Pandas DataFrame) storing the judge scores for each round.  The code would then retrieve the relevant scores based on the round number and judge type (official/unofficial).

4. **Tie-Breaking:**  You should implement a tie-breaking mechanism in the majority vote calculation in case both fighters receive the same number of votes in a round.

**Example Data Structure (for your reference):**

A Pandas DataFrame would be a good way to organize the judge scores. It might look something like this:

```
   Round  Judge  Official  Score_Lewis  Score_Holyfield
0      1      0         1          10                9
1      1      1         1           9               10
2      1      2         0          10                9
...   ...    ...       ...         ...              ...
```

With this structure, you could easily filter for the relevant round and judge type (official/unofficial) and then calculate the majority based on the `Score_Lewis` and `Score_Holyfield` columns.



By integrating your judge score data and refining the majority vote calculation, you'll have a functional decision tree classifier. Let me know if you have the data structure available, and I can help you integrate it into the `predict` function.