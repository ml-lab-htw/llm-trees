


Certainly! Based on the decision tree and the exact feature keys and target variable you've provided, here's the Python function implementing the decision tree classifier:

---

**Features:**

- **'Judge'**: Judge (encoded as integers)
  - 0 = E. Williams
  - 1 = L. O'Connell
  - 2 = S. Christodoulu
  - 3 = HBO-Lederman
  - 4 = Sportsticker
  - 5 = Boxing Times
  - 6 = Sportsline
  - 7 = Associated Press
  - 8 = ESPN
  - 9 = Boxing Monthly-Leach
- **'Official'**: Official judge
  - 1 = Yes
  - 0 = No
- **'Round'**: Round number (1 to 12)

**Target Variable:**

- **Winner of the round**:
  - 0 = Holyfield
  - 1 = Lewis
  - 2 = Draw (since 'Draw' is a possible outcome in the decision tree)

---

**Python Function:**

```python
def predict(X: dict):
    nodes = [None] * 6  # Initialize nodes list with 6 elements
    nodes[0] = int(X["Official"] == 1)  # Node 0: Is Official == Yes?
    
    if nodes[0]:  # If Official Judge
        nodes[1] = int(X["Judge"] == 0)  # Node 1: Is Judge == E. Williams?
        nodes[2] = int(X["Judge"] == 1)  # Node 2: Is Judge == L. O'Connell?
        nodes[3] = int(X["Judge"] == 2)  # Node 3: Is Judge == S. Christodoulu?
        
        if nodes[1]:  # Judge is E. Williams
            nodes[4] = int(X["Round"] <= 6)  # Node 4: Is Round <= 6?
            if nodes[4]:
                prediction = 0  # Winner: Holyfield
            else:
                prediction = 2  # Winner: Draw
        elif nodes[2]:  # Judge is L. O'Connell
            prediction = 2  # Winner: Draw
        elif nodes[3]:  # Judge is S. Christodoulu
            nodes[5] = int(X["Round"] <= 5)  # Node 5: Is Round <= 5?
            if nodes[5]:
                prediction = 0  # Winner: Holyfield
            else:
                prediction = 1  # Winner: Lewis
        else:
            # For other Official Judges not specified, default to Draw
            prediction = 2  # Winner: Draw
    else:  # Non-Official Judges
        prediction = 1  # Winner: Lewis
    
    return prediction, nodes
```

---

**Explanation:**

- **Node 0** checks if the judge is an official judge (`Official == 1`).
  
- **If Node 0 is `1` (True)**:
  - **Node 1** checks if the judge is **E. Williams** (`Judge == 0`).
  - **Node 2** checks if the judge is **L. O'Connell** (`Judge == 1`).
  - **Node 3** checks if the judge is **S. Christodoulu** (`Judge == 2`).
  
  - **If Node 1 is `1` (Judge is E. Williams)**:
    - **Node 4** checks if the **Round <= 6**.
      - If **Node 4 is `1`**, the prediction is **`0` (Holyfield)**.
      - If **Node 4 is `0`**, the prediction is **`2` (Draw)**.
  
  - **Elif Node 2 is `1` (Judge is L. O'Connell)**:
    - The prediction is **`2` (Draw)**.
  
  - **Elif Node 3 is `1` (Judge is S. Christodoulu)**:
    - **Node 5** checks if the **Round <= 5**.
      - If **Node 5 is `1`**, the prediction is **`0` (Holyfield)**.
      - If **Node 5 is `0`**, the prediction is **`1` (Lewis)**.
  
  - **Else** (Other official judges not specified):
    - The prediction defaults to **`2` (Draw)**.
  
- **Else** (Node 0 is `0`, Non-Official Judges):
  - The prediction is **`1` (Lewis)**.

**Nodes List:**

- `nodes[0]`: **Official Judge** condition (`1` if `Official == 1`, else `0`).
- `nodes[1]`: **Judge == E. Williams** condition (`1` if `Judge == 0`, else `0` or `None` if not evaluated).
- `nodes[2]`: **Judge == L. O'Connell** condition (`1` if `Judge == 1`, else `0` or `None` if not evaluated).
- `nodes[3]`: **Judge == S. Christodoulu** condition (`1` if `Judge == 2`, else `0` or `None` if not evaluated).
- `nodes[4]`: **Round <= 6** (for E. Williams) (`1` if `Round <= 6`, else `0` or `None` if not evaluated).
- `nodes[5]`: **Round <= 5** (for S. Christodoulu) (`1` if `Round <= 5`, else `0` or `None` if not evaluated).

**Example Usage:**

```python
# Example input where:
# Judge: E. Williams (0)
# Official: Yes (1)
# Round: 4
X_example = {"Judge": 0, "Official": 1, "Round": 4}

prediction, nodes = predict(X_example)
print(f"Prediction: {prediction}")  # Output: Prediction: 0 (Holyfield)
print(f"Nodes: {nodes}")            # Output: Nodes: [1, 1, 0, 0, 1, None]
```

**Interpretation of Nodes:**

- `nodes[0] = 1`: It's an official judge.
- `nodes[1] = 1`: Judge is E. Williams.
- `nodes[2] = 0`: Judge is not L. O'Connell.
- `nodes[3] = 0`: Judge is not S. Christodoulu.
- `nodes[4] = 1`: Round is less than or equal to 6.
- `nodes[5] = None`: Not evaluated because Judge is not S. Christodoulu.

**Notes:**

- The function strictly follows the decision tree logic.
- The nodes list helps trace the path taken in the tree for the given input.
- The prediction can be:
  - `0` for **Holyfield**
  - `1` for **Lewis**
  - `2` for **Draw**
  
**Testing with Different Inputs:**

1. **Non-Official Judge Example:**

   ```python
   X = {"Judge": 5, "Official": 0, "Round": 10}
   prediction, nodes = predict(X)
   print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Lewis)
   print(f"Nodes: {nodes}")            # Output: Nodes: [0, None, None, None, None, None]
   ```

2. **Judge L. O'Connell Example:**

   ```python
   X = {"Judge": 1, "Official": 1, "Round": 7}
   prediction, nodes = predict(X)
   print(f"Prediction: {prediction}")  # Output: Prediction: 2 (Draw)
   print(f"Nodes: {nodes}")            # Output: Nodes: [1, 0, 1, 0, None, None]
   ```

3. **Judge S. Christodoulu Round 4 Example:**

   ```python
   X = {"Judge": 2, "Official": 1, "Round": 4}
   prediction, nodes = predict(X)
   print(f"Prediction: {prediction}")  # Output: Prediction: 0 (Holyfield)
   print(f"Nodes: {nodes}")            # Output: Nodes: [1, 0, 0, 1, None, 1]
   ```

4. **Judge S. Christodoulu Round 8 Example:**

   ```python
   X = {"Judge": 2, "Official": 1, "Round": 8}
   prediction, nodes = predict(X)
   print(f"Prediction: {prediction}")  # Output: Prediction: 1 (Lewis)
   print(f"Nodes: {nodes}")            # Output: Nodes: [1, 0, 0, 1, None, 0]
   ```

**Conclusion:**

This function accurately models the decision tree classifier using the exact feature keys and target variable encoding you've provided. The nodes list provides a binary indication of which conditions were satisfied during the prediction process.