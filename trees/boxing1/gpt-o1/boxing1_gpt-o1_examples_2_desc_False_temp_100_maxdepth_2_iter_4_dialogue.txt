


Certainly! Below is the Python function that represents the decision tree with a maximum depth of 2, using the specified features and encodings. The function `predict` takes a dictionary `X` containing the features and returns a prediction (`1` for **Lewis**, `0` for **Holyfield**) along with a list representing the truth values of the inner nodes (`1` if the condition is satisfied, `0` otherwise).

```python
def predict(X: dict):
    nodes = [None] * 2  # Initialize a list to hold the truth values of inner nodes
    
    # Evaluate the conditions at each node
    nodes[0] = 1 if X['Official'] == 1 else 0  # Official judge (1 = Yes, 0 = No)
    nodes[1] = 1 if X['Round'] <= 6 else 0     # Round number <= 6

    # Decision logic based on the decision tree
    if nodes[0] == 1:
        if nodes[1] == 1:
            prediction = 1  # Lewis wins the round
        else:
            prediction = 0  # Holyfield wins the round
    else:
        prediction = 0      # Holyfield wins the round

    return prediction, nodes
```

### Explanation:

- **nodes[0]**: Checks if the judge is an official judge.
  - `nodes[0] = 1` if `X['Official']` equals `1` (Yes).
  - `nodes[0] = 0` if `X['Official']` equals `0` (No).
- **nodes[1]**: Checks if the round number is less than or equal to 6.
  - `nodes[1] = 1` if `X['Round']` is less than or equal to `6`.
  - `nodes[1] = 0` if `X['Round']` is greater than `6`.
- **Decision Logic**:
  - If `nodes[0]` is `1` (Official judge is **Yes**):
    - If `nodes[1]` is `1` (Round ≤ 6), predict `1` (**Lewis** wins).
    - Else, predict `0` (**Holyfield** wins).
  - Else, predict `0` (**Holyfield** wins) when the judge is not official.

### Example Usage:

```python
# Example 1: Official judge, Round 3
X_example1 = {'Judge': 0, 'Official': 1, 'Round': 3}
prediction1, nodes1 = predict(X_example1)
print(f"Prediction: {prediction1}, Nodes: {nodes1}")
# Output: Prediction: 1, Nodes: [1, 1]

# Example 2: Unofficial judge, Round 10
X_example2 = {'Judge': 4, 'Official': 0, 'Round': 10}
prediction2, nodes2 = predict(X_example2)
print(f"Prediction: {prediction2}, Nodes: {nodes2}")
# Output: Prediction: 0, Nodes: [0, 0]

# Example 3: Official judge, Round 8
X_example3 = {'Judge': 2, 'Official': 1, 'Round': 8}
prediction3, nodes3 = predict(X_example3)
print(f"Prediction: {prediction3}, Nodes: {nodes3}")
# Output: Prediction: 0, Nodes: [1, 0]
```

### Notes:

- **Feature Keys**: Ensure that the keys in the input dictionary `X` match exactly as specified:
  - `'Judge'`, `'Official'`, `'Round'`
- **Feature Encodings**:
  - **Judge**: Integer values from `0` to `9` representing different judges.
  - **Official**: `1` for Yes (official judge), `0` for No (unofficial judge).
  - **Round**: Integer values from `1` to `12`.
- **Target Variable**:
  - **Prediction**: `1` if **Lewis** is predicted to win the round.
  - `0` if **Holyfield** is predicted to win the round.
- **Thresholds**:
  - The threshold `Round ≤ 6` splits the rounds into early (1-6) and late (7-12) rounds, providing a meaningful division based on potential changes in performance over the match duration.

By using this function, you can input the features of a round and obtain a prediction of which boxer won that round according to the induced decision tree.