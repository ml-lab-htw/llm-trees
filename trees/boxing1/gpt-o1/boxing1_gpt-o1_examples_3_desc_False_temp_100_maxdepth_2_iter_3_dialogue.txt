


```python
def predict(X: dict):
    nodes = [None] * 2  # Initialize a list to store truth values of inner nodes

    # Node 0: Round <= 6
    nodes[0] = int(X["Round"] <= 6)

    # Node 1: Official == 1 (Yes)
    nodes[1] = int(X["Official"] == 1)

    # Decision logic
    if nodes[0]:
        # If Round <= 6
        prediction = 1  # Lewis
    else:
        # If Round > 6
        if nodes[1]:
            # If Official judge
            prediction = 1  # Lewis
        else:
            # If Unofficial judge
            prediction = 0  # Holyfield

    return prediction, nodes
```

**Explanation:**

- **nodes[0]:** Checks if the **Round** is less than or equal to 6. If the condition is satisfied, `nodes[0] = 1`, else `nodes[0] = 0`.
- **nodes[1]:** Checks if the **Official** judge flag is `1` (Yes). If the condition is satisfied, `nodes[1] = 1`, else `nodes[1] = 0`.
  
The function returns:

- **prediction:** The predicted winner of the round (`1` for Lewis, `0` for Holyfield).
- **nodes:** A list containing the truth values of the inner nodes, where `1` indicates the condition is satisfied, and `0` indicates it is not.

**Example Usage:**

```python
# Example input where Round is 5 and Official judge
X = {'Judge': 2, 'Official': 1, 'Round': 5}
prediction, nodes = predict(X)
print(f"Prediction: {prediction} (1=Lewis, 0=Holyfield), Nodes: {nodes}")
# Output: Prediction: 1 (1=Lewis, 0=Holyfield), Nodes: [1, 1]

# Example input where Round is 8 and Unofficial judge
X = {'Judge': 7, 'Official': 0, 'Round': 8}
prediction, nodes = predict(X)
print(f"Prediction: {prediction} (1=Lewis, 0=Holyfield), Nodes: {nodes}")
# Output: Prediction: 0 (1=Lewis, 0=Holyfield), Nodes: [0, 0]
```

**Note:**

- Ensure that the feature keys in the input dictionary `X` exactly match the specified keys: `'Judge'`, `'Official'`, and `'Round'`.
- The function strictly adheres to the decision tree logic derived from the most important features.