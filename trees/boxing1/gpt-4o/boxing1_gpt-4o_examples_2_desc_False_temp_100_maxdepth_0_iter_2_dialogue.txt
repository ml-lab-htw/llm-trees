


```python
def predict(X: dict):
    nodes = [None] * 5  # Initialize the list to hold truth values for each inner node

    # Evaluate each condition and store its truth value
    nodes[0] = X["Official"] == 1
    nodes[1] = X["Judge"] == 3  # HBO-Lederman
    nodes[2] = X["Round"] <= 5
    nodes[3] = X["Judge"] == 7  # Associated Press
    nodes[4] = X["Round"] <= 6

    # Use the conditions to navigate the tree and make a prediction
    if nodes[0]:  # If Official judge
        if nodes[1]:  # If Judge is HBO-Lederman
            if nodes[2]:  # If Round <= 5
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:
            if X["Round"] <= 3:
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
    else:  # If not Official judge
        if nodes[3]:  # If Judge is Associated Press
            if nodes[4]:  # If Round <= 6
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:
            if X["Round"] <= 8:
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield

    return prediction, nodes

# Example Usage
features = {
    "Judge": 3,       # HBO-Lederman
    "Official": 1,    # Yes
    "Round": 4        # Round 4
}
prediction, nodes = predict(features)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

Explanation:
- The `nodes` list keeps track of the truth values of the inner conditions in the decision tree.
- Each condition is evaluated and stored in the `nodes` list.
- Using these conditions, the function navigates through the decision tree to make a prediction about which fighter won the round.
  
This representation matches the desired function format and considers all conditions used in the decision tree described previously. The thresholds (like round numbers) are filled in based on typical boxing match rules and the example decision tree provided earlier.