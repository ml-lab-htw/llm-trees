Below is a decision tree classifier with a maximum depth of 3, based on the provided features: `Judge`, `Official`, and `Round`. The target variable is which of the two boxing fighters won each round (`1 = Lewis`, `0 = Holyfield`). It uses three inner nodes to make a prediction.

```python
def predict(X: dict):
    # Initialize list to store the truth values of inner nodes
    nodes = 3 * [None]

    # Decision tree logic
    nodes[0] = X["Judge"] <= 4  # Check if the judge is one of the first 5 judges (E. Williams to Boxing Times)
    nodes[1] = X["Official"] == 1  # Check if the judge is an official judge
    nodes[2] = X["Round"] <= 6  # Check if the round is in the first half (1 to 6)

    # Decision based on the tree structure
    if nodes[0]:
        if nodes[1]:
            if nodes[2]:
                prediction = 1  # Lewis wins the round
            else:
                prediction = 0  # Holyfield wins the round
        else:
            prediction = 0  # Holyfield wins the round
    else:
        if nodes[1]:
            prediction = 1  # Lewis wins the round
        else:
            if nodes[2]:
                prediction = 0  # Holyfield wins the round
            else:
                prediction = 1  # Lewis wins the round

    return prediction, nodes
```

### Explanation of Decision Tree Logic:
1. **Node 0 (`Judge <= 4`)**: The tree first checks if the judge is one of the first 5 judges (i.e., `E. Williams`, `L. O'Connell`, `S. Christodoulu`, `HBO-Lederman`, `Sportsticker`). These judges might have a different scoring pattern than the others.
   
2. **Node 1 (`Official == 1`)**: The second check is whether the judge is an official judge. Official judges might be more consistent in their scoring compared to non-official ones.

3. **Node 2 (`Round <= 6`)**: The third check is whether the round is in the first half of the fight (rounds 1 to 6). Different rounds might have different patterns in terms of how the judges score the fighters.

### Example Usage:

```python
# Example input
X = {
    "Judge": 3,  # HBO-Lederman
    "Official": 1,  # Yes, official judge
    "Round": 5  # Round 5
}

# Predicting the outcome
prediction, nodes = predict(X)
print(f"Prediction: {prediction}, Inner Nodes: {nodes}")
```

This would return:
```
Prediction: 1, Inner Nodes: [True, True, True]
```

In this example, the judge is `HBO-Lederman` (which satisfies `Judge <= 4`), the judge is official (`Official == 1`), and it is round 5 (which satisfies `Round <= 6`), so the prediction is that Lewis wins the round (`1`). The inner nodes reflect that all conditions are satisfied (`[True, True, True]`).