


```python
def predict(X: dict):
    # Initialize the nodes list to keep track of truth values of inner nodes
    nodes = 7 * [None]
    
    # Evaluate each inner node condition and store the result
    nodes[0] = X["Judge"] == 0  # E. Williams
    nodes[1] = X["Official"] == 1  # Official judge
    
    nodes[2] = X["Judge"] == 1  # L. O'Connell
    nodes[3] = X["Round"] <= 4

    nodes[4] = X["Judge"] == 2  # S. Christodoulu
    nodes[5] = X["Round"] <= 5

    nodes[6] = X["Judge"] == 8  # ESPN

    # Decision Tree Logic
    if nodes[0]:  # Judge is E. Williams
        if nodes[1]:  # Official judge
            if X["Round"] <= 6:
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield
    elif nodes[2]:  # Judge is L. O'Connell
        if nodes[1]:  # Official judge
            if nodes[3]:
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
        else:
            prediction = 1  # Lewis
    elif nodes[4]:  # Judge is S. Christodoulu
        if nodes[1]:  # Official judge
            if nodes[5]:
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:
            prediction = 1  # Lewis
    elif X["Judge"] == 3:  # HBO-Lederman
        prediction = 1  # Lewis
    elif X["Judge"] == 4:  # Sportsticker
        prediction = 0  # Holyfield
    elif X["Judge"] == 5:  # Boxing Times
        if X["Round"] <= 3:
            prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield
    elif X["Judge"] == 6:  # Sportsline
        prediction = 1  # Lewis
    elif X["Judge"] == 7:  # Associated Press
        prediction = 0  # Holyfield
    elif nodes[6]:  # Judge is ESPN
        if X["Round"] <= 2:
            prediction = 0  # Holyfield
        else:
            prediction = 1  # Lewis
    elif X["Judge"] == 9:  # Boxing Monthly-Leach
        prediction = 0  # Holyfield
    else:
        prediction = None  # If judge is not in the list, which shouldn't happen based on provided data

    return prediction, nodes

# Example usage:
X = {'Judge': 1, 'Official': 1, 'Round': 5}  # Input features
prediction, nodes = predict(X)

print("Prediction:", prediction)      # Should return the prediction (1 for Lewis, 0 for Holyfield)
print("Nodes:", nodes)                # Should return the list of truth values for inner node conditions
```

In this function:
- We initialize a list `nodes` with `None` values to track which inner nodes are satisfied.
- The conditions are evaluated and stored in the `nodes` list.
- The decision tree is implemented with nested `if` statements based on these conditions.
- Finally, the function returns the predicted winner and the list of node conditions.