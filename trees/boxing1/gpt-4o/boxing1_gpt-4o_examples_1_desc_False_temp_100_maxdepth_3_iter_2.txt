Sure! Below is a decision tree function with a maximum depth of 3 based on the Features you provided: `Judge`, `Official`, and `Round`. The target variable is which of the two boxers won the round (`target`: 1 for Lewis, 0 for Holyfield).

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Node 1: Check if the round is early (before or at round 6)
    nodes[0] = X["Round"] <= 6

    # Node 2: Check if the judge is an official judge
    nodes[1] = X["Official"] == 1

    # Node 3: Check if the judge is Sporting-related (Judge IDs 4 to 9)
    nodes[2] = 4 <= X["Judge"] <= 9
    
    if nodes[0]:  # Early rounds (1-6)
        if nodes[1]:  # Official judge
            prediction = 1  # Lewis wins
        else:  # Non-official judge
            prediction = 0  # Holyfield wins
    else:  # Later rounds (7-12)
        if nodes[2]:  # Sporting-related judges
            prediction = 1  # Lewis wins
        else:  # Other judges
            prediction = 0  # Holyfield wins
    
    return prediction, nodes
```

### Explanation:
1. **Node 1**: The first decision point checks if the round is one of the early rounds (Rounds 1 to 6). If it's an early round, the decision falls into one branch, otherwise, it falls into another branch for later rounds (Rounds 7 to 12).
2. **Node 2**: For the early rounds, the decision checks if the judge is an official judge (`Official == 1`). If so, the prediction is that Lewis wins the round. Otherwise, Holyfield wins the round.
3. **Node 3**: For the later rounds, the decision checks if the judge is from a sporting organization (Judge IDs 4 to 9). If a sporting-related judge is present, Lewis wins. Otherwise, Holyfield wins.

This tree has a depth of 3 with 3 decision nodes. The function returns both the prediction and the inner nodes' truth values for further analysis.
