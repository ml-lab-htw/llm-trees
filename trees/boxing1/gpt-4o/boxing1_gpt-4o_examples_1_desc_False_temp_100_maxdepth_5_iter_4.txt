Given the Features and the target variable, I will generate a decision tree with a maximum depth of 5, using the most relevant features you provided. The decision tree will predict which of the two boxing fighters won the round (1 = Lewis, 0 = Holyfield), based on the features "Judge", "Official", and "Round."

Here is the decision tree function:

```python
def predict(X: dict):
    nodes = 5 * [None]  # Initialize a list to store the truth values of the inner nodes

    # Decision tree conditions (using features: Judge, Official, Round)
    nodes[0] = X["Round"] <= 6  # First split on the round number
    nodes[1] = X["Judge"] <= 4  # Split based on the judge
    nodes[2] = X["Official"] == 1  # Check if the judge is official
    nodes[3] = X["Judge"] <= 7  # Further split based on the judge's position
    nodes[4] = X["Round"] > 9  # Additional condition on the round number

    # Decision tree logic
    if nodes[0]:  # If Round <= 6
        if nodes[1]:  # If Judge <= 4
            if nodes[2]:  # If Judge is official
                if nodes[3]:  # If Judge <= 7
                    if nodes[4]:  # If Round > 9
                        prediction = 1  # Lewis wins
                    else:
                        prediction = 0  # Holyfield wins
                else:
                    prediction = 1  # Lewis wins
            else:
                prediction = 0  # Holyfield wins
        else:
            if nodes[2]:  # If Judge is official
                prediction = 1  # Lewis wins
            else:
                prediction = 0  # Holyfield wins
    else:  # If Round > 6
        if nodes[3]:  # If Judge <= 7
            prediction = 0  # Holyfield wins
        else:
            if nodes[4]:  # If Round > 9
                prediction = 1  # Lewis wins
            else:
                prediction = 0  # Holyfield wins

    return prediction, nodes

# Example usage:
X = {"Judge": 3, "Official": 1, "Round": 8}
result, node_values = predict(X)
print(f"Prediction: {result}, Node values: {node_values}")
```

### Explanation:
- **Feature "Round"**: The first node checks if the round is less than or equal to 6. If it is, the decision path goes down one branch; otherwise, it goes down another.
- **Feature "Judge"**: This feature is used in multiple nodes to split based on the specific judge.
- **Feature "Official"**: This feature checks if the judge is official (1 means yes and 0 means no).
  
### Example:
For `X = {"Judge": 3, "Official": 1, "Round": 8}`, the result would be:
- `Prediction: 1` (which means Lewis wins)
- `Node values: [True, True, True, True, False]`

The output includes both the prediction and the truth values for each node in the decision tree.
