


```python
def predict(X: dict):
    # Initialize the list of nodes (truth values for inner nodes)
    nodes = 2 * [None]
    
    # First decision node: Is the judge an official judge?
    nodes[0] = X["Official"] == 1
    
    if nodes[0]:  # Official judge
        # Second decision node: Is the round less than or equal to 6?
        nodes[1] = X["Round"] <= 6
        
        if nodes[1]:
            prediction = 1  # Lewis wins if official judge in rounds 1-6
        else:
            prediction = 0  # Holyfield wins if official judge in rounds 7-12
    else:  # Non-official judge
        # Second decision node: Is the judge from HBO-Lederman, ESPN, or Boxing Monthly-Leach?
        nodes[1] = X["Judge"] in {3, 8, 9}
        
        if nodes[1]:
            prediction = 1  # Lewis favored by these non-official judges
        else:
            prediction = 0  # Holyfield favored by other non-official judges
    
    # Return the predicted winner and the truth values of the inner nodes
    return prediction, nodes
```

### Explanation:
- **First decision node** (`nodes[0]`): Checks if the judge is an official judge by evaluating `X["Official"] == 1`.
- If the judge is official, the second decision node (`nodes[1]`) checks if the round number is `<= 6`. Based on this, either Lewis or Holyfield is predicted as the winner.
- If the judge is not official, the second decision node checks if the judge is one of HBO-Lederman, ESPN, or Boxing Monthly-Leach (`Judge` values 3, 8, or 9). Based on this, a prediction is made.

This Python function follows the structure of the decision tree you requested, using the provided feature names and target encoding.