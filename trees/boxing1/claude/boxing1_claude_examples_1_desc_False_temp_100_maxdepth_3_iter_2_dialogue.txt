


Based on the provided feature names, target encoding, and value ranges, I'll create a prediction function for the decision tree that classifies Lewis (1) vs. Holyfield (0) round wins.

```python
def predict(X: dict):
    nodes = 3 * [None]  # Create list for 3 inner nodes
    
    # First split on HBO-Lederman (Judge == 3)
    nodes[0] = X["Judge"] == 3
    # Second split on Official judge status
    nodes[1] = X["Official"] == 1
    # Third split on Round number
    nodes[2] = X["Round"] <= 6
    
    if not nodes[0]:  # Not HBO-Lederman
        if nodes[1]:  # Official judge
            prediction = 0  # Holyfield
        else:  # Not official judge
            prediction = 1  # Lewis
    else:  # HBO-Lederman
        if nodes[2]:  # First 6 rounds
            prediction = 0  # Holyfield
        else:  # Rounds 7-12
            prediction = 1  # Lewis
            
    return prediction, nodes
```

This function:
- Takes a dictionary X with the features "Judge", "Official", and "Round"
- Returns a tuple containing:
  - prediction (1 for Lewis, 0 for Holyfield)
  - list of boolean values for each decision node
- Uses meaningful thresholds based on the feature descriptions:
  - Judge == 3 (HBO-Lederman)
  - Official == 1 (Official judge)
  - Round <= 6 (First half vs second half of fight)
- Follows the same tree structure as previously described
- Properly handles the target encoding (1 = Lewis, 0 = Holyfield)