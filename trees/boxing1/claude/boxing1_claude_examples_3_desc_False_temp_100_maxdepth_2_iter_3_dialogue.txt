


Based on the decision tree I provided earlier and the format you've requested, here's the Python function that implements the decision tree classifier:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["Judge"] in [3, 7, 8]  # HBO-Lederman, Associated Press, ESPN
    nodes[1] = X["Round"] <= 6.5
    nodes[2] = X["Official"] == 1

    if not nodes[0]:
        if nodes[1]:
            prediction = 0  # Holyfield
        else:
            prediction = 1  # Lewis
    else:
        if not nodes[2]:
            prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield

    return prediction, nodes
```

Explanation:

1. The function takes a dictionary `X` containing the feature values.
2. We create a list `nodes` to store the truth values of the inner nodes.
3. The first node checks if the judge is from HBO-Lederman, Associated Press, or ESPN (encoded as 3, 7, and 8 respectively).
4. The second node checks if the round is 6 or earlier.
5. The third node checks if the judge is an official judge.
6. The prediction logic follows the structure of the decision tree:
   - If not from the specified sources (HBO-Lederman, Associated Press, ESPN):
     - If it's an earlier round (1-6), predict Holyfield (0)
     - If it's a later round (7-12), predict Lewis (1)
   - If from the specified sources:
     - If not an official judge, predict Lewis (1)
     - If an official judge, predict Holyfield (0)
7. The function returns the prediction (1 for Lewis, 0 for Holyfield) and the list of node truth values.

This implementation adheres to the feature keys and encodings you provided, and follows the structure of the decision tree classifier I described earlier.