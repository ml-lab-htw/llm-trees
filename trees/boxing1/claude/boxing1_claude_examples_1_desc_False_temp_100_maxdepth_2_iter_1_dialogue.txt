


Based on the provided feature specifications and encoding, I'll create a decision tree prediction function that uses the Judge and Official features as the main splitting criteria:

```python
def predict(X: dict):
    nodes = 2 * [None]
    # Check if judge is HBO-Lederman (Judge = 3)
    nodes[0] = X["Judge"] == 3
    # Check if it's an official judge
    nodes[1] = X["Official"] == 1
    
    if nodes[0]:  # If HBO-Lederman
        if nodes[1]:  # If official judge
            prediction = 0  # Holyfield
        else:
            prediction = 1  # Lewis
    else:  # If not HBO-Lederman
        prediction = 1  # Lewis

    return prediction, nodes
```

This decision tree:
1. First checks if the judge is HBO-Lederman (Judge = 3)
2. Then checks if it's an official judge (Official = 1)
3. Makes predictions based on these conditions:
   - If it's HBO-Lederman and an official judge: predicts Holyfield (0)
   - If it's HBO-Lederman but not an official judge: predicts Lewis (1)
   - If it's not HBO-Lederman: predicts Lewis (1)

The function returns both the prediction (0 for Holyfield, 1 for Lewis) and a list of boolean values representing the truth values of the inner nodes.