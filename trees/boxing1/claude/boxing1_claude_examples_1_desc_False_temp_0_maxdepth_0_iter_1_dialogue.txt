


Based on the provided features and target encoding, I'll create a decision tree function that predicts whether Lewis (1) or Holyfield (0) won the round. Here's the implementation:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Decision nodes
    nodes[0] = X["Official"] <= 0
    nodes[1] = X["Judge"] == 3  # HBO-Lederman
    nodes[2] = X["Judge"] == 7  # Associated Press
    nodes[3] = X["Round"] <= 6

    if nodes[0]:  # Not an official judge
        if nodes[1]:  # Is HBO-Lederman
            prediction = 1  # Lewis
        else:
            if nodes[2]:  # Is Associated Press
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
    else:  # Official judge
        if nodes[3]:  # First 6 rounds
            if X["Judge"] == 0:  # E. Williams
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:  # Rounds 7-12
            if X["Judge"] == 1:  # L. O'Connell
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis

    return prediction, nodes
```

This decision tree:
1. First checks if the judge is official or not
2. For unofficial judges:
   - If it's HBO-Lederman, predicts Lewis
   - If it's Associated Press, predicts Lewis
   - Otherwise predicts Holyfield
3. For official judges:
   - In rounds 1-6:
     - If it's E. Williams, predicts Holyfield
     - Otherwise predicts Lewis
   - In rounds 7-12:
     - If it's L. O'Connell, predicts Holyfield
     - Otherwise predicts Lewis

The function returns both the prediction (1 for Lewis, 0 for Holyfield) and a list of boolean values representing the state