


Based on the provided feature names, target encoding, and value ranges, I'll create a decision tree function that predicts whether Lewis (1) or Holyfield (0) won the round:

```python
def predict(X: dict):
    nodes = 4 * [None]  # Initialize list for 4 inner nodes
    
    # Inner node conditions
    nodes[0] = X["Judge"] == 3  # HBO-Lederman
    nodes[1] = X["Official"] == 1  # Is official judge
    nodes[2] = X["Round"] <= 6  # First half of the fight
    nodes[3] = X["Judge"] == 7  # Associated Press
    
    if not nodes[0]:  # Not HBO-Lederman
        if not nodes[1]:  # Not official judge
            if not nodes[3]:  # Not Associated Press
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
        else:  # Official judge
            if nodes[2]:  # First half of fight
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
    else:  # HBO-Lederman
        if X["Round"] <= 3:
            prediction = 0  # Holyfield
        else:
            if not nodes[1]:  # Not official judge
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
    
    return prediction, nodes
```

This function:
1. Takes a dictionary X with the features "Judge", "Official", and "Round"
2. Creates a list of 4 boolean values representing the inner node conditions
3. Uses the decision tree structure to make a prediction (1 for Lewis, 0 for Holyfield)
4. Returns both the prediction and the list of node conditions

The thresholds and conditions are based on realistic values from the feature descriptions:
- Judge values are compared to specific judges (3 for HBO-Lederman, 7 for Associated Press)
- Official is compared to 1 (Yes)
- Round splits are at 6 (mid-fight) an