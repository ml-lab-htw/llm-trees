


Based on the provided features and target encoding, I'll create a decision tree prediction function with depth 2 that predicts whether Lewis (1) or Holyfield (0) won the round.

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["Judge"] == 3  # Check if judge is HBO-Lederman
    nodes[1] = X["Round"] <= 6  # Split rounds at midpoint
    
    if nodes[0]:  # If HBO-Lederman
        if nodes[1]:  # If first half of fight
            prediction = 0  # Holyfield
        else:  # If second half of fight
            prediction = 1  # Lewis
    else:  # If not HBO-Lederman
        if X["Official"] == 1:  # If official judge
            prediction = 0  # Holyfield
        else:  # If not official judge
            prediction = 1  # Lewis

    return prediction, nodes
```

This decision tree implementation:
1. First checks if the judge is HBO-Lederman (Judge == 3)
2. For HBO-Lederman's scoring:
   - Predicts Holyfield (0) for earlier rounds (â‰¤ 6)
   - Predicts Lewis (1) for later rounds (> 6)
3. For other judges:
   - Predicts Holyfield (0) if they're official judges
   - Predicts Lewis (1) if they're unofficial judges

The function returns both the prediction (1 for Lewis, 0 for Holyfield) and a list of boolean values representing the state of the inner nodes.