


Based on the provided feature specifications and target encoding, I'll create a decision tree function that determines if Lewis (1) or Holyfield (0) won the round:

```python
def predict(X: dict):
    nodes = 4 * [None]  # Create list for storing node conditions
    
    # Decision nodes with meaningful thresholds
    nodes[0] = X["Judge"] == 3  # HBO-Lederman
    nodes[1] = X["Official"] == 1
    nodes[2] = X["Round"] <= 6
    nodes[3] = X["Judge"] == 7  # Associated Press
    
    if not nodes[0]:  # If not HBO-Lederman
        if not nodes[1]:  # If not official judge
            if not nodes[3]:  # If not Associated Press
                prediction = 1  # Lewis wins
            else:
                prediction = 0  # Holyfield wins
        else:  # If official judge
            if nodes[2]:  # If first half of fight
                prediction = 0  # Holyfield wins
            else:
                prediction = 1  # Lewis wins
    else:  # If HBO-Lederman
        if not nodes[1]:  # If not official judge
            if X["Round"] <= 3:
                prediction = 0  # Holyfield wins
            else:
                prediction = 1  # Lewis wins
        else:  # If official judge
            prediction = 0  # Holyfield wins
            
    return prediction, nodes
```

This function:
1. Takes a dictionary X with the features as input
2. Creates a list to store the truth values of each node condition
3. Evaluates each node condition and stores the result (True=1, False=0)
4. Returns both the prediction (1 for Lewis, 0 for Holyfield) and the list of node conditions

The thresholds and conditions are based on the provided feature mappings and what would make sense in a boxing context, such as splitting the fight into early and late rounds.