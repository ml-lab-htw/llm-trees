


I'll create a decision tree function based on the features and target encoding you provided. The function will predict whether Lewis (1) or Holyfield (0) won the round and return the node conditions.

```python
def predict(X: dict):
    # Initialize nodes list
    nodes = 4 * [None]
    
    # Define the conditions for each node
    nodes[0] = X["Official"] <= 0  # First split on Official judge
    nodes[1] = X["Judge"] == 3     # Check if judge is HBO-Lederman
    nodes[2] = X["Judge"] == 7     # Check if judge is Associated Press
    nodes[3] = X["Round"] <= 5     # Check if it's an early round
    
    # Decision tree logic
    if nodes[0]:  # Not an official judge
        if nodes[1]:  # HBO-Lederman
            prediction = 1  # Lewis wins
        else:
            if nodes[2]:  # Associated Press
                prediction = 0  # Holyfield wins
            else:
                prediction = 1  # Lewis wins
    else:  # Official judge
        if nodes[3]:  # Early rounds (1-5)
            prediction = 0  # Holyfield wins
        else:  # Later rounds (6-12)
            if X["Judge"] == 0:  # E. Williams
                prediction = 0  # Holyfield wins
            else:
                prediction = 1  # Lewis wins
    
    return prediction, nodes
```

This decision tree implementation:
1. Takes a dictionary X containing the features "Judge", "Official", and "Round"
2. Creates 4 nodes representing the main decision points
3. Returns:
   - prediction: 1 for Lewis winning, 0 for Holyfield winning
   - nodes: list of boolean values representing whether each condition was met

The tree structure follows the logic:
- First splits on whether it's an official judge
- For unofficial judges, considers HBO-Lederman and Associated Press
- For official judges, considers the round number and whether the judge is E. Williams
- Makes predictions based on these conditions

You can use this function by passing a