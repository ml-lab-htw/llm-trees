


Based on the decision tree I proposed earlier and the format you've requested, here's the Python function that implements the decision tree classifier:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["Round"] <= 6
    nodes[1] = X["Judge"] == 3  # 3 corresponds to HBO-Lederman
    nodes[2] = X["Official"] == 1  # 1 means it's an official judge

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield
    else:
        if nodes[2]:
            prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield

    return prediction, nodes
```

This function implements the decision tree with the following structure:

1. The first split is on the Round, with a threshold of 6 (rounds 1-6 vs 7-12).
2. For rounds 1-6:
   - If the judge is HBO-Lederman (Judge == 3), predict Lewis (1)
   - Otherwise, predict Holyfield (0)
3. For rounds 7-12:
   - If it's an official judge (Official == 1), predict Lewis (1)
   - Otherwise, predict Holyfield (0)

The function returns a tuple containing:
1. The prediction: 1 for Lewis, 0 for Holyfield
2. A list of three boolean values representing the truth values of the inner nodes

This implementation adheres to the feature keys and encodings you provided, and follows the format of the example functions you shared.