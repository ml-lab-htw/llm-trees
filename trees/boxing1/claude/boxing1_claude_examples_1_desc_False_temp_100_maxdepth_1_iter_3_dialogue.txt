


Based on the provided feature names, encoding, and target variable, I'll create a decision function for the tree that splits on the 'Official' feature:

```python
def predict(X: dict):
    nodes = [None]  # Only one decision node since max_depth=1
    nodes[0] = X["Official"] <= 0.5  # Split on whether judge is official
    
    if nodes[0]:  # If not an official judge (Official <= 0.5)
        prediction = 1  # Predict Lewis
    else:  # If official judge (Official > 0.5)
        prediction = 0  # Predict Holyfield
        
    return prediction, nodes
```

This function:
- Takes a dictionary X with the features as input
- Creates a list 'nodes' with one element (since max_depth=1)
- Checks if the judge is official (Official <= 0.5)
- Returns 1 (Lewis) for unofficial judges and 0 (Holyfield) for official judges
- Returns both the prediction and the list of node conditions

The encoding matches the specified format where:
- Lewis is encoded as 1
- Holyfield is encoded as 0
- Official judges are encoded as 1
- Unofficial judges are encoded as 0