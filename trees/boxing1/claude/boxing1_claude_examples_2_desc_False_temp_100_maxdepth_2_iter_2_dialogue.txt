


Based on the decision tree I created earlier and the specific feature information you've provided, here's the Python function that implements the decision tree classifier for the boxing match between Lewis and Holyfield:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["Official"] == 0  # Check if the judge is not an official judge
    nodes[1] = X["Round"] <= 6  # Check if it's an early round (1-6)
    
    if nodes[0]:
        prediction = 1  # Lewis wins
    else:
        if nodes[1]:
            prediction = 0  # Holyfield wins
        else:
            prediction = 1  # Lewis wins

    return prediction, nodes
```

Explanation:

1. The first node checks if the judge is not an official judge (i.e., if they are from media or an expert). This corresponds to the "Judge" feature in your original tree, but we're using the "Official" feature as it's more directly related to this split.

2. The second node checks if the round is 6 or earlier. This corresponds to the "Round" feature in your original tree.

3. The prediction logic follows the structure of the decision tree:
   - If the judge is not an official (media/expert), Lewis wins (1).
   - If the judge is an official:
     - If it's an early round (1-6), Holyfield wins (0).
     - If it's a later round (7-12), Lewis wins (1).

4. The function returns both the prediction (0 for Holyfield, 1 for Lewis) and a list of the truth values for each node condition.

This implementation assumes that the "Official" feature is encoded as 1 for official judges and 0 for media/expert judges, which is consistent with the encoding you provided. The Round feature is used as-is, assuming it's a number from 1 to 12.