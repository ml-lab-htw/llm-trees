


Based on the provided feature specifications and target encoding, I'll create a decision function for the decision tree that classifies rounds between Lewis (1) and Holyfield (0):

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First split: Judge being HBO-Lederman (value 3)
    nodes[0] = X["Judge"] == 3
    
    # Second split: Round number (early vs late rounds)
    nodes[1] = X["Round"] > 6
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Lewis wins (later rounds with HBO-Lederman judging)
        else:
            prediction = 0  # Holyfield wins (early rounds with HBO-Lederman judging)
    else:
        if X["Official"] == 1:
            prediction = 0  # Holyfield wins (official judges, non HBO-Lederman)
        else:
            prediction = 1  # Lewis wins (unofficial judges, non HBO-Lederman)
            
    return prediction, nodes
```

This implementation:
- Uses the exact feature names provided: 'Judge', 'Official', 'Round'
- Returns both the prediction (1 for Lewis, 0 for Holyfield) and the nodes list
- Uses proper value encodings (Judge: 0-9, Official: 0-1, Round: 1-12)
- Maintains the same tree structure as previously described
- Uses sensible thresholds based on the feature descriptions

The nodes list captures:
- nodes[0]: Whether the judge is HBO-Lederman (Judge == 3)
- nodes[1]: Whether it's a later round (Round > 6)