


I'll create a decision tree function based on the provided features and target encoding for the Lewis vs. Holyfield fight scoring. Here's the implementation:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Node conditions
    nodes[0] = X["Official"] == 1  # Is official judge?
    nodes[1] = X["Judge"] == 3     # Is HBO-Lederman?
    nodes[2] = X["Round"] > 5      # Is it after round 5?
    nodes[3] = X["Judge"] == 7     # Is Associated Press?

    # Tree logic
    if not nodes[0]:  # Not official judge
        if nodes[1]:  # HBO-Lederman
            if nodes[2]:  # After round 5
                if nodes[3]:  # Associated Press
                    prediction = 1  # Lewis
                else:
                    prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield
    else:  # Official judge
        if X["Judge"] == 0:  # E. Williams
            prediction = 0  # Holyfield
        elif X["Judge"] == 1:  # L. O'Connell
            prediction = 1  # Lewis
        else:  # S. Christodoulu
            prediction = 0  # Holyfield

    return prediction, nodes
```

This decision tree implementation:
1. Takes a dictionary X containing the features
2. Creates a list of 4 nodes representing key decision points
3. Uses the official/unofficial judge distinction as the first split
4. For unofficial judges, considers HBO-Lederman's scoring and round number
5. For official judges, uses their individual tendencies
6. Returns both the prediction (1 for Lewis, 0 for Holyfield) and the node conditions

The node conditions track:
- Whether it's an official judge
- Whether it's HBO-Lederman
- Whether it's after round 5
- Whether it's Associated Press

Each node returns True (1) or False (0) based on