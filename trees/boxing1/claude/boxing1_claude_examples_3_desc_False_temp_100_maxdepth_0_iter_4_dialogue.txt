


Based on the provided information and requirements, here's the Python function that implements the decision tree classifier for determining which boxer (Lewis or Holyfield) won each round:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["Round"] <= 6
    nodes[1] = X["Judge"] == 3  # HBO-Lederman
    nodes[2] = X["Official"] == 1  # Yes
    nodes[3] = X["Judge"] == 0  # E. Williams
    nodes[4] = X["Round"] <= 9

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Lewis
        else:
            if nodes[2]:
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
    else:
        if nodes[3]:
            prediction = 0  # Holyfield
        else:
            if nodes[2]:
                if nodes[4]:
                    prediction = 1  # Lewis
                else:
                    prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis

    return prediction, [int(node) if node is not None else node for node in nodes]
```

This function takes a dictionary `X` containing the features and returns a tuple with two elements:
1. The prediction: 1 for Lewis winning the round, 0 for Holyfield winning the round.
2. A list of 5 elements representing the truth values of the inner nodes. Each element is 1 if the condition is satisfied, 0 if it's not, and None if the node wasn't evaluated.

The decision tree is based on the following features and thresholds:
1. Round (threshold: 6)
2. Judge (specific checks for HBO-Lederman and E. Williams)
3. Official judge status
4. Another Round check (threshold: 9) for later rounds

This implementation follows the structure of the decision tree described earlier, with specific encodings for the judges and official status as provided in the feature description.