


Based on the decision tree I created earlier and the format you've requested, here's the Python function that implements the decision tree classifier for the Lewis vs. Holyfield boxing match:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["Round"] <= 6
    nodes[1] = X["Judge"] == 3  # 3 corresponds to HBO-Lederman
    nodes[2] = X["Official"] == 1
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield
    else:
        if nodes[2]:
            prediction = 0  # Holyfield
        else:
            prediction = 1  # Lewis
    
    return prediction, nodes
```

Explanation:

1. The function takes a dictionary `X` as input, containing the features for a single round.

2. We create a list `nodes` to store the truth values of the inner nodes.

3. The first node checks if the round is 6 or earlier.

4. The second node checks if the judge is HBO-Lederman (Judge code 3).

5. The third node checks if the judge is an official judge.

6. The prediction logic follows the decision tree structure:
   - For rounds 1-6:
     - If the judge is HBO-Lederman, predict Lewis (1)
     - Otherwise, predict Holyfield (0)
   - For rounds 7-12:
     - If it's an official judge, predict Holyfield (0)
     - Otherwise, predict Lewis (1)

7. The function returns the prediction (1 for Lewis, 0 for Holyfield) and the list of node truth values.

This implementation reflects the decision tree structure we discussed earlier, with specific thresholds and conditions based on the feature descriptions provided. The tree suggests that HBO-Lederman's scoring was influential in the earlier rounds, while the official judges' decisions were more crucial in the later rounds.