


Based on the provided feature descriptions and target encoding, I'll create a decision tree prediction function with the specified format:

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First split on Round (threshold at middle of fight)
    nodes[0] = X["Round"] <= 6
    
    # Second split based on whether it's HBO-Lederman (Judge=3) or Official status
    nodes[1] = X["Judge"] == 3 if nodes[0] else X["Official"] == 1
    
    if nodes[0]:  # First 6 rounds
        if nodes[1]:  # If HBO-Lederman
            prediction = 1  # Lewis wins
        else:  # Not HBO-Lederman
            prediction = 0  # Holyfield wins
    else:  # Later rounds (7-12)
        if nodes[1]:  # If official judge
            prediction = 0  # Holyfield wins
        else:  # Not official judge
            prediction = 1  # Lewis wins
            
    return prediction, nodes
```

This implementation:
- Takes a dictionary X with the features as keys
- Uses meaningful thresholds based on the feature descriptions
- Returns both the prediction (1 for Lewis, 0 for Holyfield) and the nodes list
- Uses only the exact feature names provided
- Follows the same structure as the example decision tree but maps to the boxing context
- Makes logical splits based on round timing and judge credibility

The tree first splits on whether it's the first or second half of the fight (Round <= 6), then considers either HBO-Lederman's judgment or official status depending on the round, leading to predictions about which fighter won the round.