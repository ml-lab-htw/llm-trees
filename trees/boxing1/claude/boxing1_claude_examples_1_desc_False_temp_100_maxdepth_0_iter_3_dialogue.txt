


Based on the provided feature specifications and target encoding, I'll create a decision tree function that classifies rounds between Lewis (1) and Holyfield (0):

```python
def predict(X: dict):
    # Initialize nodes list for storing binary decisions
    nodes = 4 * [None]
    
    # Decision nodes
    nodes[0] = X["Official"] <= 0  # Split on whether it's an official judge
    nodes[1] = X["Judge"] == 3     # Check if it's HBO-Lederman
    nodes[2] = X["Round"] <= 6     # Split on first half vs second half of fight
    nodes[3] = X["Judge"] == 0     # Check if it's E. Williams

    # Tree logic
    if nodes[0]:  # Not an official judge
        if nodes[1]:  # HBO-Lederman
            if nodes[2]:  # First 6 rounds
                prediction = 0  # Holyfield
            else:  # Later rounds
                prediction = 1  # Lewis
        else:  # Other unofficial judges
            prediction = 1  # Lewis
    else:  # Official judge
        if nodes[3]:  # E. Williams
            prediction = 0  # Holyfield
        else:  # Other official judges
            if nodes[2]:  # First 6 rounds
                prediction = 0  # Holyfield
            else:  # Later rounds
                prediction = 1  # Lewis

    return prediction, nodes
```

This decision tree:
1. Uses the exact feature names provided
2. Returns both the prediction (1 for Lewis, 0 for Holyfield) and the nodes list
3. Uses sensible thresholds based on the feature descriptions
4. Incorporates the specified encoding for features (Official: 1=Yes/0=No, Judge: 0-9)
5. Makes decisions based on whether it's an official judge, specific judges (HBO-Lederman, E. Williams), and the round number
6. Follows the target encoding (1=Lewis, 0=Holyfield)