


Based on the provided features and target encoding, I'll create a decision tree function that predicts whether Lewis (1) or Holyfield (0) won the round. Here's the implementation:

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Node conditions
    nodes[0] = X["Judge"] == 3  # HBO-Lederman
    nodes[1] = X["Official"] == 1
    nodes[2] = X["Round"] <= 6
    nodes[3] = X["Judge"] == 7  # Associated Press

    if nodes[0]:  # If HBO-Lederman
        if nodes[2]:  # Round <= 6
            prediction = 1  # Lewis
        else:  # Round > 6
            if nodes[1]:  # Official judge
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
    else:  # Not HBO-Lederman
        if nodes[1]:  # Official judge
            if X["Judge"] == 0:  # E. Williams
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:  # Not official judge
            if nodes[3]:  # Associated Press
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield

    return prediction, nodes
```

This decision tree:
1. First checks if the judge is HBO-Lederman (Judge = 3)
2. Then considers whether it's an official judge
3. Takes into account the round number (particularly for rounds â‰¤ 6)
4. Considers specific judges (E. Williams and Associated Press)

The function returns:
- A prediction (1 for Lewis, 0 for Holyfield)
- A list of boolean values representing the truth values of each condition in the tree

The nodes list contains the following conditions:
- nodes[0]: Is the judge HBO-Lederman?
- nodes[1]: Is it an official judge?
- nodes[2]: Is it round 6 or earlier?
- nodes[3]: Is the judge Associated Press?