


Based on the decision tree I created earlier and the specific requirements you've provided, here's the Python function that implements the decision tree classifier for the boxing match between Lewis and Holyfield:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["Round"] <= 6
    nodes[1] = X["Judge"] == 3  # HBO-Lederman
    nodes[2] = X["Official"] == 1  # Yes
    nodes[3] = X["Judge"] == 0  # E. Williams
    nodes[4] = X["Round"] <= 9

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Lewis
        else:
            if nodes[2]:
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
    else:
        if nodes[3]:
            prediction = 0  # Holyfield
        else:
            if nodes[2]:
                if nodes[4]:
                    prediction = 1  # Lewis
                else:
                    prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis

    return prediction, nodes
```

This function takes a dictionary `X` as input, where the keys are the feature names ('Judge', 'Official', 'Round') and the values are the corresponding feature values.

The function returns a tuple containing:
1. The prediction: 1 for Lewis winning the round, 0 for Holyfield winning the round.
2. A list of boolean values representing the truth values of the inner nodes of the decision tree.

The decision tree uses the following thresholds and conditions:
- Round 6 as the midpoint of the fight
- Judge 3 (HBO-Lederman) as a specific judge
- Official judge (1 for Yes, 0 for No)
- Judge 0 (E. Williams) as another specific judge
- Round 9 as another important threshold in the later part of the fight

This implementation follows the structure of the decision tree I described earlier, taking into account the specific feature encodings and target variable encoding you provided.