


I'll create a decision tree function based on the provided features and target encoding for the Lewis vs. Holyfield boxing match. I'll use the same structure as my previous tree but adapt it to the exact feature names and encodings provided.

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["Judge"] != 3  # Judge is not HBO-Lederman (3)
    nodes[1] = X["Official"] == 0  # Not an official judge
    
    if nodes[0]:  # Judge is not HBO-Lederman
        if nodes[1]:  # Not an official judge
            prediction = 1  # Lewis wins
        else:  # Official judge
            prediction = 0  # Holyfield wins
    else:  # Judge is HBO-Lederman
        if X["Round"] <= 6:  # First half of the fight
            prediction = 1  # Lewis wins
        else:  # Second half of the fight
            prediction = 0  # Holyfield wins

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the feature values
2. Creates a list of 2 nodes representing the binary conditions in the tree
3. First checks if the judge is not HBO-Lederman (Judge != 3)
4. Then checks if the judge is not official (Official == 0)
5. Returns both the prediction (1 for Lewis, 0 for Holyfield) and the list of node conditions

The decision rules are based on:
- Judge identity (HBO-Lederman vs. others)
- Official status of the judge
- Round number (early vs. late rounds)

The prediction values are:
- 1 = Lewis won the round
- 0 = Holyfield won the round