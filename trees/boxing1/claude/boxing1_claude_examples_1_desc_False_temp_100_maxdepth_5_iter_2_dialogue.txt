


Based on the provided feature names, encoding, and requirements, I'll create a predict function that implements the decision tree and returns both the prediction and the node conditions:

```python
def predict(X: dict):
    # Initialize nodes list to store conditions
    nodes = 5 * [None]
    
    # Define the conditions for each node
    nodes[0] = X["Judge"] == 3  # HBO-Lederman
    nodes[1] = X["Official"] == 1
    nodes[2] = X["Round"] <= 3
    nodes[3] = X["Round"] <= 7
    nodes[4] = X["Round"] <= 10
    
    # Implement the decision tree logic
    if not nodes[0]:  # If not HBO-Lederman
        if not nodes[1]:  # If not official judge
            if nodes[2]:  # Round <= 3
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:  # If official judge
            if nodes[3]:  # Round <= 7
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
    else:  # If HBO-Lederman
        if nodes[4]:  # Round <= 10
            prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield
            
    return prediction, nodes
```

This implementation:
- Takes a dictionary X with the features as input
- Uses the exact feature names provided: 'Judge', 'Official', 'Round'
- Returns both the prediction (1 for Lewis, 0 for Holyfield) and the list of node conditions
- Incorporates the proper encoding for each feature
- Has meaningful threshold values based on the provided ranges
- Follows a logical structure for boxing round scoring
- Has a maximum depth of 5 nodes
- Returns boolean values (True/False) for each node condition

The tree structure considers:
- The importance of HBO-Lederman's judging
- Whether the judge is official or not
- Different phases of the fight (early, middle, and late rounds)
- The proper encoding where 1