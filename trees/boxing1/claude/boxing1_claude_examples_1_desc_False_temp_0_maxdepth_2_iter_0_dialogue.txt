


I'll create a decision tree function based on the provided features and target encoding for the Lewis vs. Holyfield boxing match. I'll use the same structure as my previous tree but adapt it to the exact feature names and encodings provided.

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First node: Check if judge is HBO-Lederman (Judge == 3)
    nodes[0] = X["Judge"] == 3
    
    # Second node: For non-HBO-Lederman judges, check if official
    # For HBO-Lederman, check if it's an early round (≤ 6)
    if nodes[0]:
        nodes[1] = X["Round"] <= 6
    else:
        nodes[1] = X["Official"] == 1
    
    if nodes[0]:  # HBO-Lederman
        if nodes[1]:  # Early rounds (≤ 6)
            prediction = 1  # Lewis
        else:  # Later rounds (> 6)
            prediction = 0  # Holyfield
    else:  # Other judges
        if nodes[1]:  # Official judge
            prediction = 0  # Holyfield
        else:  # Non-official judge
            prediction = 1  # Lewis
            
    return prediction, nodes
```

This function:
1. Takes a dictionary X with the features as input
2. Creates a list of 2 nodes to store the boolean values of conditions
3. First checks if the judge is HBO-Lederman (Judge == 3)
4. Based on that, either:
   - For HBO-Lederman: checks if it's an early round (≤ 6)
   - For other judges: checks if they're official judges
5. Returns:
   - prediction: 1 for Lewis, 0 for Holyfield
   - nodes: list of boolean values for the two decision nodes

The decision rules reflect that:
- Official judges tended to favor Holyfield (0)
- Non-official judges tended to favor Lewis (1)
- HBO-Lederman favored Lewis (1) in early rounds an