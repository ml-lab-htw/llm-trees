


Based on the provided feature encodings and target variable mapping, I'll create a decision tree prediction function that returns both the prediction (1 for Lewis, 0 for Holyfield) and the list of node conditions.

```python
def predict(X: dict):
    # Initialize nodes list to store boolean conditions
    nodes = 3 * [None]
    
    # Define decision nodes
    nodes[0] = X["Judge"] <= 2  # Official judges (E. Williams, L. O'Connell, S. Christodoulu)
    nodes[1] = X["Official"] == 1  # Is official judge
    nodes[2] = X["Round"] > 6  # Later rounds
    
    # Decision tree logic
    if nodes[0]:  # Official judges
        if nodes[1]:  # Is official judge
            if nodes[2]:  # Round > 6
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
        else:
            prediction = 0  # Holyfield
    else:  # Media judges
        if nodes[2]:  # Round > 6
            prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield
    
    return prediction, nodes
```

This decision tree function:
1. Takes a dictionary X with the features 'Judge', 'Official', and 'Round'
2. Creates three decision nodes based on:
   - Whether it's an official judge (Judge â‰¤ 2)
   - Whether the judge is official (Official == 1)
   - Whether it's a later round (Round > 6)
3. Returns:
   - prediction: 1 for Lewis victory, 0 for Holyfield victory
   - nodes: list of boolean values representing the conditions at each node

The tree structure reflects the tendency for:
- Official judges to favor Lewis in later rounds
- Media judges to favor Lewis in later rounds
- Earlier rounds generally being scored for Holyfield
- Official status affecting scoring patterns