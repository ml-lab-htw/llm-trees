


I'll create a decision tree function based on the features and target encoding you provided. The function will return both the prediction (1 for Lewis, 0 for Holyfield) and the list of boolean values for each decision node.

```python
def predict(X: dict):
    # Initialize nodes list for storing boolean values of conditions
    nodes = 3 * [None]
    
    # Decision nodes
    nodes[0] = X["Judge"] == 3  # HBO-Lederman
    nodes[1] = X["Official"] == 1  # Official judge
    nodes[2] = X["Round"] > 6  # Later rounds
    
    # Tree logic
    if not nodes[0]:  # If not HBO-Lederman
        if not nodes[1]:  # If not official judge
            if X["Judge"] == 7:  # If Associated Press
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
        else:  # If official judge
            if nodes[2]:  # If Round > 6
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
    else:  # If HBO-Lederman
        prediction = 1  # Lewis
        
    return prediction, nodes
```

This decision tree implementation:
1. Takes a dictionary X with the features as input
2. Creates three decision nodes:
   - Is the judge HBO-Lederman?
   - Is it an official judge?
   - Is it after round 6?
3. Returns:
   - prediction: 1 for Lewis, 0 for Holyfield
   - nodes: list of boolean values for each decision node

The tree structure follows the logic:
- If HBO-Lederman (Judge=3), predict Lewis
- If not HBO-Lederman:
  - If not official judge:
    - If Associated Press (Judge=7), predict Lewis
    - Otherwise, predict Holyfield
  - If official judge:
    - If Round > 6, predict Lewis
    - If Round â‰¤ 6, predict Holyfield