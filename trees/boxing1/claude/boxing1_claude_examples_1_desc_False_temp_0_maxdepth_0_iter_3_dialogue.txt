


Based on the provided features and target encoding, I'll create a decision tree function that predicts whether Lewis (1) or Holyfield (0) won the round:

```python
def predict(X: dict):
    # Initialize nodes list for storing boolean conditions
    nodes = 4 * [None]
    
    # Define the decision nodes
    nodes[0] = X["Official"] <= 0  # Is it not an official judge?
    nodes[1] = X["Judge"] == 3     # Is it HBO-Lederman?
    nodes[2] = X["Judge"] == 7     # Is it Associated Press?
    nodes[3] = X["Round"] <= 6     # Is it in the first half of the fight?

    # Decision tree logic
    if nodes[0]:  # Not an official judge
        if nodes[1]:  # HBO-Lederman
            prediction = 1  # Lewis
        else:
            if nodes[2]:  # Associated Press
                prediction = 1  # Lewis
            else:
                prediction = 0  # Holyfield
    else:  # Official judge
        if nodes[3]:  # First half of fight
            if X["Judge"] == 0:  # E. Williams
                prediction = 0  # Holyfield
            else:
                prediction = 1  # Lewis
        else:  # Second half of fight
            prediction = 1  # Lewis

    return prediction, nodes
```

This decision tree:
1. First checks if the judge is official or not
2. For unofficial judges:
   - If it's HBO-Lederman, predicts Lewis
   - If it's Associated Press, predicts Lewis
   - Otherwise predicts Holyfield
3. For official judges:
   - In rounds 1-6, checks if it's E. Williams (predicts Holyfield) or others (predicts Lewis)
   - In rounds 7-12, predicts Lewis

The function returns:
- A prediction (1 for Lewis, 0 for Holyfield)
- A list of boolean values representing the state of each decision node

The nodes list contains the truth values for:
1. Whether it's not an official