


I'll create a decision tree function based on the provided features and target encoding for the Lewis vs. Holyfield boxing match. I'll use the same structure as my previous tree but adapt it to the exact feature names and encodings provided.

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["Judge"] == 3  # Check if judge is HBO-Lederman (code 3)
    nodes[1] = X["Round"] <= 6  # Split rounds at midpoint
    
    if not nodes[0]:  # If not HBO-Lederman
        if X["Official"] == 1:  # If official judge
            prediction = 0  # Holyfield
        else:
            prediction = 1  # Lewis
    else:  # If HBO-Lederman
        if nodes[1]:  # If first half of fight
            prediction = 1  # Lewis
        else:
            prediction = 0  # Holyfield

    return prediction, nodes
```

This function:
1. Takes a dictionary X containing the features
2. Creates a list of 2 nodes for the two decision points
3. First node checks if the judge is HBO-Lederman (Judge code 3)
4. Second node checks if the round is in the first half of the fight (≤ 6)
5. Returns both the prediction (1 for Lewis, 0 for Holyfield) and the node values

The node values will be:
- nodes[0]: True if Judge is HBO-Lederman, False otherwise
- nodes[1]: True if Round ≤ 6, False otherwise

The prediction logic follows the structure of the decision tree I provided earlier, using the proper encoding (1 = Lewis, 0 = Holyfield) as specified in the requirements.