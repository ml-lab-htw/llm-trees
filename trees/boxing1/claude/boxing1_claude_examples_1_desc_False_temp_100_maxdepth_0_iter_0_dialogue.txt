


Based on the provided feature specifications and target encoding, I'll create a decision tree function that predicts whether Lewis (1) or Holyfield (0) won the round. Here's the implementation:

```python
def predict(X: dict):
    nodes = 3 * [None]  # Initialize list for storing node conditions
    
    # Define the decision nodes
    nodes[0] = X["Official"] <= 0  # Split on official status
    nodes[1] = X["Round"] <= 6     # Split on round number
    nodes[2] = X["Judge"] <= 3     # Split on judge (HBO-Lederman and earlier vs later)
    
    # Decision tree logic
    if nodes[0]:  # Non-official judges
        if nodes[2]:  # Earlier judges including HBO-Lederman
            prediction = 0  # Holyfield
        else:  # Later judges
            prediction = 1  # Lewis
    else:  # Official judges
        if nodes[1]:  # Earlier rounds
            prediction = 1  # Lewis
        else:  # Later rounds
            prediction = 0  # Holyfield
    
    return prediction, nodes
```

This decision tree:
1. First checks if the judge is non-official (Official <= 0)
2. For non-official judges, splits based on judge number (≤ 3 means E. Williams through HBO-Lederman)
3. For official judges, splits based on round number (≤ 6 for earlier rounds)
4. Makes predictions accordingly (1 for Lewis, 0 for Holyfield)

The thresholds are chosen based on the provided feature descriptions and make logical sense in the context of boxing scoring.