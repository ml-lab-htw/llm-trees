


Below is a Python function named `predict_party_affiliation` that uses the provided features to make a prediction, along with a list representing the truth values of the inner nodes. This function follows the decision tree structure previously outlined.

```python
def predict_party_affiliation(X: dict):
    nodes = 3 * [None]  # There are 3 nodes in our decision tree

    # Node 0: Check "mx-missile" vote
    nodes[0] = X["mx-missile"] == 2
    
    # Node 1: Check "aid-to-nicaraguan-contras" vote (only if MX missile vote was no)
    if not nodes[0]:  
        nodes[1] = X["aid-to-nicaraguan-contras"] == 2
    
        # Node 2: Check "superfund-right-to-sue" vote (only if aid to Nicaraguan contras vote was no)
        if not nodes[1]:
            nodes[2] = X["superfund-right-to-sue"] == 2
    
    # Determine the prediction based on the nodes
    if nodes[0]:
        prediction = 1  # Republican
    else:
        if nodes[1]:
            prediction = 1  # Republican
        else:
            if nodes[2]:
                prediction = 0  # Democrat
            else:
                prediction = 1  # Republican

    return prediction, nodes

# Example usage
features = {
    'handicapped-infants': 1,
    'water-project-cost-sharing': 1,
    'adoption-of-the-budget-resolution': 2,
    'physician-fee-freeze': 1,
    'el-salvador-adi': 2,
    'religious-groups-in-schools': 1,
    'anti-satellite-test-ban': 1,
    'aid-to-nicaraguan-contras': 1,
    'mx-missile': 2,
    'immigration': 2,
    'synfuels-corporation-cutback': 1,
    'education-spending': 2,
    'superfund-right-to-sue': 1,
    'crime': 2,
    'duty-free-exports': 1,
    'export-administration-act-south-africa': 1
}

prediction, nodes = predict_party_affiliation(features)
print(f'Prediction: {"Republican" if prediction == 1 else "Democrat"}')
print(f'Nodes: {nodes}')
```

### Explanation:
1. **Initialization**: A list `nodes` with 3 elements is created to store the truth values of the conditions at each node.
2. **Node 0**: Evaluates the `mx-missile` vote. If the vote is "yes" (i.e., `2`), it sets `nodes[0]` to `True` and predicts "Republican".
3. **Node 1**: Only evaluated if `nodes[0]` is `False` (i.e., `mx-missile` was "no"), checks the `aid-to-nicaraguan-contras` vote. If "yes", sets `nodes[1]` to `True` and predicts "Republican".
4. **Node 2**: Only evaluated if `nodes[1]` is `False` (i.e., `aid-to-nicaraguan-contras` was "no"), checks the `superfund-right-to-sue` vote. If "yes", sets `nodes[2]` to `True` and predicts "Democrat".
5. **Final Prediction**: The `prediction` is determined based on the conditions at the nodes.
6. **Return Values**: The function returns the `prediction` and the list `nodes`.

This laid-out function accepts a dictionary `X`, checks the values against the created nodes, makes a prediction, and returns the internal state of the nodes alongside the prediction.