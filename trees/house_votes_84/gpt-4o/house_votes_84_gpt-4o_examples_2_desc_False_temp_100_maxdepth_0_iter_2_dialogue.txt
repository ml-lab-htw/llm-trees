


Here is the Python function that implements the decision tree for classifying party affiliation based on the provided voting records. The function `predict` takes a dictionary `X` as input, where the keys are feature names and the values are the corresponding voting records.

```python
def predict(X: dict):
    nodes = 6 * [None]
    
    # Define the conditions for each internal node
    nodes[0] = X["adoption-of-the-budget-resolution"] == 2
    nodes[1] = X["el-salvador-adi"] == 2
    nodes[2] = X["immigration"] == 2
    nodes[3] = X["education-spending"] == 2
    nodes[4] = X["mx-missile"] == 2
    nodes[5] = X["education-spending"] == 2
    
    # Decision tree logic
    if nodes[0]:  # Vote on adoption of the budget resolution is Yes
        prediction = 1  # Republican
    else:  # Vote on adoption of the budget resolution is No
        if nodes[1]:  # Vote on aid to El Salvador is Yes
            if nodes[2]:  # Vote on immigration is Yes
                prediction = 1  # Republican
            else:  # Vote on immigration is No
                prediction = 0  # Democrat
        else:  # Vote on aid to El Salvador is No
            if nodes[3]:  # Vote on education spending is Yes
                prediction = 0  # Democrat
            else:  # Vote on education spending is No
                if nodes[4]:  # Vote on MX missile is Yes
                    prediction = 1  # Republican
                else:  # Vote on MX missile is No
                    prediction = 0  # Democrat

    return prediction, nodes

# Example usage:
example_features = {
    'handicapped-infants': 2,
    'water-project-cost-sharing': 1,
    'adoption-of-the-budget-resolution': 1,
    'physician-fee-freeze': 1,
    'el-salvador-adi': 2,
    'religious-groups-in-schools': 1,
    'anti-satellite-test-ban': 1,
    'aid-to-nicaraguan-contras': 1,
    'mx-missile': 2,
    'immigration': 2,
    'synfuels-corporation-cutback': 1,
    'education-spending': 2,
    'superfund-right-to-sue': 1,
    'crime': 1,
    'duty-free-exports': 1,
    'export-administration-act-south-africa': 1
}

prediction, nodes = predict(example_features)
print(f'Prediction: {"Republican" if prediction == 1 else "Democrat"}')
print(f'Nodes: {nodes}')
```

### Explanation:
1. **Nodes Initialization**: The `nodes` list is initialized to store the truth values (whether the condition at each node of the decision tree is satisfied).
2. **Conditions Definition**: Each node checks a specific voting record to determine the path to take in the decision tree. These conditions are based on the rules identified earlier.
   - `nodes[0]`: Checks the vote on the adoption of the budget resolution.
   - `nodes[1]`: Checks the vote on aid to El Salvador.
   - `nodes[2]`: Checks the vote on immigration.
   - `nodes[3]`: Checks the vote on education spending.
   - `nodes[4]`: Checks the vote on MX missile.
3. **Tree Logic**: Implements the decision rules using nested if-else statements. Each level of the tree checks a condition, and the path taken depends on the truth value of that condition.
4. **Return**: The function returns the predicted class (`1` for Republican and `0` for Democrat) and the list of truth values for each node.

### Example Usage:
The example usage demonstrates how to call the `predict` function with a set of features. The prediction and the list of truth values for the internal nodes are printed.

This implementation should help you understand the prediction process and the decision tree traversal based on the given features.