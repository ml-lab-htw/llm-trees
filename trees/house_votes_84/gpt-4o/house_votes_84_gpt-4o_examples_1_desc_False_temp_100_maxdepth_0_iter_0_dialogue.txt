


```python
def predict(X: dict):
    nodes = 5 * [None]  # We have 5 decision nodes in this tree
    
    # Node 0: Check the vote on 'physician-fee-freeze'
    nodes[0] = X["physician-fee-freeze"] == 2  # Yes/No vote (2 = yes, 1 = no)
    
    if nodes[0]:  # If 'physician-fee-freeze' is 'yes'
        prediction = 1  # Republican
    else:  # If 'physician-fee-freeze' is 'no'
        # Node 1: Check the vote on 'adoption-of-the-budget-resolution'
        nodes[1] = X["adoption-of-the-budget-resolution"] == 2
        
        if nodes[1]:  # If 'adoption-of-the-budget-resolution' is 'yes'
            prediction = 1  # Republican
        else:  # If 'adoption-of-the-budget-resolution' is 'no'
            # Node 2: Check the vote on 'aid-to-nicaraguan-contras'
            nodes[2] = X["aid-to-nicaraguan-contras"] == 2
            
            if nodes[2]:  # If 'aid-to-nicaraguan-contras' is 'yes'
                prediction = 1  # Republican
            else:  # If 'aid-to-nicaraguan-contras' is 'no'
                # Node 3: Check the vote on 'education-spending'
                nodes[3] = X["education-spending"] == 2
                
                if nodes[3]:  # If 'education-spending' is 'yes'
                    prediction = 0  # Democrat
                else:  # If 'education-spending' is 'no'
                    # Node 4: Check the vote on 'mx-missile'
                    nodes[4] = X["mx-missile"] == 2
                    
                    if nodes[4]:  # If 'mx-missile' is 'yes'
                        prediction = 1  # Republican
                    else:  # If 'mx-missile' is 'no'
                        prediction = 0  # Democrat
    
    return prediction, nodes
```

### Explanation of the Python function:
1. **Input**: The function takes a dictionary `X` where keys are the vote feature names (as you specified), and the values are the corresponding votes (2 = yes, 1 = no).
2. **Nodes**: The list `nodes` keeps track of whether a condition is satisfied (1 or 0). Each entry corresponds to whether the condition at a particular node is true (1) or false (0).
3. **Decision Path**:
   - The first condition checks the vote on the *physician fee freeze*. If it's "yes" (2), the prediction is Republican.
   - If not, the function checks the vote on the *adoption of the budget resolution*. If this is "yes", the prediction is Republican.
   - If neither of the first two conditions is satisfied, it checks the vote on *aid to Nicaraguan contras*. If "yes", the prediction is Republican.
   - If that is also "no", the function then checks the vote on *education spending*. If "yes", the prediction is Democrat.
   - If "no" to education spending, the final check is on the vote for the *MX missile*. A "yes" vote leads to a Republican prediction, while a "no" leads to a Democrat prediction.
4. **Output**: The function returns two things:
   - The predicted party affiliation (1 = Republican, 0 = Democrat).
   - The list `nodes` that represents the truth values of the conditions at each decision node (1 = condition satisfied, 0 = condition not satisfied).

This function mimics the decision tree structure you provided but in Python code, and it operates without needing to train on any actual data.