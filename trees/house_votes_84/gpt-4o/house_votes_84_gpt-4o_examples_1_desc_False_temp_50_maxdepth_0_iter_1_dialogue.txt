


Here is the Python function for your decision tree classifier, formatted as requested:

```python
def predict(X: dict):
    """
    Decision tree classifier to predict party affiliation (1 = Republican, 0 = Democrat).

    Parameters:
    X (dict): A dictionary containing the features with the exact keys:
        'handicapped-infants', 'water-project-cost-sharing', 'adoption-of-the-budget-resolution',
        'physician-fee-freeze', 'el-salvador-adi', 'religious-groups-in-schools',
        'anti-satellite-test-ban', 'aid-to-nicaraguan-contras', 'mx-missile', 'immigration',
        'synfuels-corporation-cutback', 'education-spending', 'superfund-right-to-sue', 'crime',
        'duty-free-exports', 'export-administration-act-south-africa'

    Returns:
    tuple: A tuple containing:
        - prediction (int): The predicted party affiliation (1 = Republican, 0 = Democrat).
        - nodes (list): A list of truth values (1 or 0) for the inner nodes of the decision tree.
    """
    nodes = 2 * [None]
    
    # First split: 'physician-fee-freeze'
    nodes[0] = X["physician-fee-freeze"] == 1  # True if "no" (1), False if "yes" (2)
    
    if nodes[0]:  # If 'physician-fee-freeze' == no
        prediction = 0  # Democrat
    else:  # If 'physician-fee-freeze' == yes
        # Second split: 'el-salvador-adi'
        nodes[1] = X["el-salvador-adi"] == 1  # True if "no" (1), False if "yes" (2)
        
        if nodes[1]:  # If 'el-salvador-adi' == no
            prediction = 0  # Democrat
        else:  # If 'el-salvador-adi' == yes
            prediction = 1  # Republican

    return prediction, nodes
```

### Explanation:
1. **Feature Encoding**:
   - For `physician-fee-freeze`:
     - `1` means "no".
     - `2` means "yes".
   - For `el-salvador-adi`:
     - `1` means "no".
     - `2` means "yes".

2. **Tree Logic**:
   - The first split checks whether `physician-fee-freeze` is "no" (`1`). If true, the prediction is `0` (Democrat).
   - If `physician-fee-freeze` is "yes" (`2`), the second split checks whether `el-salvador-adi` is "no" (`1`). If true, the prediction is `0` (Democrat). Otherwise, the prediction is `1` (Republican).

3. **Return Values**:
   - The function returns:
     - The predicted class (`0` for Democrat, `1` for Republican).
     - A list of truth values (`nodes`), where each entry corresponds to whether the condition of an inner node was satisfied (`1` for true, `0` for false).

### Example Usage:
```python
# Example input
X = {
    'handicapped-infants': 2,
    'water-project-cost-sharing': 2,
    'adoption-of-the-budget-resolution': 1,
    'physician-fee-freeze': 2,
    'el-salvador-adi': 1,
    'religious-groups-in-schools': 1,
    'anti-satellite-test-ban': 1,
    'aid-to-nicaraguan-contras': 1,
    'mx-missile': 2,
    'immigration': 2,
    'synfuels-corporation-cutback': 1,
    'education-spending': 2,
    'superfund-right-to-sue': 1,
    'crime': 2,
    'duty-free-exports': 1,
    'export-administration-act-south-africa': 2
}

# Predict
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 0 (Democrat)
print("Nodes:", nodes)  # Output: [False, True]
```

This function implements a decision tree with a maximum depth of 2 and uses the specified features to classify party affiliation.