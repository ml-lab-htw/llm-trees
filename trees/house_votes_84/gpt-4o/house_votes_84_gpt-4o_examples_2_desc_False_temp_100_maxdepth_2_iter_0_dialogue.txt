


Based on your instructions, let's create a Python function that simulates the decision tree for predicting party affiliation using the given features. We will use the "adoption-of-the-budget-resolution" and "el-salvador-adi" votes as the decision nodes in our tree.

Here is the implementation:

```python
def predict(X: dict):
    # The nodes list will have an entry for each decision node in the tree
    # For this tree, we have two decision nodes
    nodes = 2 * [None]
    
    # Decision node 1: Vote on adoption of the budget resolution (2 = yes, 1 = no)
    nodes[0] = X["adoption-of-the-budget-resolution"] == 1
    
    if nodes[0]:  # If "adoption-of-the-budget-resolution" is "no"
        prediction = 0  # Democrat
    else:  # If "adoption-of-the-budget-resolution" is "yes"
        # Decision node 2: Vote on aid to El Salvador (2 = yes, 1 = no)
        nodes[1] = X["el-salvador-adi"] == 2
        if nodes[1]:  # If "el-salvador-adi" is "yes"
            prediction = 1  # Republican
        else:  # If "el-salvador-adi" is "no"
            prediction = 0  # Democrat

    return prediction, nodes

# Example usage:
X_example = {
    'handicapped-infants': 1,
    'water-project-cost-sharing': 2,
    'adoption-of-the-budget-resolution': 1,
    'physician-fee-freeze': 2,
    'el-salvador-adi': 2,
    'religious-groups-in-schools': 1,
    'anti-satellite-test-ban': 1,
    'aid-to-nicaraguan-contras': 2,
    'mx-missile': 2,
    'immigration': 1,
    'synfuels-corporation-cutback': 1,
    'education-spending': 2,
    'superfund-right-to-sue': 1,
    'crime': 2,
    'duty-free-exports': 1,
    'export-administration-act-south-africa': 2
}

prediction, nodes = predict(X_example)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")
```

### Explanation
1. **Nodes List:** We initialize a list `nodes` with two `None` entries, as there are two decision nodes in our tree.
   
2. **First Decision Node:** 
    - We check if the vote on the adoption of the budget resolution (`adoption-of-the-budget-resolution`) is "no" (encoded as 1).
    - If this vote is "no", `nodes[0]` is set to `True` and the class is "Democrat" (encoded as 0).
    - Otherwise, we proceed to the next decision node.

3. **Second Decision Node:** 
    - We then check if the vote on aid to El Salvador (`el-salvador-adi`) is "yes" (encoded as 2).
    - If this vote is "yes", `nodes[1]` is set to `True` and the class is "Republican" (encoded as 1).
    - Otherwise, the class is "Democrat" (encoded as 0).

4. **Return Values:** The function returns the predicted class and the values of the decision nodes.

### Example Usage
The provided example demonstrates how to call the function with a dictionary of feature values and prints the prediction and the truth values of the decision nodes.

By following this format, you can easily interpret the predictions and the logic behind the decision tree.