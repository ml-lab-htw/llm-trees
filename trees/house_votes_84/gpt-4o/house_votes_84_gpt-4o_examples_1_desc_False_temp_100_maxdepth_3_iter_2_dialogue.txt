


Below is the Python function to represent the depth-3 decision tree based on the features for predicting party affiliation (1 = Republican, 0 = Democrat). The function returns the prediction and a list of truth values for the inner nodes.

```python
def predict(X: dict):
    """
    Predicts the party affiliation based on the provided features.
    
    Args:
    X (dict): Dictionary of feature values where keys match the exact feature names:
              ['handicapped-infants', 'water-project-cost-sharing', 
              'adoption-of-the-budget-resolution', 'physician-fee-freeze', 
              'el-salvador-adi', 'religious-groups-in-schools', 
              'anti-satellite-test-ban', 'aid-to-nicaraguan-contras', 
              'mx-missile', 'immigration', 'synfuels-corporation-cutback', 
              'education-spending', 'superfund-right-to-sue', 'crime', 
              'duty-free-exports', 'export-administration-act-south-africa']
              
              Feature values are integers according to their encodings.
              
    Returns:
    tuple: (prediction, inner_node_truths)
           - prediction (int): 1 if Republican, 0 if Democrat
           - inner_node_truths (list): List of 0 or 1 values representing the truth values
                                       for inner nodes of the decision tree.
    """
    # Initialize the list to store truth values of the inner nodes
    inner_node_truths = 3 * [None]
    
    # Decision tree logic
    # Node 1: Check the 'physician-fee-freeze' feature
    inner_node_truths[0] = X['physician-fee-freeze'] <= 1  # Yes (2) is mapped as >1, No (1) is <=1
    if inner_node_truths[0]:
        # Node 2: Check the 'el-salvador-adi' feature
        inner_node_truths[1] = X['el-salvador-adi'] <= 1  # Yes (2) is mapped as >1, No (1) is <=1
        if inner_node_truths[1]:
            prediction = 0  # Democrat
        else:
            prediction = 1  # Republican
    else:
        # Node 3: Check the 'mx-missile' feature
        inner_node_truths[2] = X['mx-missile'] <= 1  # Yes (2) is mapped >1, No (1) is <=1
        if inner_node_truths[2]:
            prediction = 0  # Democrat
        else:
            prediction = 1  # Republican
    
    # Return the prediction and the inner node truth values
    return prediction, inner_node_truths
```

### Explanation:
1. **Input Features (`X`):** `X` is a dictionary containing the features with exact names and their respective values as integers according to the provided encodings.

2. **Inner Nodes:**
   - **Node 1:** Splits on the `physician-fee-freeze` feature.
       - If the value is less than or equal to 1 (i.e., "No"), it proceeds to **Node 2**.
       - If the value is greater than 1 (i.e., "Yes"), it proceeds to **Node 3**.
   - **Node 2:** Splits on the `el-salvador-adi` feature.
       - If the value is less than or equal to 1 (i.e., "No"), predicts **Democrat (0)**.
       - If the value is greater than 1 (i.e., "Yes"), predicts **Republican (1)**.
   - **Node 3:** Splits on the `mx-missile` feature.
       - If the value is less than or equal to 1 (i.e., "No"), predicts **Democrat (0)**.
       - If the value is greater than 1 (i.e., "Yes"), predicts **Republican (1)**.

3. **Outputs:**
   - **`prediction`:** The final predicted party affiliation (1 = Republican, 0 = Democrat).
   - **`inner_node_truths`:** A list of truth values (`1` if the condition of the node is satisfied, `0` otherwise) for the decision tree's internal nodes. The length of this list is equal to the number of inner nodes, which in this case is 3.

---

### Example Usage:
```python
# Example input: Feature dictionary
example_features = {
    'handicapped-infants': 1,
    'water-project-cost-sharing': 2,
    'adoption-of-the-budget-resolution': 1,
    'physician-fee-freeze': 2,
    'el-salvador-adi': 1,
    'religious-groups-in-schools': 1,
    'anti-satellite-test-ban': 2,
    'aid-to-nicaraguan-contras': 1,
    'mx-missile': 2,
    'immigration': 1,
    'synfuels-corporation-cutback': 1,
    'education-spending': 2,
    'superfund-right-to-sue': 2,
    'crime': 2,
    'duty-free-exports': 1,
    'export-administration-act-south-africa': 1
}

# Invoke the decision tree function
prediction, inner_nodes = predict(example_features)
print("Prediction:", prediction)  # Example: 1 (Republican)
print("Inner Node Truth Values:", inner_nodes)  # Example: [0, 1, 0]
```

This implementation fulfills the requirements and aligns with the decision tree structure provided earlier.