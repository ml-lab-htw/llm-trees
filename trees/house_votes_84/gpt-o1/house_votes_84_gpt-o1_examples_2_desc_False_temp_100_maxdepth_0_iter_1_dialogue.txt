


Here is the Python function implementing the decision tree:

```python
def predict(X: dict):
    nodes = [None] * 3  # Initialize list to store node truth values

    # Node 0: Check if 'physician-fee-freeze' vote is 'yes' (encoded as 2)
    nodes[0] = 1 if X['physician-fee-freeze'] == 2 else 0

    if nodes[0]:
        # If Node 0 condition is True, predict Republican
        prediction = 1  # Republican
    else:
        # Node 1: Check if 'adoption-of-the-budget-resolution' vote is 'no' (encoded as 1)
        nodes[1] = 1 if X['adoption-of-the-budget-resolution'] == 1 else 0

        if nodes[1]:
            # If Node 1 condition is True, predict Democrat
            prediction = 0  # Democrat
        else:
            # Node 2: Check if 'el-salvador-adi' vote is 'yes' (encoded as 2)
            nodes[2] = 1 if X['el-salvador-adi'] == 2 else 0

            if nodes[2]:
                # If Node 2 condition is True, predict Republican
                prediction = 1  # Republican
            else:
                # If Node 2 condition is False, predict Democrat
                prediction = 0  # Democrat

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - `'physician-fee-freeze'`: Vote on physician fee freeze (2 = yes, 1 = no)
  - `'adoption-of-the-budget-resolution'`: Vote on adoption of the budget resolution (2 = yes, 1 = no)
  - `'el-salvador-adi'`: Vote on aid to El Salvador (2 = yes, 1 = no)

- **Decision Tree Logic:**
  1. **Node 0:** Check if the vote on physician fee freeze is 'yes'.
     - If **True** (`nodes[0] = 1`), predict **Republican** (`prediction = 1`).
     - If **False** (`nodes[0] = 0`), proceed to Node 1.
  2. **Node 1:** Check if the vote on adoption of the budget resolution is 'no'.
     - If **True** (`nodes[1] = 1`), predict **Democrat** (`prediction = 0`).
     - If **False** (`nodes[1] = 0`), proceed to Node 2.
  3. **Node 2:** Check if the vote on aid to El Salvador is 'yes'.
     - If **True** (`nodes[2] = 1`), predict **Republican** (`prediction = 1`).
     - If **False** (`nodes[2] = 0`), predict **Democrat** (`prediction = 0`).

- **Nodes List:**
  - The `nodes` list keeps track of the truth values of the inner nodes:
    - `nodes[0]`: Result of the condition at Node 0.
    - `nodes[1]`: Result of the condition at Node 1 (evaluated only if `nodes[0]` is 0).
    - `nodes[2]`: Result of the condition at Node 2 (evaluated only if `nodes[1]` is 0).

**Usage Example:**

```python
# Example input dictionary representing a voter's choices
X_example = {
    'handicapped-infants': 2,
    'water-project-cost-sharing': 1,
    'adoption-of-the-budget-resolution': 2,
    'physician-fee-freeze': 2,
    'el-salvador-adi': 1,
    'religious-groups-in-schools': 2,
    'anti-satellite-test-ban': 1,
    'aid-to-nicaraguan-contras': 1,
    'mx-missile': 2,
    'immigration': 2,
    'synfuels-corporation-cutback': 1,
    'education-spending': 2,
    'superfund-right-to-sue': 1,
    'crime': 2,
    'duty-free-exports': 1,
    'export-administration-act-south-africa': 2
}

# Get prediction and node truth values
prediction, nodes = predict(X_example)

print("Prediction:", "Republican" if prediction == 1 else "Democrat")
print("Nodes:", nodes)
```

**Note:**
- Ensure that the input dictionary `X` contains all the required feature keys with the correct encoding as specified.
- The function strictly follows the decision tree provided, using the most important features to classify the party affiliation.