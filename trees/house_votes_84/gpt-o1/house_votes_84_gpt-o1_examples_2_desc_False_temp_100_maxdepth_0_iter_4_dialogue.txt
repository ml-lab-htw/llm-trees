


```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X['physician-fee-freeze'] == 2
    nodes[1] = X['adoption-of-the-budget-resolution'] == 2
    nodes[2] = X['el-salvador-adi'] == 2

    if nodes[0]:
        # Node 0: Physician Fee Freeze Vote == 'Yes'
        prediction = 1  # Republican
    else:
        if nodes[1]:
            # Node 1: Adoption of Budget Resolution Vote == 'Yes'
            prediction = 0  # Democrat
        else:
            if nodes[2]:
                # Node 2: Aid to El Salvador Vote == 'Yes'
                prediction = 1  # Republican
            else:
                prediction = 0  # Democrat
    return prediction, nodes
```

**Explanation:**

- **Feature Encoding:**
  - All votes are encoded as `2 = Yes`, `1 = No`.
  - The target variable `party affiliation` is encoded as `1 = Republican`, `0 = Democrat`.
- **Feature Keys:**
  - `'physician-fee-freeze'`
  - `'adoption-of-the-budget-resolution'`
  - `'el-salvador-adi'` *(Note: Ensure the spelling matches exactly as provided.)*

**Function Details:**

- **nodes[0]:** Checks if the vote on physician fee freeze is `'Yes'`.
  - If `True`, predicts `1` (Republican).
- **nodes[1]:** Checks if the vote on adoption of the budget resolution is `'Yes'`.
  - Evaluated only if `nodes[0]` is `False`.
  - If `True`, predicts `0` (Democrat).
- **nodes[2]:** Checks if the vote on aid to El Salvador is `'Yes'`.
  - Evaluated only if both `nodes[0]` and `nodes[1]` are `False`.
  - If `True`, predicts `1` (Republican).
  - If `False`, predicts `0` (Democrat).

**Usage Example:**

```python
# Example input feature dictionary
X_example = {
    'handicapped-infants': 1,
    'water-project-cost-sharing': 1,
    'adoption-of-the-budget-resolution': 1,
    'physician-fee-freeze': 2,
    'el-salvador-adi': 1,
    'religious-groups-in-schools': 2,
    'anti-satellite-test-ban': 1,
    'aid-to-nicaraguan-contras': 2,
    'mx-missile': 1,
    'immigration': 2,
    'synfuels-corporation-cutback': 1,
    'education-spending': 2,
    'superfund-right-to-sue': 1,
    'crime': 2,
    'duty-free-exports': 1,
    'export-administration-act-south-africa': 2
}

# Predict using the function
prediction, nodes = predict(X_example)
print("Prediction (Party Affiliation):", "Republican" if prediction == 1 else "Democrat")
print("Decision Path Nodes:", nodes)
```

**Output:**
```
Prediction (Party Affiliation): Republican
Decision Path Nodes: [True, False, False]
```

- **Interpretation:**
  - `nodes[0]` is `True` because `'physician-fee-freeze' == 2` (Yes).
  - Since `nodes[0]` is `True`, the prediction is `Republican` (1).
  - Remaining nodes are still evaluated for completeness, but they do not affect the final prediction in this path.

---

This function follows the specified format, returns the prediction along with the list of boolean values representing the truth values of each node in the decision tree.