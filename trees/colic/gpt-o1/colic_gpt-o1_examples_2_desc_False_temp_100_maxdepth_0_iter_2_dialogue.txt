


```python
def predict(X: dict):
    nodes = [0] * 4  # Initialize a list of 4 nodes with default value 0

    # Node 0: Check if Degree of Pain is severe (pain == 2 or pain == 5)
    nodes[0] = 1 if X['pain'] in [2, 5] else 0

    if nodes[0]:
        # Severe pain indicates a surgical lesion
        prediction = 1  # Surgical
    else:
        # Node 1: Check if Degree of Pain is moderate (pain == 3 or pain == 4)
        nodes[1] = 1 if X['pain'] in [3, 4] else 0

        if nodes[1]:
            # Node 2: Check if Abdominal Distension is severe or moderate (abdominal_distension == 1 or 3)
            nodes[2] = 1 if X['abdominal_distension'] in [1, 3] else 0

            if nodes[2]:
                # Moderate pain with significant distension indicates surgery
                prediction = 1  # Surgical
            else:
                # Moderate pain with slight or no distension indicates non-surgical
                prediction = 0  # Non-Surgical
        else:
            # Node 3: Check if Peristalsis is absent or hypomotile (peristalsis == 1 or 3)
            nodes[3] = 1 if X['peristalsis'] in [1, 3] else 0

            if nodes[3]:
                # Mild or no pain but reduced gut sounds indicates surgery
                prediction = 1  # Surgical
            else:
                # Mild or no pain with normal gut sounds indicates non-surgical
                prediction = 0  # Non-Surgical

    return prediction, nodes
```

**Explanation:**

- **Node 0:** Checks if the **Degree of Pain** is severe. In the dataset, severe pain corresponds to `pain` values **2 (continuous severe pain)** and **5 (intermittent severe pain)**. If this condition is true (`nodes[0] = 1`), the function predicts **surgical**.
  
- **Node 1:** If the pain is not severe, it checks if it is **moderate**, corresponding to `pain` values **3 (depressed)** and **4 (intermittent mild pain)**. If true (`nodes[1] = 1`), it proceeds to Node 2.
  
- **Node 2:** Checks if **Abdominal Distension** is severe or moderate (`abdominal_distension` values **1 (moderate)** or **3 (severe)**). If true (`nodes[2] = 1`), it predicts **surgical**; otherwise, **non-surgical**.
  
- **Node 3:** If the pain is mild or none (`pain` value **1 (alert)**), it checks if **Peristalsis** is absent or hypomotile (`peristalsis` values **1 (absent)** or **3 (hypomotile)**). If true (`nodes[3] = 1`), it predicts **surgical**; otherwise, **non-surgical**.

**Feature Encodings Used:**

- `pain` (Degree of Pain):
  - 1: alert
  - 2: continuous severe pain
  - 3: depressed
  - 4: intermittent mild pain
  - 5: intermittent severe pain

- `abdominal_distension` (Abdominal Distension):
  - 1: moderate
  - 2: none
  - 3: severe
  - 4: slight

- `peristalsis` (Peristalsis):
  - 1: absent
  - 2: hypermotile
  - 3: hypomotile
  - 4: normal

**Usage Example:**

```python
# Example input features
X_example = {
    'pain': 2,                   # continuous severe pain
    'abdominal_distension': 3,    # severe
    'peristalsis': 1             # absent
}

# Make prediction
prediction, nodes = predict(X_example)

print(f"Prediction: {'Surgical' if prediction == 1 else 'Non-Surgical'}")
print(f"Nodes evaluated: {nodes}")
```

**Output:**

```
Prediction: Surgical
Nodes evaluated: [1, 0, 0, 0]
```

**Note:** The `nodes` list represents the truth values of the conditions at each decision node:

- `nodes[0]`: 1 if the horse has severe pain, else 0.
- `nodes[1]`: 1 if the horse has moderate pain, else 0.
- `nodes[2]`: 1 if the abdominal distension is severe or moderate, else 0.
- `nodes[3]`: 1 if peristalsis is absent or hypomotile, else 0.

**Assumptions Made:**

- **Degree of Pain Mapping:**
  - **Severe Pain:** `pain` values **2** and **5**.
  - **Moderate Pain:** `pain` values **3** and **4**.
  - **Mild or No Pain:** `pain` value **1**.

- **Abdominal Distension Mapping:**
  - **Severe or Moderate:** `abdominal_distension` values **1** and **3**.
  - **Slight or None:** `abdominal_distension` values **2** and **4**.

- **Peristalsis Mapping:**
  - **Absent or Hypomotile:** `peristalsis` values **1** and **3**.
  - **Normal or Hypermotile:** `peristalsis` values **2** and **4**.

These mappings are based on the feature encodings provided and aim to align with the decision tree logic.