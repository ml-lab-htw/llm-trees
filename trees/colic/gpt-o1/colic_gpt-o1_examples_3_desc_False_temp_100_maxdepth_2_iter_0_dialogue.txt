


Here is the Python function implementing the decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    # Node 0: Degree of Pain is 'none' or 'mild' (codes 1 and 4)
    nodes[0] = int(X['pain'] in [1, 4])

    # Node 1: Pulse (beats per minute) <= 80
    nodes[1] = int(X['pulse'] <= 80)

    if nodes[0]:
        prediction = 0  # Non-Surgical
    else:
        if nodes[1]:
            prediction = 0  # Non-Surgical
        else:
            prediction = 1  # Surgical

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - `pain`: Degree of Pain (1 = alert, 2 = continuous severe pain, 3 = depressed, 4 = intermittent mild pain, 5 = intermittent severe pain)
    - We consider pain codes **1** and **4** as 'none or mild'.
  - `pulse`: Pulse (beats per minute)
    - Threshold at **80** beats per minute.

- **Nodes List:**
  - `nodes[0]`: Indicates whether the horse's degree of pain is 'none' or 'mild'.
    - `nodes[0] = 1` if `pain` is **1** or **4**.
  - `nodes[1]`: Indicates whether the horse's pulse is less than or equal to 80 beats per minute.
    - `nodes[1] = 1` if `pulse` is **≤ 80**.

- **Prediction:**
  - If `nodes[0] == 1` (pain is 'none' or 'mild'), the prediction is **0** (Non-Surgical).
  - Else, check `nodes[1]`:
    - If `nodes[1] == 1` (pulse ≤ 80), the prediction is **0** (Non-Surgical).
    - Else, the prediction is **1** (Surgical).

**Usage Example:**

```python
# Example input data
X = {
    'pain': 2,    # continuous severe pain
    'pulse': 85,  # beats per minute
    # ... other features
}

# Get prediction and nodes
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 1 (Surgical)
print("Nodes:", nodes)            # Output: [0, 0]
```

**Note:** Ensure that the input dictionary `X` contains all the required feature keys with accurate spelling and encoding as specified.