


Based on the provided feature descriptions and encodings, here's the decision tree prediction function:

```python
def predict(X: dict):
    nodes = 7 * [None]
    
    # Node conditions using the exact feature names and proper value encodings
    nodes[0] = X["abdominal_distension"] <= 1  # moderate or less
    nodes[1] = X["pain"] <= 4  # intermittent mild pain or less
    nodes[2] = X["pulse"] <= 80
    nodes[3] = X["packed_cell_volume"] <= 45
    nodes[4] = X["peripheral_pulse"] <= 4  # reduced or worse
    nodes[5] = X["nasogastric_reflux"] >= 2  # none or missing
    nodes[6] = X["peristalsis"] <= 3  # hypomotile or worse

    if nodes[0]:  # abdominal_distension <= moderate
        if nodes[1]:  # pain <= mild
            if nodes[2]:  # pulse <= 80
                prediction = 0  # no surgery
            else:  # pulse > 80
                if nodes[3]:  # packed_cell_volume <= 45
                    prediction = 0  # no surgery
                else:  # packed_cell_volume > 45
                    prediction = 1  # surgery
        else:  # pain > mild
            if nodes[4]:  # peripheral_pulse <= reduced
                prediction = 1  # surgery
            else:  # peripheral_pulse > reduced
                if nodes[5]:  # nasogastric_reflux <= slight
                    prediction = 0  # no surgery
                else:
                    prediction = 1  # surgery
    else:  # abdominal_distension > moderate
        if nodes[6]:  # peristalsis <= hypomotile
            prediction = 1  # surgery
        else:  # peristalsis > hypomotile
            prediction = 0  # no surgery

    return prediction, nodes
```

This function:
1. Takes a dictionary of features as input
2. Creates a list to store the boolean values of node conditions
3. Evaluates