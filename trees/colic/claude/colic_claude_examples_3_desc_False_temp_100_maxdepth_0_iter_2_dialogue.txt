


Based on the provided features and target variable for horse colic lesions, here's a Python function that implements the decision tree classifier:

```python
def predict(X: dict):
    nodes = 7 * [None]
    nodes[0] = X["abdominal_distension"] <= 2  # moderate or less
    nodes[1] = X["pain"] <= 3  # mild or less
    nodes[2] = X["pulse"] <= 60
    nodes[3] = X["capillary_refill_time"] <= 1  # less than 3 seconds
    nodes[4] = X["rectal_temperature"] <= 38.5
    nodes[5] = X["peristalsis"] <= 3  # hypomotile or less
    nodes[6] = X["packed_cell_volume"] <= 45

    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Not Surgical
        else:
            if nodes[2]:
                prediction = 0  # Not Surgical
            else:
                if nodes[3]:
                    prediction = 1  # Surgical
                else:
                    if nodes[4]:
                        prediction = 1  # Surgical
                    else:
                        prediction = 0  # Not Surgical
    else:
        if X["nasogastric_reflux"] <= 2:  # none
            if nodes[5]:
                prediction = 1  # Surgical
            else:
                prediction = 0  # Not Surgical
        else:
            if nodes[6]:
                prediction = 1  # Surgical
            else:
                if X["total_protein"] <= 7.5:
                    prediction = 1  # Surgical
                else:
                    prediction = 0  # Not Surgical

    return prediction, [int(node) if node is not None else None for node in nodes]
```

This function takes a dictionary `X` containing the feature values and returns a tuple with two elements:
1. The prediction: 0 for "Not Surgical" and 1 for "Surgical"
2. A list representing the truth values of the inner nodes (1