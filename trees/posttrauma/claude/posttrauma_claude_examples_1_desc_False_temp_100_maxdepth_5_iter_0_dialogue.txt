


Based on the provided features and target variable, I'll create a decision tree function that predicts pain and disability outcome (0 = good, 1 = bad) at 6 months following musculoskeletal trauma. Here's the implementation:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # Node 0: Check pain intensity (worst)
    nodes[0] = X['bl_cpgs_intensity_worst'] <= 7.5
    
    # Node 1: Check PSEQ total
    nodes[1] = X['pseq_total'] <= 35
    
    # Node 2: Check pain extent
    nodes[2] = X['pe_total_percent_baseline'] <= 15
    
    # Node 3: Check HADS depression score
    nodes[3] = X['hads_dep_score'] <= 8
    
    # Node 4: Check injury severity score
    nodes[4] = X['iss_score'] <= 12

    if nodes[0]:  # Lower worst pain intensity
        if nodes[1]:  # Lower pain self-efficacy
            if nodes[2]:  # Lower pain extent
                if nodes[3]:  # Lower depression
                    if nodes[4]:  # Lower injury severity
                        prediction = 0  # Good outcome
                    else:
                        prediction = 1  # Bad outcome
                else:
                    prediction = 1  # Bad outcome
            else:
                prediction = 1  # Bad outcome
        else:  # Higher pain self-efficacy
            prediction = 0  # Good outcome
    else:  # Higher worst pain intensity
        if nodes[3]:  # Lower depression
            if nodes[1]:  # Lower pain self-efficacy
                prediction = 1  # Bad outcome
            else:
                prediction = 0  # Good outcome
        else:
            prediction = 1  # Bad outcome

    return prediction, nodes
```

This decision tree focuses on key predictors of pain and disability outcomes:
1. Worst pain intensity as the primary split (higher intensity suggesting worse outcomes)
2. Pain Self-Efficacy Questionnaire (PSE