


```python
def predict(X: dict):
    nodes = [None] * 2  # Initialize a list to store truth values of inner nodes

    # Node 0: Check if Official Judge is 'No' (0)
    nodes[0] = X['Official'] == 0  # Condition: Official == 0 (No)

    if nodes[0]:
        prediction = 1  # de la Hoya
    else:
        # Node 1: Check if Round is less than or equal to 9
        nodes[1] = X['Round'] <= 9  # Condition: Round <= 9

        if nodes[1]:
            prediction = 1  # de la Hoya
        else:
            prediction = 0  # Trinidad

    # Convert boolean truth values to integers (1 for True, 0 for False)
    nodes = [int(node) if node is not None else 0 for node in nodes]

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - `'Official'`: Encoded as 1 (Yes) and 0 (No)
  - `'Round'`: Values from 1 to 12

- **Decision Logic:**
  - **Node 0:** Checks if the judge is not official (`Official == 0`). If true, predicts **de la Hoya** (1).
    - **Condition:** `X['Official'] == 0`
  - **Node 1:** If the judge is official (`Official == 1`), checks if the round is less than or equal to 9.
    - **Condition:** `X['Round'] <= 9`
    - If true, predicts **de la Hoya** (1).
    - Else, predicts **Trinidad** (0).

- **Nodes List:**
  - Contains the truth values (1 or 0) of the conditions at each node.
  - `nodes[0]`: Result of `Official == 0`
  - `nodes[1]`: Result of `Round <= 9` (only evaluated if `nodes[0]` is False)

- **Prediction:**
  - Returns the predicted class (0 or 1) and the list of node truth values.

**Usage Example:**

```python
# Example input where the judge is not official and it's round 5
X_example = {'Judge': 3, 'Official': 0, 'Round': 5}
prediction, nodes = predict(X_example)
print(f"Prediction: {prediction}")  # Output: Prediction: 1 (de la Hoya)
print(f"Nodes: {nodes}")            # Output: Nodes: [1, 0]

# Example input where the judge is official and it's round 10
X_example = {'Judge': 2, 'Official': 1, 'Round': 10}
prediction, nodes = predict(X_example)
print(f"Prediction: {prediction}")  # Output: Prediction: 0 (Trinidad)
print(f"Nodes: {nodes}")            # Output: Nodes: [0, 0]
```

**Note:** Ensure that the input dictionary `X` contains the keys `'Judge'`, `'Official'`, and `'Round'` with correctly encoded values as described.