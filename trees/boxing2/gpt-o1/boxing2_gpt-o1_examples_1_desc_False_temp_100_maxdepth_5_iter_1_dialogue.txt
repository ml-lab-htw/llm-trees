


```python
def predict(X: dict):
    nodes = [None] * 3  # Initialize list to hold truth values of inner nodes

    # Node 0: Check if Round <= 6
    nodes[0] = int(X['Round'] <= 6)
    if nodes[0]:
        # If Round <= 6, predict De la Hoya (1)
        prediction = 1
    else:
        # Node 1: Check if Official == 1 (Yes)
        nodes[1] = int(X['Official'] == 1)
        if nodes[1]:
            # If Official Judge and Round > 6, predict Trinidad (0)
            prediction = 0
        else:
            # Node 2: Check if Judge is in [3, 6, 7]
            # Judges:
            # 3 = HBO-Lederman
            # 6 = USA Today
            # 7 = Associated Press
            nodes[2] = int(X['Judge'] in [3, 6, 7])
            if nodes[2]:
                # If Judge is one of the specified and not an official judge, predict De la Hoya (1)
                prediction = 1
            else:
                # If Judge is not one of the specified and not an official judge, predict Trinidad (0)
                prediction = 0

    return prediction, nodes
```

**Explanation:**

- **Features Used:**
  - `'Judge'`: Encoded as integers from 0 to 10.
  - `'Official'`: Encoded as 1 (Yes) or 0 (No).
  - `'Round'`: Integer from 1 to 12.

- **Nodes and Conditions:**
  - `nodes[0]`: Checks if the round number is less than or equal to 6.
    - If **True** (`1`), predicts **De la Hoya** (`1`).
  - If `nodes[0]` is **False** (`0`), proceeds to `nodes[1]`.
    - `nodes[1]`: Checks if the judge is an official judge (`Official` == `1`).
      - If **True** (`1`), predicts **Trinidad** (`0`).
      - If **False** (`0`), proceeds to `nodes[2]`.
        - `nodes[2]`: Checks if the judge is in the specified list `[3, 6, 7]`, which corresponds to:
          - `3`: HBO-Lederman
          - `6`: USA Today
          - `7`: Associated Press
        - If **True** (`1`), predicts **De la Hoya** (`1`).
        - If **False** (`0`), predicts **Trinidad** (`0`).

- **Output:**
  - `prediction`: The predicted winner of the round (`0` = Trinidad, `1` = De la Hoya).
  - `nodes`: A list containing the truth values (`1` for True, `0` for False) of the evaluated conditions in the nodes.

**Example Usage:**

```python
# Sample input where Round is 7, Official is 0 (No), and Judge is 3 (HBO-Lederman)
X_sample = {'Judge': 3, 'Official': 0, 'Round': 7}

prediction, nodes = predict(X_sample)
print(f"Prediction: {prediction}")  # Output: Prediction: 1
print(f"Nodes: {nodes}")            # Output: Nodes: [0, 0, 1]
```

In this example:
- `nodes[0] = 0` because `Round` (7) is not less than or equal to 6.
- `nodes[1] = 0` because `Official` is `0` (No).
- `nodes[2] = 1` because `Judge` is in `[3, 6, 7]`.
- The model predicts `1`, which corresponds to **De la Hoya**.