


Here is the decision tree formatted as a Python function:

```python
def predict(X: dict):
    nodes = [None] * 4  # Initialize a list to store node outcomes
    nodes[0] = int(X["Round"] <= 6.5)  # Node 0: Round <= 6.5

    if nodes[0]:  # If Round <= 6.5
        nodes[1] = int(X["Judge"] <= 5)  # Node 1: Judge <= 5
        if nodes[1]:  # If Judge <= 5
            prediction = 1  # De La Hoya wins
        else:  # If Judge > 5
            prediction = 0  # Trinidad wins
        nodes[2] = None  # Nodes not evaluated in this path
        nodes[3] = None
    else:  # If Round > 6.5
        nodes[1] = None  # Node not evaluated in this path
        nodes[2] = int(X["Official"] == 1)  # Node 2: Official == yes
        if nodes[2]:  # If Official == yes
            nodes[3] = int(X["Round"] <= 9.5)  # Node 3: Round <= 9.5
            if nodes[3]:  # If Round <= 9.5
                prediction = 0  # Trinidad wins
            else:  # If Round > 9.5
                prediction = 1  # De La Hoya wins
        else:  # If Official == no
            nodes[3] = None  # Node not evaluated in this path
            prediction = 1  # De La Hoya wins

    return prediction, nodes
```

**Explanation:**

- **Nodes List:** This list keeps track of whether each condition in the decision tree is satisfied (`1`) or not (`0`). If a node is not evaluated (because the path didn't reach that node), it is set to `None`.
  
- **Conditions:**

  - **Node 0:** Checks if the `Round` is less than or equal to 6.5.
  - **Node 1:** If Node 0 is `True`, checks if the `Judge` is less than or equal to 5.
  - **Node 2:** If Node 0 is `False`, checks if `Official` is equal to 1 (`yes`).
  - **Node 3:** If Node 2 is `True`, checks if the `Round` is less than or equal to 9.5.

- **Predictions:**

  - **If** `Round <= 6.5` **and** `Judge <= 5` **⇒** De La Hoya wins (`prediction = 1`).
  - **If** `Round <= 6.5` **and** `Judge > 5` **⇒** Trinidad wins (`prediction = 0`).
  - **If** `Round > 6.5` **and** `Official == 1` **and** `Round <= 9.5` **⇒** Trinidad wins (`prediction = 0`).
  - **If** `Round > 6.5` **and** `Official == 1` **and** `Round > 9.5` **⇒** De La Hoya wins (`prediction = 1`).
  - **If** `Round > 6.5` **and** `Official == 0` **⇒** De La Hoya wins (`prediction = 1`).

**Usage Example:**

```python
# Sample input feature dictionary
X_sample = {
    "Judge": 4,       # For example, Los Angeles Times-Kawakami (coded as 5)
    "Official": 1,    # Yes
    "Round": 7        # Round 7
}

# Get prediction and node evaluations
prediction, nodes = predict(X_sample)

# Output
print(f"Prediction: {prediction} ({'De La Hoya' if prediction == 1 else 'Trinidad'})")
print(f"Nodes: {nodes}")
```

**Note:** This decision tree uses meaningful thresholds for `Round` and `Judge` to reach a maximum depth of 4, as requested. The thresholds have been chosen to split the data based on critical points that might reflect changes in the fight dynamics.