


Based on the provided feature specifications and target encoding, here's the decision tree implemented as a Python function:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Check if judge is HBO-Lederman (Judge code 3)
    nodes[0] = X["Judge"] == 3
    # Check if round is in first half of fight
    nodes[1] = X["Round"] <= 6
    # Check if it's an official judge
    nodes[2] = X["Official"] == 1
    
    if nodes[0]:  # HBO-Lederman
        if nodes[1]:  # Round <= 6
            prediction = 1  # de la Hoya
        else:  # Round > 6
            prediction = 0  # Trinidad
    else:  # Not HBO-Lederman
        if nodes[2]:  # Official judge
            prediction = 0  # Trinidad
        else:  # Non-official judge
            prediction = 1  # de la Hoya
            
    return prediction, nodes
```

This function:
1. Takes a dictionary `X` with the features as input
2. Creates a list of 3 boolean values representing the conditions at each inner node
3. Returns:
   - prediction: 0 for Trinidad, 1 for de la Hoya
   - nodes: list of boolean values for the inner nodes

The decision rules are based on:
- Whether the judge is HBO-Lederman (Judge = 3)
- Whether it's an early round (Round â‰¤ 6)
- Whether it's an official judge (Official = 1)