


Based on the provided feature specifications and target encoding, here's the decision tree as a Python function:

```python
def predict(X: dict):
    nodes = 4 * [None]  # Create list for storing node decisions
    
    # Define decision nodes
    nodes[0] = X["Judge"] == 3  # Is it HBO-Lederman?
    nodes[1] = X["Round"] <= 6  # Early rounds
    nodes[2] = X["Official"] == 1  # Is it an official judge?
    nodes[3] = X["Round"] <= 8  # Mid-rounds
    
    # Tree logic
    if nodes[0]:  # HBO-Lederman
        if nodes[1]:  # Round <= 6
            prediction = 1  # de la Hoya
        else:  # Round > 6
            prediction = 0  # Trinidad
    else:  # Not HBO-Lederman
        if nodes[2]:  # Official judge
            if nodes[3]:  # Round <= 8
                prediction = 1  # de la Hoya
            else:  # Round > 8
                prediction = 0  # Trinidad
        else:  # Not official judge
            if X["Judge"] == 5:  # Los Angeles Times-Kawakami
                prediction = 1  # de la Hoya
            else:
                prediction = 0  # Trinidad
    
    return prediction, nodes
```

This function:
- Takes a dictionary `X` with the features as input
- Uses the exact feature names provided
- Returns a tuple containing:
  - prediction (0 for Trinidad, 1 for de la Hoya)
  - list of boolean values for each decision node
- Implements the decision tree logic based on the specified encodings
- Uses reasonable thresholds based on the round numbers
- Follows the pattern of the example provided

The nodes represent:
1. Whether the judge is HBO-Lederman
2. Whether it's an early round (â‰¤6)
3. Whether it's an official judge
4. Whether it's before or during round 8