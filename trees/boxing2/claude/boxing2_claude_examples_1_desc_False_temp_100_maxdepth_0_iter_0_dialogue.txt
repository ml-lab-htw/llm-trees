


Based on the provided feature specifications, I'll create a decision tree function that uses the correct feature names and value ranges. Here's the implementation:

```python
def predict(X: dict):
    nodes = 4 * [None]  # Create list for storing node decisions
    
    # Decision nodes
    nodes[0] = X["Official"] <= 0
    nodes[1] = X["Judge"] == 3  # HBO-Lederman
    nodes[2] = X["Round"] <= 6
    nodes[3] = X["Judge"] == 1  # B. Logist
    
    # Tree logic
    if nodes[0]:  # Non-official judges
        if nodes[1]:  # HBO-Lederman
            if nodes[2]:  # First 6 rounds
                prediction = 1  # de la Hoya
            else:
                prediction = 0  # Trinidad
        else:
            prediction = 0  # Trinidad
    else:  # Official judges
        if nodes[2]:  # First 6 rounds
            prediction = 1  # de la Hoya
        else:
            if nodes[3]:  # B. Logist
                prediction = 1  # de la Hoya
            else:
                prediction = 0  # Trinidad
    
    return prediction, nodes
```

This implementation:
1. Uses only the provided feature names: 'Judge', 'Official', 'Round'
2. Follows the correct encoding (0 = Trinidad, 1 = de la Hoya)
3. Uses appropriate thresholds based on the feature descriptions
4. Returns both the prediction and the list of node decisions
5. Considers the real-world context of the fight where:
   - Official vs non-official judges might score differently
   - Early rounds (1-6) vs later rounds might favor different fighters
   - Specific judges (like HBO-Lederman and B. Logist) might have distinct scoring patterns