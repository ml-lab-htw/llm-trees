


Based on the provided information and the requested format, here's the Python function that implements the decision tree for predicting which boxer won each round:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["Judge"] <= 2  # G. Hamada, B. Logist, J. Roth
    nodes[1] = X["Round"] <= 6
    nodes[2] = X["Official"] <= 0.5
    nodes[3] = X["Round"] <= 9
    nodes[4] = X["Judge"] == 3  # HBO-Lederman

    if nodes[0]:
        if nodes[1]:
            if nodes[2]:
                prediction = 1  # de la Hoya
            else:
                prediction = 0  # Trinidad
        else:
            prediction = 0  # Trinidad
    else:
        if nodes[3]:
            prediction = 1  # de la Hoya
        else:
            if nodes[4]:
                prediction = 1  # de la Hoya
            else:
                prediction = 0  # Trinidad

    return prediction, [int(node) if node is not None else None for node in nodes]
```

Explanation:
1. The function takes a dictionary `X` with the features as input.
2. It creates a list `nodes` to store the boolean values of each decision node.
3. The decision tree is implemented using nested if-else statements based on the feature thresholds.
4. The prediction is made according to the path through the tree (0 for Trinidad, 1 for de la Hoya).
5. The function returns both the prediction and the list of node values (converted to integers, with None for unused nodes).

This implementation reflects the decision tree structure described earlier, with some adjustments to fit the exact feature keys and encodings provided. The thresholds for rounds (6 and 9) are used as integer values to split the rounds into early, middle, and late fight periods.