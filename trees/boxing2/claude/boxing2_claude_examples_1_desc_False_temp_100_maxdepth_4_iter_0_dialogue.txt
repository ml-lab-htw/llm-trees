


Based on the provided feature encodings and target variable mapping, I'll create a Python function for the decision tree classifier. The tree will implement the logic we discussed, with nodes checking for the HBO-Lederman judge (Judge == 3), Official status, and Round number.

```python
def predict(X: dict):
    # Initialize nodes list for storing boolean values of conditions
    nodes = 4 * [None]
    
    # Define the conditions for each node
    nodes[0] = X["Judge"] == 3  # Is it HBO-Lederman?
    nodes[1] = X["Round"] <= 6  # Early rounds check
    nodes[2] = X["Official"] == 1  # Is it an official judge?
    nodes[3] = X["Round"] <= 8  # Mid-rounds check
    
    # Tree logic
    if nodes[0]:  # HBO-Lederman
        if nodes[1]:  # Round <= 6
            prediction = 1  # de la Hoya
        else:  # Round > 6
            prediction = 0  # Trinidad
    else:  # Not HBO-Lederman
        if nodes[2]:  # Official judge
            if nodes[3]:  # Round <= 8
                prediction = 1  # de la Hoya
            else:  # Round > 8
                prediction = 0  # Trinidad
        else:  # Unofficial judge
            prediction = 1  # de la Hoya
    
    return prediction, nodes
```

This implementation:
- Takes a dictionary X with the features as keys
- Returns a tuple containing:
  - prediction (0 for Trinidad, 1 for de la Hoya)
  - list of boolean values for each decision node
- Uses the exact feature names provided
- Implements the decision logic based on judge identity, round number, and official status
- Maintains the specified encoding (0 = Trinidad, 1 = de la Hoya)
- Uses reasonable thresholds based on the fight narrative (rounds 6 and 8 as decision points)