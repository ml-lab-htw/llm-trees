


Based on the provided feature specifications and target encoding, here's the decision tree as a Python function:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["Judge"] == 0  # Is it Judge Hamada?
    nodes[1] = X["Round"] <= 6  # Early rounds?
    nodes[2] = X["Official"] == 1  # Is it an official judge?
    
    if nodes[0]:  # Judge Hamada
        if nodes[1]:  # Round <= 6
            prediction = 1  # de la Hoya
        else:  # Round > 6
            prediction = 0  # Trinidad
    else:  # Not Judge Hamada
        if nodes[2]:  # Official judge
            prediction = 0  # Trinidad
        else:  # Not official judge
            prediction = 1  # de la Hoya

    return prediction, nodes
```

This function:
- Takes a dictionary X with the features 'Judge', 'Official', and 'Round'
- Returns a tuple containing:
  1. The prediction (0 for Trinidad, 1 for de la Hoya)
  2. A list of boolean values representing the condition at each node
- Uses the exact feature names and encodings provided
- Has three decision nodes that match the structure of the previously defined tree
- Uses sensible thresholds based on the domain knowledge of the fight

The decision rules use:
- Judge encoding (0 for Hamada)
- Round numbers (1-12, with split at round 6)
- Official judge encoding (1 for Yes, 0 for No)