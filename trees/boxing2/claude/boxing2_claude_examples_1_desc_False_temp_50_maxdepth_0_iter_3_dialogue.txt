


Based on the provided features and target encoding, I'll create a decision tree prediction function that determines whether Trinidad (0) or de la Hoya (1) won each round.

```python
def predict(X: dict):
    # Initialize nodes list for storing boolean conditions
    nodes = 4 * [None]
    
    # Define the decision nodes
    nodes[0] = X["Official"] <= 0  # Is it not an official judge?
    nodes[1] = X["Judge"] == 3     # Is it HBO-Lederman?
    nodes[2] = X["Judge"] == 7     # Is it Associated Press?
    nodes[3] = X["Round"] <= 6     # Is it in the first half of the fight?

    # Decision tree logic
    if nodes[0]:  # Not an official judge
        if nodes[1]:  # HBO-Lederman
            prediction = 1  # de la Hoya
        else:
            if nodes[2]:  # Associated Press
                prediction = 1  # de la Hoya
            else:
                prediction = 0  # Trinidad
    else:  # Official judge
        if nodes[3]:  # First 6 rounds
            prediction = 1  # de la Hoya
        else:
            prediction = 0  # Trinidad

    return prediction, nodes
```

This decision tree implements the following logic:
1. First checks if it's an official judge
2. For unofficial judges:
   - If it's HBO-Lederman, predicts de la Hoya
   - If it's Associated Press, predicts de la Hoya
   - Otherwise predicts Trinidad
3. For official judges:
   - If it's in the first 6 rounds, predicts de la Hoya
   - If it's in the later rounds (7-12), predicts Trinidad

The function returns both:
1. The prediction (0 for Trinidad, 1 for de la Hoya)
2. A list of boolean values representing the state of each decision node

This implementation uses the exact feature names and encodings provided, and maintains the target encoding where 0 = Trinidad and 1 = de la Hoya.