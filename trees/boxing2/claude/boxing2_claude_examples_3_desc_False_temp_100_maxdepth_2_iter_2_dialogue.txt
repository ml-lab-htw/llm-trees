


Based on the decision tree I provided earlier and the given format, here's the Python function that predicts which boxer won each round and returns the truth values of the inner nodes:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["Official"] <= 0.5
    nodes[1] = X["Round"] <= 6.5
    nodes[2] = X["Judge"] == 0  # 0 represents G. Hamada
    
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # de la Hoya
        else:
            prediction = 0  # Trinidad
    else:
        if nodes[2]:
            prediction = 0  # Trinidad
        else:
            prediction = 1  # de la Hoya
    
    return prediction, nodes
```

This function follows the decision tree structure we discussed earlier:

1. The first split is based on whether the judge is official or not (Official <= 0.5).
2. For non-official judges (Official <= 0.5):
   - If it's the first half of the fight (Round <= 6.5), it predicts de la Hoya (1).
   - Otherwise, it predicts Trinidad (0).
3. For official judges (Official > 0.5):
   - If the judge is G. Hamada (Judge == 0), it predicts Trinidad (0).
   - Otherwise, it predicts de la Hoya (1).

The function returns a tuple containing:
1. The prediction (0 for Trinidad, 1 for de la Hoya)
2. A list of 3 boolean values representing the truth values of the inner nodes

This implementation adheres to the feature keys and encodings provided, and follows the structure of the example functions given.