


Here is the decision tree formatted as a Python function based on your specifications:

```python
def predict(X: dict):
    """
    Predict which boxer won the round (0 = Trinidad, 1 = de la Hoya) based on input features.
    
    Parameters:
    X (dict): A dictionary containing the features:
        - "Judge" (int): Judge (0 = G. Hamada, 1 = B. Logist, ..., 10 = van de Wiele)
        - "Official" (int): Whether the judge is official (1 = Yes, 0 = No)
        - "Round" (int): Round number (1 to 12)
    
    Returns:
    tuple: A tuple containing:
        - prediction (int): Predicted winner (0 = Trinidad, 1 = de la Hoya)
        - nodes (list): A list of truth values for the inner nodes of the decision tree
    """
    nodes = 2 * [None]
    
    # Node 0: Is the judge official?
    nodes[0] = X["Official"] == 1
    
    if nodes[0]:  # If the judge is official
        # Node 1: Is the judge G. Hamada?
        nodes[1] = X["Judge"] == 0
        if nodes[1]:  # If the judge is G. Hamada
            prediction = 0  # Trinidad
        else:  # If the judge is not G. Hamada
            prediction = 1  # de la Hoya
    else:  # If the judge is not official
        prediction = 1  # de la Hoya
    
    return prediction, nodes
```

### Explanation of the Code:
1. **Input**: The function takes a dictionary `X` with the keys `"Judge"`, `"Official"`, and `"Round"`. Each key's value is an integer representing the corresponding feature.
2. **Nodes**: A list `nodes` is used to store the truth values of the inner nodes in the decision tree.
   - `nodes[0]`: Whether the judge is official (`X["Official"] == 1`).
   - `nodes[1]`: Whether the judge is G. Hamada (`X["Judge"] == 0`).
3. **Decision Tree Logic**:
   - If the judge is not official (`nodes[0] == False`), the prediction is `1` (de la Hoya).
   - If the judge is official (`nodes[0] == True`), the decision depends on the judge:
     - If the judge is G. Hamada (`nodes[1] == True`), the prediction is `0` (Trinidad).
     - Otherwise (`nodes[1] == False`), the prediction is `1` (de la Hoya).
4. **Output**: The function returns a tuple containing:
   - `prediction`: The predicted winner (0 = Trinidad, 1 = de la Hoya).
   - `nodes`: A list of truth values for the inner nodes.

### Example Usage:
```python
# Example input
X = {
    "Judge": 0,       # G. Hamada
    "Official": 1,    # Yes
    "Round": 5        # Round 5
}

# Predict the winner and get the truth values of the nodes
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 0 (Trinidad)
print("Nodes:", nodes)            # Output: [True, True]
```

### Explanation of Example:
- `X["Official"] == 1`: The judge is official (`nodes[0] == True`).
- `X["Judge"] == 0`: The judge is G. Hamada (`nodes[1] == True`).
- Based on the decision tree, the prediction is `0` (Trinidad).