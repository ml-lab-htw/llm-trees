


Here is the Python function for the decision tree you described, formatted to return a single prediction and a list of truth values for the inner nodes:

```python
def predict(X: dict):
    """
    Predicts the winner of a boxing round based on the decision tree.

    Parameters:
    X (dict): A dictionary containing the features:
        - 'Judge': int (0 = G. Hamada, 1 = B. Logist, 2 = J. Roth, 3 = HBO-Lederman, 4 = Sportsticker,
                        5 = Los Angeles Times-Kawakami, 6 = USA Today, 7 = Associated Press,
                        8 = Las Vegas Review-Journal, 9 = Los Angeles Times-Springer, 10 = van de Wiele)
        - 'Official': int (1 = Yes, 0 = No)
        - 'Round': int (1 to 12)

    Returns:
    tuple: (prediction, nodes)
        - prediction: int (0 = Trinidad, 1 = de la Hoya)
        - nodes: list of int (1 if the condition of the corresponding inner node is satisfied, 0 otherwise)
    """
    nodes = 2 * [None]
    
    # Node 0: Check if the judge is in the first group (favoring Trinidad)
    nodes[0] = X["Judge"] in {0, 1, 2, 3, 4}  # G. Hamada, B. Logist, J. Roth, HBO-Lederman, Sportsticker
    
    if nodes[0]:  # If the judge is in the first group
        prediction = 0  # Trinidad
    else:  # If the judge is in the second group
        # Node 1: Check if the judge is an official judge
        nodes[1] = X["Official"] == 1  # Official judge
        
        if nodes[1]:  # If the judge is official
            prediction = 1  # de la Hoya
        else:  # If the judge is not official
            prediction = 0  # Trinidad

    return prediction, nodes
```

### Explanation of the Code:
1. **Input**: The function takes a dictionary `X` with the keys `'Judge'`, `'Official'`, and `'Round'`. These correspond to the features described in the problem.
2. **Nodes**: A list `nodes` is used to store the truth values of the inner nodes of the decision tree:
   - `nodes[0]`: Checks if the judge is in the first group (favoring Trinidad).
   - `nodes[1]`: Checks if the judge is an official judge.
3. **Logic**:
   - If `nodes[0]` is `True`, the prediction is `0` (Trinidad).
   - If `nodes[0]` is `False`, the function evaluates `nodes[1]`:
     - If `nodes[1]` is `True`, the prediction is `1` (de la Hoya).
     - If `nodes[1]` is `False`, the prediction is `0` (Trinidad).
4. **Output**: The function returns a tuple:
   - `prediction`: The predicted winner of the round (0 = Trinidad, 1 = de la Hoya).
   - `nodes`: A list of truth values for the inner nodes.

### Example Usage:
```python
# Example input
X = {
    "Judge": 5,       # Los Angeles Times-Kawakami
    "Official": 1,    # Yes
    "Round": 3        # Round 3
}

# Predict
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 1 (de la Hoya)
print("Nodes:", nodes)            # Output: [False, True]
```

### Explanation of the Example:
- `Judge = 5` (Los Angeles Times-Kawakami) is not in the first group, so `nodes[0] = False`.
- `Official = 1` (Yes), so `nodes[1] = True`.
- Since `nodes[0] = False` and `nodes[1] = True`, the prediction is `1` (de la Hoya).