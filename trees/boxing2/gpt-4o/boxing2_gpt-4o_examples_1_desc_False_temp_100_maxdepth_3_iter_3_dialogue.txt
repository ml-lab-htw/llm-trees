


```python
def predict(X: dict):
    # Initialize a list to store the truth values of the inner nodes
    nodes = 4 * [None]
    
    # Node 1: Check if the judge is an official judge
    nodes[0] = X["Official"] == 1
    
    # If the judge is official
    if nodes[0]:
        # Node 2: Check if the judge is one of the three key official judges (G. Hamada, B. Logist, J. Roth)
        nodes[1] = X["Judge"] in [0, 1, 2]
        
        if nodes[1]:
            # Node 3: Check if the round is in the first half (1-6)
            nodes[2] = X["Round"] <= 6
            if nodes[2]:
                prediction = 1  # de la Hoya won the round
            else:
                prediction = 0  # Trinidad won the round
        else:
            prediction = 0  # Trinidad won the round for other official judges
    # If the judge is NOT official
    else:
        # Node 4: Check if the judge is from a prominent media outlet (HBO-Lederman, USA Today, Associated Press)
        nodes[3] = X["Judge"] in [3, 6, 7]
        
        if nodes[3]:
            # Check if the round is in the first 8 rounds
            if X["Round"] <= 8:
                prediction = 1  # de la Hoya won the round
            else:
                prediction = 0  # Trinidad won the round
        else:
            prediction = 0  # Trinidad won the round for other non-official judges

    # Return the prediction and the list of truth values for the inner nodes
    return prediction, nodes
```

### Explanation of the function:

1. **Input**: `X` is a dictionary where the keys are feature names (`"Judge"`, `"Official"`, and `"Round"`), and the values are the corresponding feature values for a given round.
   
2. **Nodes**: 
   - `nodes` is a list that tracks the truth values of the inner nodes (conditions). This helps in understanding which conditions were satisfied during the prediction process.
   
3. **Logic**:
   - **Node 1** checks whether the judge is an official judge.
   - **Node 2** checks if the official judge is one of the three key official judges: G. Hamada (0), B. Logist (1), or J. Roth (2).
   - **Node 3** checks whether the round is in the first half (rounds 1-6), where de la Hoya is assumed to have performed better.
   - **Node 4** checks if the non-official judge is from some prominent media outlets: HBO-Lederman (3), USA Today (6), or Associated Press (7).
   
4. **Predictions**:
   - The target variable is binary: `0` for Trinidad, `1` for de la Hoya.
   - The tree is structured based on the assumption that de la Hoya won more of the early rounds, while Trinidad came back in the later rounds. Judges also have a strong influence on the outcome, with official judges being more important than non-official ones.

### Sample Input:

```python
X = {
    "Judge": 0,        # G. Hamada
    "Official": 1,     # Yes, official judge
    "Round": 5         # Round 5
}

prediction, nodes = predict(X)
print(prediction)  # Output: 1 (de la Hoya won)
print(nodes)       # Output: [True, True, True, None]
```

This setup mimics a decision tree with a maximum depth of 3, and the conditions are selected carefully based on the importance of the features and the context of the boxing match's scoring.