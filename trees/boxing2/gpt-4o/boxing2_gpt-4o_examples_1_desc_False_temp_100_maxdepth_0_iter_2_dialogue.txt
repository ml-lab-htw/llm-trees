


```python
def predict(X: dict):
    nodes = 3 * [None]  # Create list for storing node decisions

    # Decision nodes
    nodes[0] = X["Official"] == 1
    nodes[1] = X["Judge"] == 2  # J. Roth
    nodes[2] = X["Judge"] == 1  # B. Logist

    # Tree logic
    if not nodes[0]:  # Non-official judge
        if X["Judge"] == 3:  # HBO-Lederman
            prediction = 1  # de la Hoya
        elif X["Judge"] == 7:  # Associated Press
            prediction = 1  # de la Hoya
        else:
            prediction = 0  # Trinidad
    else:  # Official judge
        if not nodes[1]:  # Not J. Roth
            if not nodes[2]:  # Not B. Logist
                prediction = 0  # Trinidad
            else:
                prediction = 1  # de la Hoya
        else:
            prediction = 1  # de la Hoya

    return prediction, nodes
```

### Explanation of the code:
1. **Node 0** checks whether the judge is an official judge (`Official == 1`). This is crucial because official judges may be bound by stricter guidelines.
  
2. **Node 1** further checks if the judge is one of the official judges who historically favored de la Hoya (those are indexed as `0`, `1`, `2`, and `10`, representing G. Hamada, B. Logist, J. Roth, and van de Wiele).

3. The decision-making process:
   - If the judge is official and one of the official judges who favored de la Hoya, the prediction is `1` (de la Hoya).
   - If the judge is official but didn't favor de la Hoya, the prediction is `0` (Trinidad).
   - If the judge is unofficial, the prediction defaults to `0` (Trinidad).

4. The function returns both the **prediction** (either `0` for Trinidad or `1` for de la Hoya) and the **truth values** of the inner nodes in a list, which indicate whether each condition was met.
