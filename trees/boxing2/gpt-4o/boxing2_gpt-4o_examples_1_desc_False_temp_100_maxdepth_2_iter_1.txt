Based on the Features, I will create a decision tree with a maximum depth of 2. The decision tree will have between 2 and 3 inner nodes, and the most important features will be used to predict the target (which fighter won the round).

### Features:
- **Judge**: Identifier for the judge scoring the round. (0 = G. Hamada, 1 = B. Logist, ..., 10 = van de Wiele)
- **Official**: Whether the judge is an official judge or not. (1 = Yes, 0 = No)
- **Round**: The round number in the boxing match (from 1 to 12).

### Target Variable:
- **target**: Which of the two fighters won the round. (0 = Trinidad, 1 = de la Hoya)

### Decision Tree:
Given that we have three features (Judge, Official, and Round), I will select the most important features to form the decision tree. I'll assume that the **Judge** plays a significant role in determining the decision, followed by whether the judge is **Official** or not.

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node 0: Check if the judge is less than or equal to 5 (i.e., from a specific set of judges)
    nodes[0] = X["Judge"] <= 5
    
    # Node 1: Check if the judge is official
    nodes[1] = X["Official"] == 1
    
    # Decision logic
    if nodes[0]:
        if nodes[1]:
            prediction = 1  # de la Hoya wins
        else:
            prediction = 0  # Trinidad wins
    else:
        prediction = 0  # Trinidad wins

    return prediction, nodes
```

### Explanation:
1. **Node 0** checks whether the judge's identifier is 5 or less (i.e., one of the first six judges in the list). This is an arbitrary split to simulate how different judges may have biases.
2. **Node 1** checks whether the judge is an official judge. If the judge is official and falls into the first group of judges, they tend to favor fighter 1 (de la Hoya). Otherwise, the decision defaults to fighter 0 (Trinidad).

### Example Usage:

```python
# Example input
X = {
    "Judge": 2,        # Judge B. Logist
    "Official": 1,     # Official judge
    "Round": 8         # Round 8
}

# Get prediction and decision path
prediction, nodes = predict(X)

print(f"Prediction: {prediction}")  # Expected output: 1 (de la Hoya)
print(f"Decision Path: {nodes}")    # Expected output: [True, True]
```
