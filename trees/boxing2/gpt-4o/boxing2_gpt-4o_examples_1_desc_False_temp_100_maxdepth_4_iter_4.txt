Here is a decision tree with a maximum depth of 4 based on the Features and prediction target you provided:

### Features:
- **Judge**: (0 = G. Hamada, 1 = B. Logist, 2 = J. Roth, 3 = HBO-Lederman, 4 = Sportsticker, 5 = Los Angeles Times-Kawakami, 6 = USA Today, 7 = Associated Press, 8 = Las Vegas Review-Journal, 9 = Los Angeles Times-Springer, 10 = van de Wiele)
- **Official**: (1 = Yes, 0 = No)
- **Round**: (1 to 12)

### Target variable:
- **target**: Which of the two boxing fighters won each round (0 = Trinidad, 1 = de la Hoya).

### Decision Tree (Depth 4):

```python
def predict(X: dict):
    nodes = 4 * [None]
    
    # Node 0: Check if the Judge is in a certain group
    nodes[0] = X["Judge"] in [0, 1, 2, 3, 5]
    
    if nodes[0]:  # Judges: G. Hamada, B. Logist, J. Roth, HBO-Lederman, L.A. Times-Kawakami
        # Node 1: Check if the round is in the early part of the match
        nodes[1] = X["Round"] <= 6
        
        if nodes[1]:  # Rounds 1 to 6
            # Node 2: Check if the judge is official
            nodes[2] = X["Official"] == 1
            
            if nodes[2]:  # Official judge
                # Node 3: Check if the judge is G. Hamada
                nodes[3] = X["Judge"] == 0
                
                if nodes[3]:  # G. Hamada
                    prediction = 1  # de la Hoya wins
                else:
                    prediction = 0  # Trinidad wins
            else:  # Not an official judge
                prediction = 0  # Trinidad wins
        else:  # Rounds 7 to 12
            # Node 2: Check if the judge is J. Roth
            nodes[2] = X["Judge"] == 2
            
            if nodes[2]:  # J. Roth
                prediction = 1  # de la Hoya wins
            else:
                prediction = 0  # Trinidad wins
    else:  # Judges: Sportsticker, USA Today, Associated Press, Las Vegas Review, Los Angeles Times-Springer, van de Wiele
        # Node 1: Check if the round is in the late part of the match
        nodes[1] = X["Round"] > 8
        
        if nodes[1]:  # Rounds 9 to 12
            # Node 2: Check if the judge is official
            nodes[2] = X["Official"] == 1
            
            if nodes[2]:  # Official judge
                prediction = 1  # de la Hoya wins
            else:
                prediction = 0  # Trinidad wins
        else:  # Rounds 1 to 8
            prediction = 1  # de la Hoya wins
    
    return prediction, nodes
```

### Explanation:
- **Node 0**: Checks if the judge is one of a specific group of judges (G. Hamada, B. Logist, J. Roth, HBO-Lederman, L.A. Times-Kawakami). This represents a group of judges who might have different judging tendencies.
- **Node 1**: Checks if the round is in the early or late part of the match (Rounds 1 to 6 vs. 7 to 12 or 1 to 8 vs. 9 to 12). This might capture the dynamics of the fight as it progresses.
- **Node 2**: Checks if the judge is an official judge or not, which could affect their scoring bias.
- **Node 3**: In some cases, it checks for specific judges that may have certain tendencies (e.g., G. Hamada or J. Roth).

### Output:
- The function returns:
  - `prediction`: 0 if Trinidad won the round, and 1 if de la Hoya won.
  - `nodes`: A list where each element corresponds to the truth value of the condition at each inner node (1 if it's true, 0 if it's false). 

This tree is based on hypothetical decision-making patterns and is designed to have a maximum depth of 4, with between 4 and 15 inner nodes.
