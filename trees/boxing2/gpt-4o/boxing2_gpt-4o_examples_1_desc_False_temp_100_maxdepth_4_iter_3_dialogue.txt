


```python
def predict(X: dict):
    nodes = 4 * [None]

    # Inner node 1: Is the judge G. Hamada?
    nodes[0] = X['Judge'] == 0

    if nodes[0]:
        # Inner node 2: Is the round <= 6?
        nodes[1] = X['Round'] <= 6
        if nodes[1]:
            prediction = 1  # de la Hoya
        else:
            prediction = 0  # Trinidad
    else:
        # Inner node 3: Is the judge an official judge?
        nodes[2] = X['Official'] == 1
        if nodes[2]:
            # Inner node 4: Is the round <= 8?
            nodes[3] = X['Round'] <= 8
            if nodes[3]:
                prediction = 1  # de la Hoya
            else:
                prediction = 0  # Trinidad
        else:
            # Inner node 5: Is the judge HBO-Lederman?
            nodes[3] = X['Judge'] == 3
            if nodes[3]:
                prediction = 1  # de la Hoya
            else:
                prediction = 0  # Trinidad

    return prediction, nodes
```

### Explanation:
- **Node 1**: First, we check if the judge is "G. Hamada" (`Judge == 0`). If true, we move to Node 2.
- **Node 2**: If the judge is "G. Hamada", we check if the round is less than or equal to 6 (`Round <= 6`). If true, de la Hoya won the round (prediction = 1). If false, Trinidad won the round (prediction = 0).
- **Node 3**: If the judge is not "G. Hamada", we check if the judge is an official judge (`Official == 1`). If true, we move to Node 4.
- **Node 4**: If the judge is an official judge, we check if the round is less than or equal to 8 (`Round <= 8`). If true, de la Hoya won the round (prediction = 1). If false, Trinidad won the round (prediction = 0).
- **Node 5**: If the judge is not an official, we check if the judge is "HBO-Lederman" (`Judge == 3`). If true, de la Hoya won the round (prediction = 1). Otherwise, Trinidad won the round (prediction = 0).

This function follows the structure of the decision tree while returning both the prediction and the truth values of the inner nodes.