


```python
def predict(X: dict):
    # Initialize the nodes list to store truth values of inner nodes
    nodes = 2 * [None]

    # First split: Official judge or not
    nodes[0] = X["Official"] == 1  # 1 means 'Yes', it's an official judge

    if nodes[0]:
        # Second split: Judge identity for official judges
        nodes[1] = X["Judge"] in {0, 1, 2}  # G. Hamada, B. Logist, J. Roth

        if nodes[1]:
            prediction = 0  # Trinidad won (for G. Hamada, B. Logist, J. Roth)
        else:
            prediction = 1  # de la Hoya won (for HBO-Lederman, Sportsticker, etc.)
    else:
        # Second split: Round number for non-official judges
        nodes[1] = X["Round"] <= 6  # Early rounds (1 to 6)

        if nodes[1]:
            prediction = 1  # de la Hoya won in early rounds
        else:
            prediction = 0  # Trinidad won in later rounds

    return prediction, nodes
```

### Explanation:
- **`nodes[0]`** checks if the judge is official (`X["Official"] == 1`). This is the first decision point.
- **`nodes[1]`** depends on whether the judge is official. If yes, it checks which judge it is (`X["Judge"] in {0, 1, 2}`). If no, it checks the round number (`X["Round"] <= 6`).
- The prediction (`0` for Trinidad, `1` for de la Hoya) follows based on the truth values of these inner nodes.

### Example usage:
```python
# Example input
X = {
    "Judge": 0,        # G. Hamada
    "Official": 1,     # Yes, official judge
    "Round": 7,        # Round 7
    "target": 0        # Trinidad (Not used in prediction, only for reference)
}

# Get prediction and truth values of decision nodes
prediction, nodes = predict(X)

print(f"Prediction: {prediction}, Nodes: {nodes}")
```