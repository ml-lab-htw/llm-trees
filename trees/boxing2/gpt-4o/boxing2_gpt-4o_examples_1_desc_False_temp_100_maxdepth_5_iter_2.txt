Hereâ€™s a simple decision tree with a maximum depth of 5 that predicts whether Trinidad (0) or de la Hoya (1) won a round based on features `Judge`, `Official`, and `Round`:

### Features:
- **Judge**: (0 = G. Hamada, 1 = B. Logist, 2 = J. Roth, 3 = HBO-Lederman, 4 = Sportsticker, 5 = Los Angeles Times-Kawakami, 6 = USA Today, 7 = Associated Press, 8 = Las Vegas Review-Journal, 9 = Los Angeles Times-Springer, 10 = van de Wiele)
- **Official**: Whether the judge is official (1 = Yes, 0 = No)
- **Round**: The round number (1 to 12)

### Target:
- **target**: Which of the two boxing fighters won the round (0 = Trinidad, 1 = de la Hoya)

### Decision tree:
```python
def predict(X: dict):
    nodes = 5 * [None]

    # Node 0: Check if the Judge is between 0 to 5 (first half of judges)
    nodes[0] = X["Judge"] <= 5
    
    if nodes[0]:
        # Node 1: Check if the Judge is official
        nodes[1] = X["Official"] == 1
        if nodes[1]:
            # Node 2: Check if it's one of the first 6 rounds
            nodes[2] = X["Round"] <= 6
            if nodes[2]:
                # Node 3: Check if the Judge is one of the first 3 (G. Hamada, B. Logist, J. Roth)
                nodes[3] = X["Judge"] <= 2
                if nodes[3]:
                    # Node 4: Check if it's an early round (1-3)
                    nodes[4] = X["Round"] <= 3
                    if nodes[4]:
                        prediction = 0  # Trinidad wins early rounds with these judges
                    else:
                        prediction = 1  # de la Hoya wins later rounds with these judges
                else:
                    prediction = 1  # de la Hoya wins with judges 3-5 in early rounds
            else:
                prediction = 0  # Trinidad wins later rounds with official judges
        else:
            prediction = 0  # Trinidad wins rounds with non-official judges
    else:
        # Node 1: Check if the Judge is official
        nodes[1] = X["Official"] == 1
        if nodes[1]:
            # Node 2: Check if the round is greater than 6
            nodes[2] = X["Round"] > 6
            if nodes[2]:
                # Node 3: Check if the Judge is from Las Vegas Review-Journal or Los Angeles Times-Springer
                nodes[3] = X["Judge"] in [8, 9]
                if nodes[3]:
                    prediction = 1  # de la Hoya wins with these judges in later rounds
                else:
                    prediction = 0  # Trinidad wins with other official judges in later rounds
            else:
                prediction = 1  # de la Hoya wins middle rounds with official judges
        else:
            # Node 2: Check if the judge is van de Wiele
            nodes[2] = X["Judge"] == 10
            if nodes[2]:
                prediction = 1  # de la Hoya wins with van de Wiele
            else:
                prediction = 0  # Trinidad wins with other non-official judges
    
    return prediction, nodes
```

### Explanation of the Decision Tree:
1. **Node 0**: The decision tree first splits based on whether the judge is one of the first six listed judges (0-5).
   
2. **Node 1**: Then, it checks if the judge is an official or not (1 = Yes, 0 = No).

3. **Node 2**: If the judge is official, the decision tree checks whether the round is in the first 6 rounds (1-6).

4. **Node 3**: For early rounds, the decision tree checks if the judge is one of the first three judges (0-2). Judges 0-2 tend to favor Trinidad in very early rounds, while other judges in this range may favor de la Hoya.

5. **Node 4**: The deepest level looks at whether the round is extremely early (1-3), where Trinidad has a better chance with certain judges, while de la Hoya tends to win later rounds.

### Example Usage:
```python
X = {
    "Judge": 1,  # B. Logist
    "Official": 1,  # Official judge
    "Round": 4  # Round 4
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

This would output:
```
Prediction: 1 (de la Hoya wins), Nodes: [True, True, True, True, False]
``` 

The list `nodes` gives the truth values of each decision node in the tree. This can help trace how the decision was made step-by-step.

