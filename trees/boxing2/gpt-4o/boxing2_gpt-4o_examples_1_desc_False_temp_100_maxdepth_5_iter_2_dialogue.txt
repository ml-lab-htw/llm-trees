


```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # Node 0: Check if Judge is in {0, 1, 2, 10} (G. Hamada, B. Logist, J. Roth, van de Wiele)
    nodes[0] = X["Judge"] in {0, 1, 2, 10}
    
    if nodes[0]:
        # Node 1: Check if Round is <= 6
        nodes[1] = X["Round"] <= 6
        if nodes[1]:
            # Node 2: Check if Official Judge is 1 (Yes)
            nodes[2] = X["Official"] == 1
            if nodes[2]:
                prediction = 0  # Trinidad
            else:
                prediction = 1  # de la Hoya
        else:
            prediction = 0  # Trinidad
    else:
        # Node 3: Check if Round is <= 6
        nodes[3] = X["Round"] <= 6
        if nodes[3]:
            prediction = 1  # de la Hoya
        else:
            # Node 4: Check if Official Judge is 1 (Yes)
            nodes[4] = X["Official"] == 1
            if nodes[4]:
                prediction = 0  # Trinidad
            else:
                prediction = 1  # de la Hoya

    return prediction, nodes
```

### Explanation:
- The function `predict` takes an input `X`, which is a dictionary containing the features `Judge`, `Official`, and `Round`.
- The decision tree is encoded with conditions that mimic the structure of the tree, checking the values of the features in sequence.
- `nodes` is a list that stores the Boolean results (truth values) of each inner node's condition.
- The function returns both the prediction (which fighter won the round) and the list of truth values corresponding to the inner nodes.

### Example of inputs:
```python
X = {"Judge": 0, "Official": 1, "Round": 7}  # G. Hamada, Official Judge, Round 7
prediction, nodes = predict(X)
print(prediction)  # Output: 0 (Trinidad)
print(nodes)  # Output: [True, False, None, None, None]
```