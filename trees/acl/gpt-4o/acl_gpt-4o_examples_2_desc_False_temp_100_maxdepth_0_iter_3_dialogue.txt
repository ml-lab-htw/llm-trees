


```python
def predict(X: dict):
    nodes = [None] * 3

    # Define the thresholds and conditions for each node
    nodes[0] = X["ccmfthctabame"] <= 2.4
    nodes[1] = X["Lysholm"] <= 80
    nodes[2] = X["Sex"] == 0  # 0 corresponds to female

    if nodes[0]:
        prediction = 1  # abnormal
    else:
        if nodes[1]:
            prediction = 1  # abnormal
        else:
            if nodes[2]:
                prediction = 1  # abnormal
            else:
                prediction = 0  # normal

    return prediction, nodes

# Example usage:
features = {
    'Group': 1,
    'Sex': 0,  # Female
    'Height': 170,
    'Body_Mass_FP': 65,
    'BMI_FP': 22.5,
    'Age': 29,
    'Lysholm': 85,
    'IKDC': 75,
    'Tegner': 4,
    'ccmfthctabame': 2.6,
    'ccMF.D.T2.Me': 30.5,
    'ccMF.S.T2.Me': 40.2,
    'Knee_Moment_X_Max_0_50_INJ': 50,
    'Knee_Moment_Y_Min_51_100_INJ': -20,
    'Knee_Moment_Z_Max_0_50_INJ': 25,
    'Dominant_Leg': 1,
    'days_injury_to_MRI': 60
}

prediction, nodes = predict(features)
print(f"Prediction: {'abnormal' if prediction == 1 else 'normal'}, Nodes: {nodes}")
```

### Explanation:
1. **Node 0:** Checks whether the baseline mean cartilage thickness in the central medial femur (ccmfthctabame) is ≤ 2.4 mm.
2. **Node 1:** If the threshold in Node 0 is not met, it checks whether the Lysholm score is ≤ 80.
3. **Node 2:** If the threshold in Node 1 is not met, it checks the sex (0 for female, 1 for male).

- **Prediction "1"** indicates "abnormal"
- **Prediction "0"** indicates "normal"

This function complies with the described behavior and structure of the decision tree, providing both the prediction and list of truth values for the inner nodes.