


Here is the Python function implementing the decision tree classifier for the party affiliation problem:

```python
def predict(X: dict):
    """
    Predicts the party affiliation (1 = Republican, 0 = Democrat) based on the given features.

    Parameters:
    X (dict): Dictionary containing the feature values. Keys must match the feature names exactly.

    Returns:
    tuple: A tuple containing:
        - prediction (int): Predicted party affiliation (1 = Republican, 0 = Democrat).
        - nodes (list): List of truth values (1 if condition is satisfied, 0 otherwise) for the inner nodes of the decision tree.
    """
    nodes = 2 * [None]
    
    # Node 0: Check 'physician fee freeze'
    nodes[0] = X["physician fee freeze"] <= 1.5  # 1 = no, 2 = yes
    if nodes[0]:  # If 'physician fee freeze' is no
        prediction = 0  # Democrat
    else:  # If 'physician fee freeze' is yes
        # Node 1: Check 'el salvador aid'
        nodes[1] = X["el salvador aid"] <= 1.5  # 1 = no, 2 = yes
        if nodes[1]:  # If 'el salvador aid' is no
            prediction = 0  # Democrat
        else:  # If 'el salvador aid' is yes
            prediction = 1  # Republican

    return prediction, nodes
```

### Explanation of the Function:
1. **Input (`X`)**:
   - The function expects a dictionary `X` where keys are the exact feature names (e.g., `"physician fee freeze"`, `"el salvador aid"`) and values are the corresponding feature values (e.g., `1` for "no", `2` for "yes").

2. **Nodes**:
   - `nodes` is a list that stores the truth values of the inner nodes. Each entry in the list corresponds to whether the condition at that node is satisfied (`1` if true, `0` if false).

3. **Logic**:
   - The first condition (`nodes[0]`) checks whether the vote on `physician fee freeze` is "no" (`<= 1.5`). If true, the prediction is `0` (Democrat).
   - If the first condition is false (i.e., the vote is "yes"), the second condition (`nodes[1]`) checks whether the vote on `el salvador aid` is "no" (`<= 1.5`). If true, the prediction is `0` (Democrat). Otherwise, the prediction is `1` (Republican).

4. **Output**:
   - The function returns a tuple:
     - `prediction`: The predicted party affiliation (`1` for Republican, `0` for Democrat).
     - `nodes`: A list of truth values for the inner nodes.

### Example Usage:
```python
# Example input
X = {
    "handicapped infants": 1,
    "water project cost sharing": 2,
    "adoption of the budget resolution": 1,
    "physician fee freeze": 2,
    "el salvador aid": 2,
    "religious groups in schools": 1,
    "anti satellite test ban": 1,
    "aid to nicaraguan contras": 1,
    "mx missile": 1,
    "immigration": 2,
    "synfuels corporation cutback": 1,
    "education spending": 2,
    "superfund right to sue": 1,
    "crime": 2,
    "duty free exports": 1,
    "export administration act south africa": 2
}

# Predict party affiliation
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 1 (Republican)
print("Nodes:", nodes)  # Output: [0, 0]
```

This function uses the thresholds provided in the problem statement and implements the decision tree with a maximum depth of 2.