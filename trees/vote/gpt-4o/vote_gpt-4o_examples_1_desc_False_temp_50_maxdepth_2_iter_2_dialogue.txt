


Below is the Python function implementing the requested decision tree for classifying party affiliation, with a maximum depth of 2. The function uses the provided feature keys, encodings, and target variable definitions.

```python
def predict_party_affiliation(X: dict):
    """
    Predicts party affiliation (0 = Democrat, 1 = Republican) based on voting records.
    
    Parameters:
    X (dict): A dictionary containing the feature values for a single instance.
              Keys must match the feature names exactly as provided.
    
    Returns:
    tuple: A tuple containing:
        - prediction (int): The predicted party affiliation (0 = Democrat, 1 = Republican).
        - nodes (list): A list of truth values (1 if the condition of the inner node is satisfied, 0 otherwise).
    """
    # Initialize the list of truth values for the inner nodes
    nodes = 2 * [None]
    
    # Inner node conditions
    nodes[0] = X["physician fee freeze"] <= 1.5  # 1 = no, 2 = yes
    nodes[1] = X["el salvador aid"] <= 1.5       # 1 = no, 2 = yes
    
    # Decision tree logic
    if nodes[0]:  # If "physician fee freeze" is no (<= 1.5)
        prediction = 0  # Democrat
    else:  # If "physician fee freeze" is yes (> 1.5)
        if nodes[1]:  # If "el salvador aid" is no (<= 1.5)
            prediction = 0  # Democrat
        else:  # If "el salvador aid" is yes (> 1.5)
            prediction = 1  # Republican

    return prediction, nodes
```

### Explanation of the Code:
1. **Input**:
   - `X` is a dictionary containing the feature values for a single instance. The keys in `X` must match the exact spelling and case of the feature names provided.

2. **Inner Nodes**:
   - `nodes[0]`: Checks if the vote on the "physician fee freeze" is `no` (encoded as `1`) or `yes` (encoded as `2`). The condition `X["physician fee freeze"] <= 1.5` evaluates to `True` for `no` and `False` for `yes`.
   - `nodes[1]`: Checks if the vote on "el salvador aid" is `no` (`1`) or `yes` (`2`). The condition `X["el salvador aid"] <= 1.5` evaluates to `True` for `no` and `False` for `yes`.

3. **Decision Tree Logic**:
   - If the first condition (`nodes[0]`) is satisfied (i.e., "physician fee freeze" is `no`), the prediction is `0` (Democrat).
   - Otherwise, the second condition (`nodes[1]`) is evaluated:
     - If "el salvador aid" is `no`, the prediction is `0` (Democrat).
     - If "el salvador aid" is `yes`, the prediction is `1` (Republican).

4. **Output**:
   - The function returns a tuple:
     - `prediction`: The predicted party affiliation (`0` for Democrat, `1` for Republican).
     - `nodes`: A list of truth values indicating whether the conditions of the inner nodes were satisfied (`1` for True, `0` for False).

### Example Usage:
```python
# Example input
X_example = {
    "handicapped infants": 2,
    "water project cost sharing": 2,
    "adoption of the budget resolution": 1,
    "physician fee freeze": 1,
    "el salvador aid": 2,
    "religious groups in schools": 1,
    "anti satellite test ban": 2,
    "aid to nicaraguan contras": 1,
    "mx missile": 2,
    "immigration": 2,
    "synfuels corporation cutback": 1,
    "education spending": 2,
    "superfund right to sue": 1,
    "crime": 2,
    "duty free exports": 1,
    "export administration act south africa": 2
}

# Predict party affiliation
prediction, nodes = predict_party_affiliation(X_example)

# Output the results
print("Prediction:", "Republican" if prediction == 1 else "Democrat")
print("Nodes:", nodes)
```

### Example Output:
For the given input:
- `"physician fee freeze": 1` (no)
- `"el salvador aid": 2` (yes)

The output would be:
```
Prediction: Democrat
Nodes: [1, 0]
```