


Below is the Python function that takes an input dictionary `X` with the features specified and returns a prediction for party affiliation (Republican = 1, Democrat = 0) as well as a list representing the truth values of the inner nodes in the decision tree.

```python
def predict(X: dict):
    nodes = 3 * [None]  # Initialize the nodes list to store truth values for inner nodes

    # Node 1: Split on "physician fee freeze"
    nodes[0] = X["physician fee freeze"] <= 1.5  # "yes" (2) corresponds to False for this node

    if nodes[0]:  # If "physician fee freeze" <= 1.5 (No)
        # Node 2: Split on "adoption of the budget resolution"
        nodes[1] = X["adoption of the budget resolution"] <= 1.5  # "yes" (2) corresponds to False for this node

        if nodes[1]:  # If "adoption of the budget resolution" <= 1.5 (No)
            prediction = 0  # Democrat
        else:  # If "adoption of the budget resolution" > 1.5 (Yes)
            prediction = 1  # Republican
    else:  # If "physician fee freeze" > 1.5 (Yes)
        # Node 3: Split on "aid to nicaraguan contras"
        nodes[2] = X["aid to nicaraguan contras"] <= 1.5  # "yes" (2) corresponds to False for this node

        if nodes[2]:  # If "aid to nicaraguan contras" <= 1.5 (No)
            prediction = 0  # Democrat
        else:  # If "aid to nicaraguan contras" > 1.5 (Yes)
            prediction = 1  # Republican

    return prediction, nodes
```

### Explanation:

1. **Node Conditions**:
    - `X["physician fee freeze"] <= 1.5`: This checks if the value for the "physician fee freeze" vote is "no" (1). A value of 2 represents "yes", and anything greater than 1.5 is treated as "yes".
    - `X["adoption of the budget resolution"] <= 1.5`: This checks if the value for the "adoption of the budget resolution" vote is "no" (1).
    - `X["aid to nicaraguan contras"] <= 1.5`: This checks if the value for the "aid to nicaraguan contras" vote is "no" (1).

2. **Prediction Outputs**:
    - `prediction = 0`: Corresponds to the Democrat class.
    - `prediction = 1`: Corresponds to the Republican class.

3. **Inner Node Truth Values**:
    - `nodes[0]`: True if the condition at Node 1 is satisfied (`physician fee freeze <= 1.5`), otherwise False.
    - `nodes[1]`: True if the condition at Node 2 is satisfied (`adoption of the budget resolution <= 1.5`), otherwise False.
    - `nodes[2]`: True if the condition at Node 3 is satisfied (`aid to nicaraguan contras <= 1.5`), otherwise False.

### Example Input and Output:

#### Input:
```python
X = {
    "handicapped infants": 2,
    "water project cost sharing": 1,
    "adoption of the budget resolution": 2,
    "physician fee freeze": 1,
    "el salvador aid": 2,
    "religious groups in schools": 1,
    "anti satellite test ban": 1,
    "aid to nicaraguan contras": 1,
    "mx missile": 2,
    "immigration": 1,
    "synfuels corporation cutback": 2,
    "education spending": 1,
    "superfund right to sue": 2,
    "crime": 1,
    "duty free exports": 2,
    "export administration act south africa": 1
}
```

#### Output:
```python
prediction, nodes = predict(X)
print("Prediction:", prediction)  # Output: 0 (Democrat)
print("Inner Nodes:", nodes)      # Output: [True, False, True]
```

#### Explanation of Nodes:
1. `Node 1`: `physician fee freeze = 1`, so `1 <= 1.5` → `True`.
2. `Node 2`: `adoption of the budget resolution = 2`, so `2 <= 1.5` → `False`.
3. `Node 3`: Evaluated only if `Node 1` is `True` (which it is). `aid to nicaraguan contras = 1`, so `1 <= 1.5` → `True`.