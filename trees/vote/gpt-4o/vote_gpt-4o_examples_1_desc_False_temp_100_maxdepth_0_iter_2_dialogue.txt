


```python
def predict(X: dict):
    nodes = [
        X["physician fee freeze"] <= 1,
        X["education spending"] > 1
    ]

    if nodes[0]:
        prediction = 0 if nodes[1] else 1
    else:
        prediction = 0

    return prediction, nodes

```

### Explanation:
- **Node 0**: The first check is on `'physician fee freeze'`. If the vote is "Yes" (`2`), it's highly indicative of a Republican (`1`). If the vote is "No" (`1`), we move to the next node.
  
- **Node 1**: The second check is on `'el salvador aid'`. If the vote is "Yes" (`2`), the prediction is Republican (`1`). If not, we move to the next node.
  
- **Node 2**: The final check is on `'adoption of the budget resolution'`. If the vote is "Yes" (`2`), we predict Democrat (`0`). If the vote is "No" (`1`), we predict Republican (`1`).

### Example usage:
```python
X = {
    'handicapped infants': 2,
    'water project cost sharing': 1,
    'adoption of the budget resolution': 1,
    'physician fee freeze': 2,
    'el salvador aid': 1,
    'religious groups in schools': 2,
    'anti satellite test ban': 1,
    'aid to nicaraguan contras': 2,
    'mx missile': 1,
    'immigration': 2,
    'synfuels corporation cutback': 1,
    'education spending': 2,
    'superfund right to sue': 2,
    'crime': 2,
    'duty free exports': 1,
    'export administration act south africa': 2
}

prediction, nodes = predict(X)
print("Prediction (party affiliation):", "Republican" if prediction == 1 else "Democrat")
print("Truth values of inner nodes:", nodes)
```

This function will return both the political party prediction as well as the list of truth values that represent whether the conditions at each inner node of the decision tree were satisfied.
