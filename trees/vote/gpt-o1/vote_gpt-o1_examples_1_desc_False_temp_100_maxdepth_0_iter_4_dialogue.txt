


```python
def predict(X: dict):
    nodes = [None] * 2  # Initialize a list to store the truth values of the inner nodes

    # Node 0: Check the vote on physician fee freeze
    nodes[0] = int(X['physician fee freeze'] == 2)  # 2 represents 'yes', 1 represents 'no'

    if nodes[0] == 1:
        # Node 0 condition is satisfied (voted 'yes' on physician fee freeze)
        # Node 1: Check the vote on adoption of the budget resolution
        nodes[1] = int(X['adoption of the budget resolution'] == 2)
        if nodes[1] == 1:
            # Node 1 condition is satisfied (voted 'yes' on adoption of the budget resolution)
            prediction = 1  # Republican
        else:
            # Node 1 condition is not satisfied
            prediction = 0  # Democrat
    else:
        # Node 0 condition is not satisfied (voted 'no' on physician fee freeze)
        nodes[1] = None  # Node 1 is not evaluated
        prediction = 0  # Democrat

    return prediction, nodes
```

**Usage Example:**

To use this function, create a dictionary `X` with the exact feature keys and their corresponding values. Remember that votes are encoded as `2` for **yes** and `1` for **no**.

```python
# Example input data
X = {
    'handicapped infants': 2,
    'water project cost sharing': 1,
    'adoption of the budget resolution': 2,
    'physician fee freeze': 2,
    'el salvador aid': 1,
    'religious groups in schools': 2,
    'anti satellite test ban': 1,
    'aid to nicaraguan contras': 2,
    'mx missile': 1,
    'immigration': 2,
    'synfuels corporation cutback': 1,
    'education spending': 2,
    'superfund right to sue': 1,
    'crime': 2,
    'duty free exports': 1,
    'export administration act south africa': 2
}

# Make a prediction
prediction, nodes = predict(X)

# Output the results
print("Prediction:", "Republican" if prediction == 1 else "Democrat")
print("Nodes:", nodes)
```

**Explanation:**

- **Feature Encoding:**
  - Votes are encoded as:
    - `2` for **yes**
    - `1` for **no**
  - Target variable (`party affiliation`) is encoded as:
    - `1` for **Republican**
    - `0` for **Democrat**

- **Function Details:**
  - The function `predict` takes a dictionary `X` containing the features.
  - It initializes a list `nodes` to keep track of the truth values of the inner nodes.
    - `nodes[0]` corresponds to the condition on `'physician fee freeze'`.
    - `nodes[1]` corresponds to the condition on `'adoption of the budget resolution'`.
  - Conditions are evaluated in order:
    1. **Node 0:** Checks if the vote on `'physician fee freeze'` is **yes** (`2`).
    2. **Node 1:** If Node 0 is satisfied, checks if the vote on `'adoption of the budget resolution'` is **yes** (`2`).
  - Predictions are made based on these conditions:
    - If both Node 0 and Node 1 conditions are satisfied (`1`), predict **Republican** (`1`).
    - If Node 0 is satisfied but Node 1 is not, predict **Democrat** (`0`).
    - If Node 0 is not satisfied, predict **Democrat** (`0`).

- **Nodes List:**
  - Contains `1` if the condition is satisfied.
  - Contains `0` if the condition is not satisfied.
  - Contains `None` if the node was not evaluated.

**Note:** This decision tree is a simplified model based on provided features and does not reflect real voting data. It serves as an example of how to implement a decision tree classifier in Python using the specified features and encodings.