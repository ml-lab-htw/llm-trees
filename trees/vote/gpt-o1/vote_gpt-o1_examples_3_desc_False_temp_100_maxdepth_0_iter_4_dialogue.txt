


```python
def predict(X: dict):
    nodes = [None] * 3  # Initialize a list to store truth values of inner nodes

    # Evaluate the conditions for each node
    nodes[0] = 1 if X['physician fee freeze'] == 2 else 0  # Node 0: Vote on physician fee freeze == 'yes'
    nodes[1] = 1 if X['adoption of the budget resolution'] == 2 else 0  # Node 1: Vote on adoption of the budget resolution == 'yes'
    nodes[2] = 1 if X['el salvador aid'] == 2 else 0  # Node 2: Vote on aid to El Salvador == 'yes'

    # Traverse the decision tree based on the conditions
    if nodes[0]:
        prediction = 1  # Republican
    else:
        if nodes[1]:
            prediction = 0  # Democrat
        else:
            if nodes[2]:
                prediction = 1  # Republican
            else:
                prediction = 0  # Democrat

    return prediction, nodes
```

**Explanation:**

- **Nodes Initialization:**
  - We initialize a list `nodes` with `None` values to store the truth values of the inner nodes.
  - The list has a length equal to the number of inner nodes in the decision tree (in this case, 3).

- **Evaluating Conditions:**
  - **Node 0:** Checks if the vote on the **physician fee freeze** is `'yes'` (encoded as `2`).
    ```python
    nodes[0] = 1 if X['physician fee freeze'] == 2 else 0
    ```
  - **Node 1:** Checks if the vote on the **adoption of the budget resolution** is `'yes'`.
    ```python
    nodes[1] = 1 if X['adoption of the budget resolution'] == 2 else 0
    ```
  - **Node 2:** Checks if the vote on **aid to El Salvador** is `'yes'`.
    ```python
    nodes[2] = 1 if X['el salvador aid'] == 2 else 0
    ```

- **Decision Tree Logic:**
  - If **Node 0** condition is satisfied (`nodes[0] == 1`), predict **Republican**.
    ```python
    if nodes[0]:
        prediction = 1  # Republican
    ```
  - Else, check **Node 1**:
    - If **Node 1** condition is satisfied, predict **Democrat**.
      ```python
      if nodes[1]:
          prediction = 0  # Democrat
      ```
    - Else, check **Node 2**:
      - If **Node 2** condition is satisfied, predict **Republican**.
        ```python
        if nodes[2]:
            prediction = 1  # Republican
        ```
      - Else, predict **Democrat**.
        ```python
        else:
            prediction = 0  # Democrat
        ```

- **Return Values:**
  - The function returns the `prediction` and the list of `nodes` indicating which conditions were met.
    ```python
    return prediction, nodes
    ```

**Usage Example:**

Suppose we have a sample input representing a voter's choices:

```python
sample_voter = {
    'handicapped infants': 2,
    'water project cost sharing': 1,
    'adoption of the budget resolution': 1,
    'physician fee freeze': 2,
    'el salvador aid': 1,
    'religious groups in schools': 2,
    'anti satellite test ban': 1,
    'aid to nicaraguan contras': 2,
    'mx missile': 1,
    'immigration': 2,
    'synfuels corporation cutback': 1,
    'education spending': 2,
    'superfund right to sue': 1,
    'crime': 2,
    'duty free exports': 1,
    'export administration act south africa': 2
}

prediction, nodes = predict(sample_voter)
print("Prediction (1=Republican, 0=Democrat):", prediction)
print("Nodes truth values:", nodes)
```

**Output:**

```
Prediction (1=Republican, 0=Democrat): 1
Nodes truth values: [1, 0, 0]
```

**Note:**
- Ensure that the input dictionary `X` contains all the necessary keys with correct encodings as specified.
- The function strictly follows the structure of the provided decision tree and adheres to the feature encodings.