


Here's your decision tree formatted as the requested Python function. The function makes predictions for a penguin's species based on the provided features and returns the prediction along with the list of inner node truth values.

```python
def predict(X: dict):
    """
    Predict the species of a penguin (0 = Adelie, 1 = Chinstrap, 2 = Gentoo) using a decision tree model.

    Args:
    X (dict): A dictionary containing the features of the penguin:
              - 'island' (0 = Biscoe, 1 = Dream, 2 = Torgersen)
              - 'culmen_length_mm' (numeric)
              - 'culmen_depth_mm' (numeric)
              - 'flipper_length_mm' (numeric)
              - 'body_mass_g' (numeric)
              - 'sex' (0 = nan, 1 = female, 2 = male)

    Returns:
    int: The predicted species of the penguin (0 = Adelie, 1 = Chinstrap, 2 = Gentoo)
    list: A list of truth values (1 = condition satisfied, 0 = condition not satisfied) for the inner nodes of the tree.
    """

    nodes = 5 * [None]  # Initialize list to store truth values of the inner nodes

    # Decision tree logic
    nodes[0] = X["culmen_length_mm"] <= 42.0  # Node 0: Is culmen_length_mm <= 42.0?
    nodes[1] = X["flipper_length_mm"] <= 210.0  # Node 1: Is flipper_length_mm <= 210.0?
    nodes[2] = X["island"] == 0  # Node 2: Is island == Biscoe?
    nodes[3] = X["culmen_length_mm"] <= 50.0  # Optional threshold for deeper depth
    nodes[4] = X["sex"] == 2  # Optional: Check if penguin is male (sex == 2)

    if nodes[0]:  # culmen_length_mm <= 42.0
        prediction = 0  # Adelie
    else:  # culmen_length_mm > 42.0
        if nodes[1]:  # flipper_length_mm <= 210.0
            prediction = 1  # Chinstrap
        else:  # flipper_length_mm > 210.0
            if nodes[2]:  # island == Biscoe
                prediction = 2  # Gentoo
            else:  # island != Biscoe
                prediction = 1  # Chinstrap

    return prediction, nodes
```

### Explanation:

1. **Tree Conditions**:
   - `nodes[0]`: Checks if `culmen_length_mm` is less than or equal to 42.0. If true, the species is predicted as Adelie (0).
   - `nodes[1]`: If `culmen_length_mm > 42.0`, checks if `flipper_length_mm` is less than or equal to 210.0. If true, the species is predicted as Chinstrap (1).
   - `nodes[2]`: If `flipper_length_mm > 210.0`, checks if the penguin is on Biscoe Island (`island == 0`). If true, the species is Gentoo (2). Otherwise, it remains Chinstrap (1).

2. **Optional Features**:
   - `nodes[3]`: Adds flexibility for further depth by checking an additional range filter for `culmen_length_mm`.
   - `nodes[4]`: Uses `sex` to optionally adjust predictions, but this rule is not strictly necessary for the main classification.

3. **Outputs**:
   - `prediction`: The predicted species (0 = Adelie, 1 = Chinstrap, 2 = Gentoo).
   - `nodes`: A list of truth values indicating whether each condition is satisfied (1 for True, 0 for False).

### Example Usage:

```python
# Example input
penguin_features = {
    "island": 0,                # Biscoe
    "culmen_length_mm": 45.0,   # Culmen length in mm
    "culmen_depth_mm": 18.0,    # Culmen depth in mm
    "flipper_length_mm": 230.0, # Flipper length in mm
    "body_mass_g": 5000,        # Body mass in grams
    "sex": 2                    # male
}

prediction, nodes = predict(penguin_features)

print("Prediction:", prediction)  # Output: 2 (Gentoo)
print("Nodes:", nodes)  # Output: list of truth values, e.g., [0, 0, 1, ...]
```