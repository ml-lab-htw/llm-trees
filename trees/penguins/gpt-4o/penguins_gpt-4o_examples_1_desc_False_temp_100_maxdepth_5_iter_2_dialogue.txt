


Below is the Python function for the penguin species decision tree classifier as described. This function adheres to your specified formatting and feature/target variable requirements:

```python
def predict(X: dict):
    """
    Predict the penguin species and return the truth values for the decision tree's inner nodes.
    
    Args:
        X (dict): Feature dictionary with the following keys:
            - 'island' (0 = Biscoe, 1 = Dream, 2 = Torgersen)
            - 'culmen_length_mm' (float)
            - 'culmen_depth_mm' (float)
            - 'flipper_length_mm' (float)
            - 'body_mass_g' (float)
            - 'sex' (0 = nan, 1 = female, 2 = male)
    
    Returns:
        tuple: (prediction, nodes)
            - prediction (int): The predicted penguin species: 
                0 = Adelie, 1 = Chinstrap, 2 = Gentoo
            - nodes (list): Truth values for the decision tree's inner nodes.
    """
    nodes = 5 * [None]

    # Inner node conditions
    nodes[0] = X['flipper_length_mm'] <= 206.0
    nodes[1] = X['culmen_depth_mm'] <= 18.5
    nodes[2] = X['culmen_length_mm'] <= 38.5
    nodes[3] = X['body_mass_g'] <= 4650.0
    nodes[4] = X['island'] == 0  # Biscoe

    # Decision tree logic
    if nodes[0]:  # flipper_length_mm <= 206.0
        if nodes[1]:  # culmen_depth_mm <= 18.5
            prediction = 1  # Chinstrap
        else:  # culmen_depth_mm > 18.5
            if nodes[2]:  # culmen_length_mm <= 38.5
                prediction = 0  # Adelie
            else:  # culmen_length_mm > 38.5
                prediction = 2  # Gentoo
    else:  # flipper_length_mm > 206.0
        if nodes[3]:  # body_mass_g <= 4650.0
            if nodes[4]:  # island == Biscoe
                prediction = 2  # Gentoo
            else:  # island != Biscoe
                prediction = 0  # Adelie
        else:  # body_mass_g > 4650.0
            prediction = 2  # Gentoo

    return prediction, nodes
```

### Explanation:
1. **Feature Conditions (Nodes):**
   - `nodes[0]`: Checks if flipper length is less than or equal to 206.0 mm.
   - `nodes[1]`: Checks if culmen depth is less than or equal to 18.5 mm.
   - `nodes[2]`: Checks if culmen length is less than or equal to 38.5 mm.
   - `nodes[3]`: Checks if body mass is less than or equal to 4650 g.
   - `nodes[4]`: Checks if the island is Biscoe (encoded as 0).
   
2. **Predictions:**
   - The decision tree follows the hierarchy of truth values in `nodes`. Based on which conditions are met, the function predicts the species: 
     - **Adelie (0)**
     - **Chinstrap (1)**
     - **Gentoo (2)**

3. **Return Values:**
   - The function returns:
     - `prediction`: The predicted species as an integer (`0`, `1`, or `2`).
     - `nodes`: A list of boolean values (`1` for true, `0` for false) representing whether the conditions for the corresponding nodes are satisfied.

### Example Usage:

```python
# Input example
features = {
    'island': 0,  # Biscoe
    'culmen_length_mm': 39.5,
    'culmen_depth_mm': 17.0,
    'flipper_length_mm': 210.0,
    'body_mass_g': 5000.0,
    'sex': 2  # Male
}

# Predict
prediction, nodes = predict(features)

print("Prediction:", prediction)  # Expected output: 2 (Gentoo)
print("Nodes:", nodes)  # Expected output: [False, True, False, False, True]
```

This function is flexible and can accept a dictionary with feature values, enabling prediction of the penguin species while logging the decisions made at each node.