


Here is a Python function that implements the decision tree for predicting the species of a penguin based on the given features and decision conditions. The function also returns a list representing the truth values of the inner nodes:

```python
def predict(X: dict):
    """
    Predicts the species of a penguin and returns the decision path.
    
    Args:
    X: dict
        A dictionary containing the following keys:
        - 'island': int (0 = Biscoe, 1 = Dream, 2 = Torgersen)
        - 'culmen_length_mm': float (Length of culmen in mm)
        - 'culmen_depth_mm': float (Depth of culmen in mm)
        - 'flipper_length_mm': float (Flipper length in mm)
        - 'body_mass_g': float (Body mass in grams)
        - 'sex': int (0 = nan, 1 = female, 2 = male)
        
    Returns:
    tuple:
        - prediction: int (0 = Adelie, 1 = Chinstrap, 2 = Gentoo)
        - nodes: list of int (1 if condition is satisfied, 0 otherwise for each decision node)
    """
    # List to track truth values for the decision path
    nodes = [None] * 5
    
    # Decision tree
    nodes[0] = X["culmen_length_mm"] <= 45.0
    if nodes[0]:
        # If culmen_length_mm <= 45.0
        prediction = 0  # Adelie
    else:
        nodes[1] = X["flipper_length_mm"] <= 210.0
        if nodes[1]:
            # If flipper_length_mm <= 210.0
            nodes[2] = X["culmen_depth_mm"] <= 16.5
            if nodes[2]:
                # If culmen_depth_mm <= 16.5
                prediction = 1  # Chinstrap
            else:
                # If culmen_depth_mm > 16.5
                prediction = 2  # Gentoo
        else:
            # If flipper_length_mm > 210.0
            nodes[3] = X["island"] == 0  # Biscoe
            if nodes[3]:
                # If island is Biscoe
                prediction = 2  # Gentoo
            else:
                nodes[4] = X["island"] == 1  # Dream
                if nodes[4]:
                    # If island is Dream
                    prediction = 1  # Chinstrap
                else:
                    # If island is Torgersen
                    prediction = 0  # Adelie
    
    return prediction, nodes
```

### Explanation

1. **Input Features**:
   - A dictionary `X` that contains the keys: `'island'`, `'culmen_length_mm'`, `'culmen_depth_mm'`, `'flipper_length_mm'`, `'body_mass_g'`, and `'sex'`.

2. **Nodes and Truth Values**:
   - `nodes` is a list that stores whether each decision condition is satisfied (1) or not (0).
   - Each node's condition is checked in the specified order and assigned a truth value in the `nodes` list.

3. **Decision Tree**:
   - If `culmen_length_mm <= 45.0`, the penguin is classified as Adelie (0).
   - For `culmen_length_mm > 45.0`, the next condition checks `flipper_length_mm <= 210.0`.
     - If true, further checks on `culmen_depth_mm` determine if the species is Chinstrap (1) or Gentoo (2).
     - If false, the `island` feature determines the classification: 
       - Biscoe corresponds to Gentoo (2).
       - Dream corresponds to Chinstrap (1).
       - Torgersen corresponds to Adelie (0).

4. **Output**:
   - The function returns the predicted class (`0`, `1`, or `2`) and a list of truth values for the five decision nodes.

### Example Usage

```python
# Example input feature dictionary
X = {
    "island": 0,  # Biscoe
    "culmen_length_mm": 50.0,
    "culmen_depth_mm": 15.5,
    "flipper_length_mm": 220.0,
    "body_mass_g": 5000,
    "sex": 2  # male
}

# Predict penguin species
prediction, nodes = predict(X)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

### Example Output

For the input values above:
- `culmen_length_mm > 45.0`
- `flipper_length_mm > 210.0`
- `island` = Biscoe

The output would be:

```
Prediction: 2, Nodes: [0, 0, None, 1, None]
```