


Below is the Python function to implement the decision tree for the penguin classification problem. It has the conditions, nodes represented as a list of truth-values, and the prediction logic:

```python
def predict(X: dict):
    """
    Predicts the penguin species based on the provided input features.
    
    Parameters:
        X (dict): A dictionary containing the following keys:
            - island (0 = Biscoe / 1 = Dream / 2 = Torgersen)
            - culmen_length_mm (float): Length of the culmen in mm
            - culmen_depth_mm (float): Depth of the culmen in mm
            - flipper_length_mm (float): Flipper length in mm
            - body_mass_g (float): Body mass in grams
            - sex (0 = nan / 1 = female / 2 = male)
    
    Returns:
        prediction (int): Penguin species (0 = Adelie / 1 = Chinstrap / 2 = Gentoo)
        nodes (list): Truth values for all inner nodes in the tree
    """
    nodes = 3 * [None]
    
    # Node 0 (Root): flipper_length_mm <= 206
    nodes[0] = X["flipper_length_mm"] <= 206
    
    if nodes[0]:  # Flipper length <= 206
        # Node 1: culmen_depth_mm <= 18.7
        nodes[1] = X["culmen_depth_mm"] <= 18.7
        if nodes[1]:
            prediction = 0  # Adelie
        else:
            prediction = 1  # Chinstrap
    else:  # Flipper length > 206
        # Node 2: body_mass_g <= 4375
        nodes[2] = X["body_mass_g"] <= 4375
        if nodes[2]:
            prediction = 1  # Chinstrap
        else:
            prediction = 2  # Gentoo
    
    return prediction, nodes
```

### Explanation of the Code:
1. **Parameters**:
   - The function takes a `dict` (X) as input with features spelled exactly like the ones you provided.
   - Each feature in the dictionary corresponds to a specific aspect of the penguin.

2. **Nodes**:
   - The `nodes` list tracks the truth values of the inner nodes of the decision tree.
   - Each entry in `nodes` corresponds to whether the condition at that particular node evaluates to `True` (1) or `False` (0).

3. **Conditions**:
   - **Node 0** checks if `flipper_length_mm` is less than or equal to `206`.
   - **Node 1** evaluates if `culmen_depth_mm` is less than or equal to `18.7`.
   - **Node 2** checks if `body_mass_g` is less than or equal to `4375`.

4. **Decision Logic**:
   - Decisions are based on the feature value thresholds as inferred from penguin species data patterns.
   - Thresholds were selected to match meaningful splits in the data.

5. **Prediction**:
   - Each leaf node corresponds to a species:
     - Prediction `0`: **Adelie**
     - Prediction `1`: **Chinstrap**
     - Prediction `2`: **Gentoo**

6. **Output**:
   - The function returns two values:
     - `prediction`: The predicted penguin species.
     - `nodes`: A list of truth-values for the conditions (inner nodes) that were evaluated.

### Example Usage:
```python
# Example input features
X = {
    "island": 2,               # Torgersen
    "culmen_length_mm": 39.1,  # Culmen length in mm
    "culmen_depth_mm": 18.2,   # Culmen depth in mm
    "flipper_length_mm": 195,  # Flipper length in mm
    "body_mass_g": 3750,       # Body mass in g
    "sex": 1                   # Female
}

# Get prediction and node truth-values
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 0 (Adelie)
print("Nodes:", nodes)            # Output: [True, True, None]
```