


```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["flipper_length_mm"] <= 200  # Split 1: Flipper length
    nodes[1] = X["culmen_length_mm"] <= 45   # Split 2: Culmen length (if flipper_length <= 200)
    nodes[2] = X["culmen_length_mm"] <= 50 # Split 2: Culmen Length (if flipper_length > 200)


    if nodes[0]:  # flipper_length <= 200
        if nodes[1]:  # culmen_length <= 45
            prediction = 0  # Adelie
        else:         # culmen_length > 45
            prediction = 1  # Chinstrap
    else:          # flipper_length > 200
        if nodes[2]:  # culmen_length <=50
            prediction = 1 # Chinstrap/Adelie (Ambiguous) - Leaning towards Chinstrap based on thresholds.
        else:        # culmen_length > 50
            prediction = 2  # Gentoo

    return prediction, [int(n) if n is not None else None for n in [nodes[0], (nodes[1] if nodes[0] else nodes[2])]]

```


**Explanation and Improvements:**

1. **Thresholds:**  I've used approximate thresholds (200mm for flipper length, 45mm and 50mm for culmen length) based on general knowledge of penguin sizes.  These would need to be refined with real data.
2. **Ambiguity Handling:** The ambiguous case (flipper > 200, culmen around 45-50) is now slightly biased towards Chinstrap given the chosen thresholds.  A deeper tree would improve this.
3. **Node List:** The returned `nodes` list now only includes the truth values of the nodes actually traversed during the prediction. This makes the list directly reflect the path taken in the tree, which is more accurate and consistent with the problem statement.  We convert the boolean `True`/`False` to `1`/`0` using `int(n)`. We also handle the potentially unused node by replacing its value by `None`.


**Example Usage:**

```python
penguin1 = {'island': 0, 'culmen_length_mm': 39.1, 'culmen_depth_mm': 18.7, 'flipper_length_mm': 181, 'body_mass_g': 3750, 'sex': 2}
prediction1, nodes1 = predict(penguin1)
print(f"Prediction: {prediction1}, Nodes: {nodes1}")  # Expected: Prediction: 0, Nodes: [1, 1]

penguin2 = {'island': 1, 'culmen_length_mm': 48, 'culmen_depth_mm': 15, 'flipper_length_mm': 210, 'body_mass_g': 4500, 'sex': 1}
prediction2, nodes2 = predict(penguin2)
print(f"Prediction: {prediction2}, Nodes: {nodes2}") # Expected: Prediction: 1, Nodes: [0, 1]

penguin3 = {'island': 2, 'culmen_length_mm': 55, 'culmen_depth_mm': 18, 'flipper_length_mm': 220, 'body_mass_g': 5000, 'sex': 2}
prediction3, nodes3 = predict(penguin3)
print(f"Prediction: {prediction3}, Nodes: {nodes3}") # Expected: Prediction: 2, Nodes: [0, 0]

```


This improved function provides a more accurate representation of the decision tree logic and its execution path, while still maintaining the requested depth of 2 and using the specified features. Remember, for a truly effective classifier, train a decision tree model on a real dataset to determine the best features and thresholds.
