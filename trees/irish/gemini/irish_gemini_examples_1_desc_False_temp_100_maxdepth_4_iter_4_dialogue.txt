


```python
def predict(X: dict):
    nodes = 4 * [None]

    nodes[0] = X["Educational_level"] <= 5  # Primary/Junior cycle incomplete or less
    nodes[1] = X["Type_school"] == 0  # Primary terminal leaver
    nodes[2] = X["DVRT"] <= 50
    nodes[3] = X["DVRT"] <= 70


    if nodes[0]:
        if nodes[1]:
            prediction = 0  # No Certificate
        else:
            if nodes[2]:
                prediction = 0  # No Certificate
            else:
                prediction = 1  # Certificate
    else:
        if X["Type_school"] == 2:  # Vocational
            if nodes[3]:
                prediction = 0 # No certificate
            else:
                prediction = 1 # Certificate

        else: # Secondary or 3rd level
             prediction = 1 # Certificate


    return prediction, nodes

```


**Explanation and Improvements:**

* **Clear Thresholds:**  The code now uses specific thresholds (5 for `Educational_level`, 50 and 70 for `DVRT`) based on the likely interpretation of those features.  These are still hypothetical but more meaningful than placeholders.
* **Encoding Alignment:**  The code uses the provided encoding for `Type_school` (0, 1, 2) and the target variable (0, 1).
* **Simplified Structure:** The nested `if` statements follow the logic of the decision tree described earlier, making the code easier to understand.  The vocational school branch is handled specifically, and the remaining (secondary and 3rd level) are grouped together as they likely lead to certificate attainment.
* **Return Values:** The function returns the `prediction` (0 or 1) and the `nodes` list, which contains the truth values (True/False) of the conditions at each inner node.

**Example Usage:**

```python
example_student = {
    'Sex': 1,
    'DVRT': 65,
    'Educational_level': 3,
    'Prestige_score': 15,
    'Type_school': 1
}

prediction, nodes = predict(example_student)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")

example_student2 = {
    'Sex': 0,
    'DVRT': 40,
    'Educational_level': 7,
    'Prestige_score': 10,
    'Type_school': 0
}

prediction, nodes = predict(example_student2)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")


example_student3 = {
    'Sex': 0,
    'DVRT': 80,
    'Educational_level': 9,
    'Prestige_score': 10,
    'Type_school': 2
}

prediction, nodes = predict(example_student3)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")

```


This improved version provides a more functional and interpretable decision tree classifier while adhering to the provided specifications and encodings.  Remember that with real data, you would train a decision tree model using a suitable algorithm, and the resulting tree structure and thresholds would be learned from the data.
