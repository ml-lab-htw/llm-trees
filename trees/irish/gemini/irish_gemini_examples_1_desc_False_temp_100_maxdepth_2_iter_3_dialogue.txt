


```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["Type_school"] == 0  # Primary terminal leaver
    nodes[1] = X["Educational_level"] <= 8  # Example threshold

    if nodes[0]:
        prediction = 0  # No certificate if primary terminal leaver
    else:  # Secondary or vocational
        if nodes[1]:
            prediction = 0  # No certificate if educational level below threshold
        else:
            prediction = 1  # Certificate if educational level above threshold

    return prediction, nodes
```

**Explanation and Important Notes:**

* **Feature Encoding:** The code directly uses the encoding provided for `Type_school` (0 = primary_terminal_leaver) and assumes an ordinal encoding for `Educational_level`.
* **Threshold:** The `Educational_level` threshold of 8 is arbitrary, as before, and would need to be determined from data in a real-world application.
* **No Training:** The function directly implements the logic of the decision tree we outlined earlier, *without* any training.  This means its performance would likely be suboptimal on real data.  It's a demonstration of the structure, not a trained classifier.
* **`nodes` List:** The `nodes` list stores the truth values of the conditions at each inner node. This allows you to inspect the path taken through the tree for a given input.
* **Real-world Application:** To build a useful decision tree, you *must* train it on a labeled dataset using a machine learning library. This code provides the structure, but the actual split points and logic should be learned from data.
