


Here's the Python function implementing the decision tree classifier for your specified features. The function takes a dictionary `X` containing the feature values and returns the predicted class along with the truth values of the inner nodes:

```python
def predict(X: dict):
    """
    Decision tree classifier using the specified features.

    Args:
        X (dict): Dictionary with the following keys:
            'Sex' (int): 0 = female, 1 = male
            'DVRT' (float): Drumcondra Verbal Reasoning Test score
            'Educational_level' (int): Encoded educational level
            'Prestige_score' (int): Prestige score for father's occupation (0 to 28)
            'Type_school' (int): 0 = primary_terminal_leaver, 1 = secondary_terminal_leaver, 2 = vocational

    Returns:
        tuple: (int, list) - Predicted class (0 or 1) and truth values of inner nodes
    """
    nodes = 7 * [None]
    # Evaluate decision tree conditions
    nodes[0] = X["DVRT"] <= 25.0
    nodes[1] = X["Type_school"] == 0  # Type_school = primary_terminal_leaver
    nodes[2] = X["Prestige_score"] <= 12.0
    nodes[3] = X["Educational_level"] <= 5.0
    nodes[4] = X["Sex"] == 1  # Sex = male
    nodes[5] = X["Type_school"] == 2  # Type_school = vocational

    # Traverse the decision tree to make a prediction
    if nodes[0]:  # If DVRT <= 25
        if nodes[1]:  # If Type_school == primary_terminal_leaver
            prediction = 0  # Not taken
        else:  # If Type_school != primary_terminal_leaver
            if nodes[2]:  # If Prestige_score <= 12
                prediction = 0  # Not taken
            else:  # If Prestige_score > 12
                prediction = 1  # Taken
    else:  # If DVRT > 25
        if nodes[3]:  # If Educational_level <= 5
            prediction = 0  # Not taken
        else:  # If Educational_level > 5
            if nodes[4]:  # If Sex == male
                prediction = 1  # Taken
            else:  # If Sex == female
                if nodes[5]:  # If Type_school == vocational
                    prediction = 1  # Taken
                else:  # If Type_school != vocational
                    prediction = 0  # Not taken

    return prediction, nodes
```

### Explanation of the Code:
1. **Inputs**:
    - The input `X` is a dictionary with keys: `'Sex'`, `'DVRT'`, `'Educational_level'`, `'Prestige_score'`, and `'Type_school'`.
    - These keys represent the features used by the decision tree.

2. **Nodes**:
    - Each `nodes[i]` corresponds to the truth value (`True` or `False`) of a condition in the decision tree.
    - Conditions are based on the thresholds and feature values, as outlined in the decision tree.

3. **Conditions**:
    - `nodes[0]`: Is the Drumcondra Verbal Reasoning Test score (`DVRT`) ≤ 25?
    - `nodes[1]`: Is the type of school (`Type_school`) "primary_terminal_leaver" (encoded as `0`)?
    - `nodes[2]`: Is the prestige score for father's occupation (`Prestige_score`) ≤ 12?
    - `nodes[3]`: Is the educational level attained (`Educational_level`) ≤ 5?
    - `nodes[4]`: Is the sex of the student (`Sex`) male (`1`)?
    - `nodes[5]`: Is the type of school (`Type_school`) "vocational" (encoded as `2`)?

4. **Predictions**:
    - The `if`/`else` logic navigates the decision tree based on the truth values of `nodes` and determines whether the student has taken the school leaving certificate (1 = taken, 0 = not taken).

5. **Outputs**:
    - The function returns the predicted class (`0` or `1`) and the truth values of the inner nodes as a list for interpretability.

### Example Usage:

```python
# Example input feature values
X = {
    "Sex": 0,  # Female
    "DVRT": 30,
    "Educational_level": 6,
    "Prestige_score": 15,
    "Type_school": 2  # Vocational school
}

# Make a prediction
prediction, nodes = predict(X)

# Output the result
print("Prediction:", prediction)  # 1 = Taken, 0 = Not taken
print("Node evaluations:", nodes)  # Truth values of each inner node
```

This code will classify the input features correctly, and the `nodes` list will help trace which conditions were satisfied.