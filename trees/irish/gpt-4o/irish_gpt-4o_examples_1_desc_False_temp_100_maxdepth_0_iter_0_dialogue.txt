


Here is the requested Python function, formatted exactly as per your requirements:

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # First decision: based on Educational_level
    nodes[0] = X["Educational_level"] <= 5
    
    if nodes[0]:
        # Second decision: based on Type of school, if Educational_level <= 5
        nodes[1] = X["Type_school"] == 0  # primary_terminal_leaver
        
        if nodes[1]:
            prediction = 0  # Did not take school leaving certificate
        else:
            prediction = 1  # Took school leaving certificate
    else:
        prediction = 1  # Took school leaving certificate

    return prediction, nodes
```

### Explanation:
- **Nodes**: There are two internal decision nodes, so the list `nodes` holds two values (`None` initially).
  - **Node 1 (nodes[0])**: The first decision is based on the feature `Educational_level`. If it's less than or equal to 5 (corresponding to levels below or including junior_cycle_terminal_leaver), we move to the next decision. Otherwise, the prediction is that the school leaving certificate was taken (1).
  - **Node 2 (nodes[1])**: If the `Educational_level` is less than or equal to 5, we then evaluate the `Type_school`. If the school type is `primary_terminal_leaver` (encoded as 0), the prediction is that the certificate was not taken (0). Otherwise, the certificate was taken (1).

### Feature usage:
- **Educational_level**: This is the main feature used to determine the first split. The threshold is set at `5`, which separates different levels of education.
- **Type_school**: This is used in the second decision if the `Educational_level` is less than or equal to 5. The threshold distinguishes between a primary_terminal_leaver (0) and other types of schools.

### Prediction output:
- The function returns two outputs:
  1. **Prediction**: A binary prediction of whether the school leaving certificate was taken (`1`) or not (`0`).
  2. **Nodes**: A list of boolean values representing whether the conditions in the decision nodes were satisfied (`True` or `False`). This provides traceability of the decision path.

