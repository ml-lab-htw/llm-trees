


Sure! Below is the Python function that implements the decision tree based on the features you provided, with a maximum depth of 2. The function returns both a prediction and a list of truth values corresponding to the conditions in the inner nodes.

```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node 1: DVRT (Drumcondra Verbal Reasoning Test score)
    nodes[0] = X["DVRT"] <= 50
    
    if nodes[0]:
        # Node 2: Educational_level
        nodes[1] = X["Educational_level"] <= 5
        
        if nodes[1]:
            prediction = 0  # Certificate not taken
        else:
            prediction = 1  # Certificate taken
    else:
        # Node 2: Educational_level
        nodes[1] = X["Educational_level"] <= 3
        
        if nodes[1]:
            prediction = 0  # Certificate not taken
        else:
            prediction = 1  # Certificate taken

    return prediction, nodes
```

### Explanation:

1. **First Node**: The first decision is based on the **DVRT (Drumcondra Verbal Reasoning Test score)**. If the score is less than or equal to 50, the student is predicted to be at a lower academic level and continues on the left branch. Otherwise, we go right.

2. **Second Node (Left Branch)**: If the student has a lower test score (DVRT <= 50), the next decision is based on **Educational_level**. If the educational level is less than or equal to 5 (which includes students who haven't completed the Junior Cycle or have left school early), the prediction is that the certificate is **not taken** (0). Otherwise, the certificate is **taken** (1).

3. **Second Node (Right Branch)**: If the student has a higher test score (DVRT > 50), the next decision is again based on **Educational_level**. If the educational level is less than or equal to 3 (which includes students at low educational levels like third-level incomplete or junior cycle incomplete), the prediction is that the certificate is **not taken** (0). Otherwise, the certificate is **taken** (1).

### Example Usage:

```python
X = {
    "Sex": 1,  # Male
    "DVRT": 45,
    "Educational_level": 6,
    "Prestige_score": 15,
    "Type_school": 0
}

prediction, nodes = predict(X)
print("Prediction:", prediction)  # Output: Prediction: 1
print("Nodes:", nodes)  # Output: Nodes: [True, False]
```

In this example, the student has a **DVRT score of 45**, which is less than or equal to 50, so we go left. Their **Educational_level is 6**, which is greater than 5, so they are predicted to have taken the school leaving certificate (prediction = 1).

Let me know if you need further adjustments or clarifications!