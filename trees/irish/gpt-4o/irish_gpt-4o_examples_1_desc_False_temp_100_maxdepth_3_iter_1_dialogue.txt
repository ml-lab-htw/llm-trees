


Sure! Below is the Python function implementing a decision tree (depth 3) based on your provided features, encoding, and target variable. The function returns the predicted class (0 = not taken, 1 = taken) and the truth values of the inner nodes as a list:

```python
def predict(X: dict):
    """
    Predict whether the school leaving certificate is taken (1) or not (0) based on input features.
    
    Features:
        - Sex: Sex of the child (0 = female, 1 = male)
        - DVRT: Drumcondra Verbal Reasoning Test score
        - Educational_level: Educational level attained (3rd_level_complete=0, ..., Primary_terminal_leaver=7, etc.)
        - Prestige_score: Prestige score for father's occupation (0 to 28)
        - Type_school: Type of school (0 = primary_terminal_leaver, 1 = secondary_terminal_leaver, 2 = vocational)
    
    Args:
        X (dict): Input dictionary of features.
            {
                'Sex': int,
                'DVRT': int,
                'Educational_level': int,
                'Prestige_score': int,
                'Type_school': int
            }
    
    Returns:
        tuple: (prediction, nodes)
            - prediction (int): Predicted class (0 = not taken, 1 = taken)
            - nodes (list): Truth values of inner nodes
    """
    nodes = 3 * [None]

    # Node 0: Check Educational Level <= 5
    nodes[0] = X["Educational_level"] <= 5  # Threshold divides lower attainment (<= 5) vs higher attainment (> 5)

    if nodes[0]:
        # Node 1: Check if Type of School == primary_terminal_leaver (0)
        nodes[1] = X["Type_school"] == 0

        if nodes[1]:
            prediction = 0  # If Educational Level <= 5 and Type_school == primary_terminal_leaver, certificate is not taken
        else:
            prediction = 1  # Otherwise, certificate is taken
    else:
        # Node 2: Check DVRT (Drumcondra Verbal Reasoning Test Score) <= 20
        nodes[1] = X["DVRT"] <= 20

        if nodes[1]:
            prediction = 0  # If Educational Level > 5 but low DVRT score, certificate is not taken
        else:
            prediction = 1  # If Educational Level > 5 and DVRT score is high, certificate is taken

    return prediction, nodes
```

---

### Explanation of Decision Tree Logic:
1. **Node 0 (Educational level attained)**: 
   - The first split checks whether the educational level attained is `<= 5`.
   - Values `<= 5` correspond to lower educational levels (e.g., primary or junior cycle incomplete), while values `> 5` correspond to higher levels (e.g., senior cycle, third level).

2. **Node 1 (Type of school)**:
   - For lower educational levels (`<= 5`), the second check is whether the school type is "primary terminal leaver" (`Type_school == 0`).
   - If true, the certificate is **not taken**. If false, the certificate is **taken**.

3. **Node 2 (DVRT Score)**:
   - For higher educational levels (`> 5`), the second check is whether the Drumcondra Verbal Reasoning Test (DVRT) score is `<= 20`.
   - Low scores are associated with poorer performance, predicting the certificate is **not taken**. High scores predict the certificate is **taken**.

---

### Example Usage:

```python
# Input feature dictionary
X = {
    "Sex": 1,  # male
    "DVRT": 25,  # high verbal reasoning score
    "Educational_level": 6,  # Junior_cycle_terminal_leaver-vocational_school
    "Prestige_score": 15,  # moderate prestige
    "Type_school": 1,  # secondary_terminal_leaver
}

# Prediction
prediction, nodes = predict(X)

print("Prediction:", prediction)  # Output: 1 (taken)
print("Nodes:", nodes)  # Output: [False, False]
```

---

### Example Outputs:

1. **Input #1:**
   ```python
   X = {
       "Sex": 0,  # female
       "DVRT": 10,  # low score
       "Educational_level": 4,  # Junior_cycle_incomplete-vocational_school
       "Prestige_score": 5,  # low prestige
       "Type_school": 0,  # primary_terminal_leaver
   }
   ```
   **Output:**
   ```python
   Prediction: 0  # Certificate not taken
   Nodes: [True, True]
   ```

2. **Input #2:**
   ```python
   X = {
       "Sex": 1,  # male
       "DVRT": 22,  # moderate score
       "Educational_level": 8,  # Senior_cycle_incomplete-secondary_school
       "Prestige_score": 20,  # high prestige
       "Type_school": 1,  # secondary_terminal_leaver
   }
   ```
   **Output:**
   ```python
   Prediction: 1  # Certificate taken
   Nodes: [False, False]
   ```