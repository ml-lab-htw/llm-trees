


Here is the Python function that implements your decision tree with the specified features, thresholds, and a depth of 4. It predicts whether the school leaving certificate is taken (1) or not (0) and returns a list of truth values corresponding to the inner nodes' conditions.

```python
def predict(X: dict):
    # Initialize an empty list to store truth values for the inner nodes.
    nodes = [None] * 4

    # Decision tree conditions for each node
    nodes[0] = X["Educational_level"] <= 3   # Educational level attained <= Junior_cycle_incomplete
    nodes[1] = X["Type_school"] == 0        # Type of school is primary_terminal_leaver
    nodes[2] = X["DVRT"] > 40               # Drumcondra Verbal Reasoning Test score > 40
    nodes[3] = X["Prestige_score"] > 12     # Prestige score for father's occupation > 12

    # Decision tree logic
    if nodes[0]:  # Educational level <= Junior_cycle_incomplete
        if nodes[1]:  # Type of school = primary_terminal_leaver
            prediction = 0  # Not taken
        else:  # Type of school != primary_terminal_leaver
            if nodes[2]:  # DVRT > 40
                prediction = 1  # Taken
            else:  # DVRT <= 40
                prediction = 0  # Not taken
    else:  # Educational level > Junior_cycle_incomplete
        if nodes[3]:  # Prestige score > 12
            if X["Sex"] == 0:  # Sex = female
                prediction = 1  # Taken
            else:  # Sex = male
                prediction = 1  # Taken
        else:  # Prestige score <= 12
            prediction = 0  # Not taken

    return prediction, nodes
```

### Explanation of the Function:

1. **Input format**:
    - The input `X` is a dictionary where each key corresponds to a feature:
      ```python
      X = {
          "Sex": 0,                # Female
          "DVRT": 45,             # Drumcondra Verbal Reasoning Test Score
          "Educational_level": 4, # Junior_cycle_incomplete-vocational_school
          "Prestige_score": 15,   # Father's Prestige Score
          "Type_school": 1        # Secondary_terminal_leaver
      }
      ```

2. **Inner nodes**:
    - Each `nodes[i]` corresponds to an intermediate condition in the decision tree.
    - `nodes[0]`: Checks if the educational level is ≤ Junior_cycle_incomplete (values ≤ 3).
    - `nodes[1]`: Checks if the type of school is primary_terminal_leaver (0).
    - `nodes[2]`: Checks if the DVRT score is greater than 40.
    - `nodes[3]`: Checks if the father's prestige score is greater than 12.

3. **Tree structure**:
    - The tree follows the logic you described:
        - First, split on `Educational_level` (`nodes[0]`).
        - Then refine based on `Type_school` (`nodes[1]`) and `DVRT` (`nodes[2]`) for lower educational levels.
        - For higher educational levels, focus on `Prestige_score` (`nodes[3]`) and `Sex`.

4. **Output**:
    - The function returns:
      - `prediction`: 1 if the school leaving certificate is taken, 0 otherwise.
      - `nodes`: A list of truth values (1 for `True`, 0 for `False`) representing whether each node's condition was satisfied.

### Example Usage:
```python
X = {
    "Sex": 0,                # Female
    "DVRT": 45,             # Drumcondra Verbal Reasoning Test Score
    "Educational_level": 4, # Junior_cycle_incomplete-vocational_school
    "Prestige_score": 15,   # Father's Prestige Score
    "Type_school": 1        # Secondary_terminal_leaver
}

prediction, nodes = predict(X)
print("Prediction:", prediction)  # Output: Prediction: 1
print("Truth values of nodes:", nodes)  # Output: Truth values of nodes: [False, False, True, True]
```

The function is now ready for use and should capture the decision logic in a clean and reusable format!