


```python
def predict(X: dict):
    # Initialize a list of nodes to store truth values for each inner node
    nodes = 2 * [None]

    # First node: Check the educational level
    # Threshold: Educational level attained <= 5 (indicating levels from Junior cycle incomplete or primary terminal leaver)
    nodes[0] = X["Educational_level"] <= 5

    if nodes[0]:
        # Second node: Check the type of school if educational level is <= 5
        # Threshold: Type of school == 0 (primary_terminal_leaver)
        nodes[1] = X["Type_school"] == 0

        if nodes[1]:
            # Classify as not taking the certificate
            prediction = 0
        else:
            # Otherwise, classify as taking the certificate
            prediction = 1

    else:
        # If educational level is > 5, check the Drumcondra Verbal Reasoning Test (DVRT) score
        # Threshold: DVRT score <= 50
        nodes[1] = X["DVRT"] <= 50

        if nodes[1]:
            # Classify as not taking the certificate
            prediction = 0
        else:
            # Classify as taking the certificate
            prediction = 1

    return prediction, nodes
```

### Explanation:
- The function accepts an input dictionary `X` where each key corresponds to one of the features provided (e.g., `Educational_level`, `Type_school`, `DVRT`, etc.).
- The decision tree uses two decision nodes:
  1. **Educational level attained**: Determines whether the level is less than or equal to 5.
  2. **Type of school** or **Drumcondra Verbal Reasoning Test score**, depending on the outcome of the first decision node.
  
- The function returns a tuple consisting of:
  - `prediction`: The predicted class (0 = certificate not taken, 1 = certificate taken).
  - `nodes`: A list representing the truth values of the inner nodes (1 if the condition is satisfied, 0 otherwise).

### Example usage:
```python
# Example input
X = {
    "Sex": 1,  # male
    "DVRT": 60,  # Drumcondra Verbal Reasoning Test score
    "Educational_level": 6,  # Junior cycle terminal leaver (vocational school)
    "Prestige_score": 15,  # Father's prestige score
    "Type_school": 2  # vocational
}

# Call the function
prediction, nodes = predict(X)

# Output
print("Prediction:", prediction)  # Expected output: 1 (certificate taken)
print("Nodes:", nodes)  # Expected output: [False, False] (Educational_level > 5, DVRT > 50)
```