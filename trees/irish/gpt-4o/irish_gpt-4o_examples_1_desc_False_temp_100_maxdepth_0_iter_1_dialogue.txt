


```python
def predict(X: dict):
    nodes = 2 * [None]
    
    # Node 1: Educational level attained <= 5
    nodes[0] = X["Educational_level"] <= 5
    
    # Node 2: Type of school (0 = primary_terminal_leaver, 1 = secondary_terminal_leaver, 2 = vocational)
    if nodes[0]:
        nodes[1] = X["Type_school"] == 0  # Primary terminal leaver
        if nodes[1]:
            prediction = 0  # No SLC
        else:
            prediction = 0  # No SLC (vocational or secondary with low education level)
    else:
        nodes[1] = X["Type_school"] == 1  # Secondary school
        if nodes[1]:
            prediction = 1  # SLC
        else:
            prediction = 0  # No SLC (not secondary)

    return prediction, nodes
```

### Explanation:

1. **Node 1**: The first decision checks whether the **Educational_level** is less than or equal to 5. This corresponds to lower educational attainments such as Junior cycle incomplete or terminal leaver.
   
2. **Node 2**: If the educational level is low (<= 5), we check the **Type of school**. If the school is a **primary terminal leaver** (Type_school = 0), the prediction is **No SLC** (0). If the school is vocational or secondary, the prediction remains **No SLC** because the educational level is still low.
   
3. **Node 2 (Else)**: If the educational level is higher (> 5), we check if the student attended a **secondary school** (Type_school = 1). If yes, the student is predicted to have taken the SLC (1). If not, the student likely did not take the SLC (0).

### Example usage:

```python
example_input = {
    "Sex": 1,  # Male
    "DVRT": 85,  # Drumcondra Verbal Reasoning Test score
    "Educational_level": 6,  # Junior cycle terminal leaver - vocational school
    "Prestige_score": 15,  # Father's occupation prestige score
    "Type_school": 2  # Vocational school
}

prediction, nodes = predict(example_input)
print(f"Prediction: {prediction}, Nodes: {nodes}")
```

This function will predict whether the school leaving certificate is taken or not (0 = not taken, 1 = taken), and also return the truth values of the decision nodes used in the decision tree.