


```python
def predict(X: dict):
    nodes = [None] * 4  # Initialize list to store truth values of inner nodes

    # Node 0: Check if Type_school == primary_terminal_leaver (encoded as 0)
    nodes[0] = 1 if X["Type_school"] == 0 else 0
    if nodes[0]:
        # If True, predict: Does not take school leaving certificate (0)
        prediction = 0  
    else:
        # Node 1: Check if Type_school == vocational (encoded as 2)
        nodes[1] = 1 if X["Type_school"] == 2 else 0
        if nodes[1]:
            # Node 2: Check if Educational_level <= 5
            nodes[2] = 1 if X["Educational_level"] <= 5 else 0
            if nodes[2]:
                # If True, predict: Does not take school leaving certificate (0)
                prediction = 0
            else:
                # If False, predict: Takes school leaving certificate (1)
                prediction = 1
        else:
            # Type_school == secondary (encoded as 1)
            # Node 3: Check if DVRT <= 55
            nodes[3] = 1 if X["DVRT"] <= 55 else 0
            if nodes[3]:
                # If True, predict: Does not take school leaving certificate (0)
                prediction = 0
            else:
                # If False, predict: Takes school leaving certificate (1)
                prediction = 1
    return prediction, nodes
```

**Explanation:**

- **Node 0** checks if the `Type_school` is **primary_terminal_leaver** (encoded as `0`). If this condition is satisfied (`nodes[0] == 1`), the function predicts that the school leaving certificate is **not taken** (`prediction = 0`).
- If **Node 0** is not satisfied (`nodes[0] == 0`), the function proceeds to **Node 1**, which checks if the `Type_school` is **vocational** (encoded as `2`).
  - If **Node 1** is satisfied (`nodes[1] == 1`), the function moves to **Node 2**, checking if the `Educational_level` is less than or equal to `5`.
    - If **Node 2** is satisfied (`nodes[2] == 1`), the prediction is **not taken** (`prediction = 0`).
    - If **Node 2** is not satisfied (`nodes[2] == 0`), the prediction is **taken** (`prediction = 1`).
  - If **Node 1** is not satisfied (`nodes[1] == 0`), the `Type_school` must be **secondary** (encoded as `1`). The function proceeds to **Node 3**, checking if the `DVRT` score is less than or equal to `55`.
    - If **Node 3** is satisfied (`nodes[3] == 1`), the prediction is **not taken** (`prediction = 0`).
    - If **Node 3** is not satisfied (`nodes[3] == 0`), the prediction is **taken** (`prediction = 1`).

**Note on Feature Encoding and Thresholds:**

- **Type_school** is encoded as:
  - `0`: primary_terminal_leaver
  - `1`: secondary_terminal_leaver
  - `2`: vocational
- **Educational_level** ranges from `0` to `10`.
- **DVRT** (Drumcondra Verbal Reasoning Test Score) is a numerical score; a threshold of `55` is used in the decision tree.

**Usage Example:**

```python
# Example input feature dictionary
X_example = {
    'Sex': 1,                  # Male
    'DVRT': 60,                # DVRT score
    'Educational_level': 6,    # Junior_cycle_terminal_leaver-vocational_school
    'Prestige_score': 15,      # Prestige score
    'Type_school': 2           # Vocational
}

# Get prediction and nodes
prediction, nodes = predict(X_example)

print("Prediction:", "Taken" if prediction == 1 else "Not taken")
print("Nodes truth values:", nodes)
```

**Output:**

```
Prediction: Taken
Nodes truth values: [0, 1, 0, None]
```

- The output shows that the school leaving certificate is **taken**.
- The **nodes** list indicates which conditions were satisfied:
  - `nodes[0] == 0`: `Type_school` is not `primary_terminal_leaver`.
  - `nodes[1] == 1`: `Type_school` is `vocational`.
  - `nodes[2] == 0`: `Educational_level` is not less than or equal to `5`.
  - `nodes[3] == None`: This node was not evaluated since it is not reachable in this path.