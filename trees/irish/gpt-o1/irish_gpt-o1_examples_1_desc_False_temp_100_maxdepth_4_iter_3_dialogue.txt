


```python
def predict(X: dict):
    nodes = [None] * 4  # Initialize a list of 4 nodes

    # Node 0: Check if Type_school is Primary Terminal Leaver (0)
    nodes[0] = X['Type_school'] == 0
    if nodes[0]:
        # If true, predict Not Taken (0)
        prediction = 0
    else:
        # Node 1: Check if Educational_level is greater than or equal to 5
        nodes[1] = X['Educational_level'] >= 5
        if nodes[1]:
            # If true, predict Not Taken (0)
            prediction = 0
        else:
            # Node 2: Check if Prestige_score is less than or equal to 15
            nodes[2] = X['Prestige_score'] <= 15
            if nodes[2]:
                # Node 3: Check if DVRT is less than or equal to 50
                nodes[3] = X['DVRT'] <= 50
                if nodes[3]:
                    # If true, predict Not Taken (0)
                    prediction = 0
                else:
                    # If false, predict Taken (1)
                    prediction = 1
            else:
                # If Prestige_score > 15, predict Taken (1)
                prediction = 1
    return prediction, nodes
```

**Explanation:**

- **Node 0 (`nodes[0]`):**  
  Checks if the student is from a **Primary Terminal Leaver** school.
  ```python
  nodes[0] = X['Type_school'] == 0
  ```
  - If **True**, the prediction is **Not Taken** (`0`).
  - If **False**, proceed to **Node 1**.

- **Node 1 (`nodes[1]`):**  
  Checks if the **Educational_level** is greater than or equal to `5`.
  ```python
  nodes[1] = X['Educational_level'] >= 5
  ```
  - Since lower numerical values represent higher educational attainment, a value **>= 5** indicates lower attainment.
  - If **True**, predict **Not Taken** (`0`).
  - If **False**, proceed to **Node 2**.

- **Node 2 (`nodes[2]`):**  
  Checks if the **Prestige_score** is less than or equal to `15`.
  ```python
  nodes[2] = X['Prestige_score'] <= 15
  ```
  - A lower prestige score may indicate a lower socio-economic status.
  - If **True**, proceed to **Node 3**.
  - If **False**, predict **Taken** (`1`).

- **Node 3 (`nodes[3]`):**  
  Checks if the **DVRT** score is less than or equal to `50`.
  ```python
  nodes[3] = X['DVRT'] <= 50
  ```
  - A lower DVRT score might suggest lower academic ability.
  - If **True**, predict **Not Taken** (`0`).
  - If **False**, predict **Taken** (`1`).

**Feature Encoding and Spelling:**

- `'Sex'`: Sex of the child (`0` = female, `1` = male)
- `'DVRT'`: Drumcondra Verbal Reasoning Test score (numeric value)
- `'Educational_level'`: Educational level attained (encoded from `0` to `10`)
- `'Prestige_score'`: Prestige score for father's occupation (`0` to `28`)
- `'Type_school'`: Type of school (`0` = primary_terminal_leaver, `1` = secondary_terminal_leaver, `2` = vocational)

**Target Variable Encoding:**

- `0`: School leaving certificate **Not Taken**
- `1`: School leaving certificate **Taken**

**Thresholds Used:**

- **Educational_level >= 5:**  
  - Represents lower educational attainment.
  - Values `5` and above correspond to less advanced educational levels.

- **Prestige_score <= 15:**  
  - Splits based on socio-economic status.
  - A score of `15` or below indicates lower prestige occupations.

- **DVRT <= 50:**  
  - Threshold chosen based on average DVRT scores.
  - A score of `50` or below indicates lower verbal reasoning ability.

**Example Usage:**

```python
# Example feature dictionary
X_example = {
    'Sex': 0,                  # Female
    'DVRT': 48,                # DVRT score
    'Educational_level': 4,    # Junior_cycle_incomplete-vocational_school
    'Prestige_score': 12,      # Prestige score
    'Type_school': 1           # Secondary_terminal_leaver
}

# Prediction
prediction, nodes = predict(X_example)
print("Prediction:", "Taken" if prediction == 1 else "Not Taken")
print("Nodes:", nodes)
```

**Output:**

```
Prediction: Not Taken
Nodes: [False, False, True, True]
```

**Explanation of Output:**

- **Node 0:** `False`  
  - `Type_school` is not `0` (Primary Terminal Leaver).
- **Node 1:** `False`  
  - `Educational_level` (`4`) is less than `5`.
- **Node 2:** `True`  
  - `Prestige_score` (`12`) is less than or equal to `15`.
- **Node 3:** `True`  
  - `DVRT` (`48`) is less than or equal to `50`.
- **Final Prediction:**  
  - Based on the path taken through the tree, the prediction is **Not Taken** (`0`).

**Notes:**

- The function strictly follows the decision tree with a maximum depth of 4.
- It returns both the prediction and the list of node conditions (`nodes`), where each entry is `True` (`1`) if the condition is satisfied and `False` (`0`) otherwise.
- Thresholds are carefully chosen to reflect meaningful splits based on the described feature ranges.