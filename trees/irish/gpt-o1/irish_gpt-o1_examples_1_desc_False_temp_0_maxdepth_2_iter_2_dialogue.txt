


```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["Educational_level"] <= 5  # Split based on Educational Level
    nodes[1] = X["Type_school"] == 0 # Split based on Type of School (Primary terminal leaver)
    
    if nodes[0]:
        prediction = 0 # Didn't reach sufficient education level
    else:
        if nodes[1]:
            prediction = 0 # Finished primary school only
        else:
            prediction = 1 # Likely completed secondary/vocational
    
    return prediction, nodes
```

**Explanation and Justification:**

1. **Feature Encoding:** The provided feature encoding is used directly within the function.

2. **Thresholds:**
   - For `Educational_level`, a threshold of 5 is used. This is consistent with the previous rationale that levels below 5 likely indicate incomplete basic education.
   - For `Type_school`, a value of 0 (primary_terminal_leaver) is used to identify those who finished primary school but didn't proceed to secondary or vocational education.

3. **Decision Logic:** The function implements the decision tree logic as described before:
   - If `Educational_level` is less than or equal to 5, predict 0 (No Certificate).
   - Otherwise, check `Type_school`. If it's 0 (primary_terminal_leaver), predict 0.  Otherwise, predict 1.

4. **`nodes` List:** The `nodes` list correctly stores the truth values (1 or 0) of the conditions at each inner node.  This allows for tracking the path taken through the tree for a given input.

**Example Usage:**

```python
X = {
    'Sex': 0, 
    'DVRT': 90, 
    'Educational_level': 7, 
    'Prestige_score': 15, 
    'Type_school': 1  # Secondary terminal leaver
}

prediction, nodes = predict(X)
print(f"Prediction: {prediction}")
print(f"Nodes: {nodes}")  # Output: Nodes: [False, False] (or [0, 0])
```

In this example, the prediction would be 1 (Certificate), and the `nodes` list would be `[False, False]` because both conditions (`Educational_level <= 5` and `Type_school == 0`) are false.

Remember that this decision tree is a simplified model based on assumptions.  Its performance would need to be evaluated on real data, and the tree might need to be refined (e.g., different thresholds, deeper tree) for optimal accuracy.
