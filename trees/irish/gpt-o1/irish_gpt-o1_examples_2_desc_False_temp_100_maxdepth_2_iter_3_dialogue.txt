


Here is the `predict` function:

```python
def predict(X: dict):
    nodes = [None] * 2  # Initialize a list to store the truth values of inner nodes
    nodes[0] = int(X["Educational_level"] <= 6.5)
    nodes[1] = int(X["DVRT"] <= 50)

    if nodes[0]:
        prediction = 0  # Not taken
    else:
        if nodes[1]:
            prediction = 0  # Not taken
        else:
            prediction = 1  # Taken

    return prediction, nodes
```

**Explanation:**

- **Feature Keys:**
  - `"Educational_level"`: Represents the educational level attained.
  - `"DVRT"`: Drumcondra Verbal Reasoning Test score.

- **Inner Nodes:**
  - `nodes[0]`: Checks if `Educational_level` is less than or equal to `6.5`.
    - If **True** (`1`), predicts **Not taken** (returns `0`).
  - `nodes[1]`: Checks if `DVRT` is less than or equal to `50`.
    - Evaluated only if `nodes[0]` is **False** (`0`).
    - If **True** (`1`), predicts **Not taken** (returns `0`).
    - If **False** (`0`), predicts **Taken** (returns `1`).

- **Nodes List:**
  - Each entry in `nodes` is `1` if the condition is satisfied and `0` otherwise.
  - `nodes = [int(condition1), int(condition2)]`

- **Prediction Encoding:**
  - `prediction = 0`: School leaving certificate **Not taken**
  - `prediction = 1`: School leaving certificate **Taken**

**Example Usage:**
```python
# Sample input dictionary
X_sample = {
    "Sex": 1,
    "DVRT": 55,
    "Educational_level": 7,
    "Prestige_score": 15,
    "Type_school": 1
}

# Get prediction and node truth values
prediction, nodes = predict(X_sample)

print("Prediction:", "Taken" if prediction == 1 else "Not taken")
print("Nodes truth values:", nodes)
```

**Note:** Ensure that the feature values in the input dictionary `X` match the specified encodings and data types.