


```python
def predict(X: dict):
    nodes = 2 * [None]

    nodes[0] = X["Educational_level"] <= 7  # Primary_terminal_leaver or below implies no certificate
    nodes[1] = X["Type_school"] == 0       # Primary_terminal_leaver implies no certificate even if Educational_level > 7

    if nodes[0]:
        prediction = 0  # No certificate
    else:
        if nodes[1]:
            prediction = 0 # No certificate (primary terminal leaver)
        else:
            prediction = 1 # Certificate (secondary or vocational)


    return prediction, nodes
```


**Explanation and improvements:**

* **`Educational_level` threshold:** The code directly uses the encoded values for `Educational_level`. Values less than or equal to 7 (Primary_terminal_leaver) indicate no school leaving certificate.
* **`Type_school` condition:** This second split checks if the school type is `primary_terminal_leaver` (encoded as 0).  This handles cases where someone might have an `Educational_level` above 7 but still didn't proceed to secondary education.
* **Clearer logic:**  The nested `if/else` structure directly reflects the decision tree logic, making the function easier to understand.
* **No arbitrary thresholds:**  This implementation avoids arbitrary thresholds for numerical features, using the provided encodings directly.


This function now accurately implements the decision tree logic and provides the prediction and node truth values as requested.  It's robust and directly uses the given feature encodings, eliminating the need for manual threshold selection.
