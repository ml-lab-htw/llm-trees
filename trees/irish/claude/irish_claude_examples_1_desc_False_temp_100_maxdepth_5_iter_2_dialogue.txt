


I'll create a Python function based on the decision tree I provided earlier, using the exact feature keys and encodings you specified:

```python
def predict(X: dict):
    nodes = 5 * [None]
    
    # First split on Educational level
    nodes[0] = X["Educational_level"] <= 4
    
    # Second split on DVRT
    nodes[1] = X["DVRT"] <= 85
    
    # Third split on Type_school
    nodes[2] = X["Type_school"] == 2  # vocational school
    
    # Fourth split on Prestige_score
    nodes[3] = X["Prestige_score"] <= 12
    
    # Fifth split on Type_school again for different branch
    nodes[4] = X["Type_school"] == 2  # vocational school
    
    if nodes[0]:
        # Educational_level <= 4
        prediction = 0  # No Certificate
    else:
        # Educational_level > 4
        if nodes[1]:
            # DVRT <= 85
            if nodes[2]:
                # Type_school is vocational
                prediction = 0  # No Certificate
            else:
                # Type_school is not vocational
                prediction = 1  # Certificate
        else:
            # DVRT > 85
            if nodes[3]:
                # Prestige_score <= 12
                if nodes[4]:
                    # Type_school is vocational
                    prediction = 0  # No Certificate
                else:
                    # Type_school is not vocational
                    prediction = 1  # Certificate
            else:
                # Prestige_score > 12
                prediction = 1  # Certificate
    
    return prediction, nodes
```

This implementation:
- Takes a dictionary with the specified feature keys
- Uses the exact encoding provided for features and target variable
- Returns both the prediction (0 = certificate not taken, 1 = certificate taken) and a list of boolean values representing the evaluation of each node condition
- Uses meaningful thresholds based on the feature descriptions
- Follows the structure of the decision tree I provided earlier
- Has